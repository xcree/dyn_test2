

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012


     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       28 October 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C21323MLF
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SLEEP_TIMER:			equ	0h	;Sleep Timer value
    26  0018                    SLEEP_TIMER_MASK:		equ	18h	;Sleep Timer mask
    27  0000                    SLEEP_TIMER_JUST:		equ	0h	;Sleep Timer value justified
    28  0000                    SWITCH_MODE_PUMP:		equ	0h	;Switch Mode Pump setting
    29  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    30  0000                    SWITCH_MODE_PUMP_JUST:	equ	0h	;Switch Mode Pump justified
    31  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    32  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    33  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    34  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    35  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    36  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    37                                                        
    38  0005                    POWER_SETTING:			equ	5h
    39  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    40  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    41  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    42  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    43  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    44  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    45  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    46  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    47  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    48  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    49                          
    50  0000                    COMM_RX_PRESENT:		equ	0	;1 = TRUE
    51  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    52                          
    53  0005                    CLOCK_DIV_VC1:			equ	5h	;VC1 clock divider
    54  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    55  0050                    CLOCK_DIV_VC1_JUST:		equ	50h	;VC1 clock divider justified
    56  000C                    CLOCK_DIV_VC2:			equ	ch	;VC2 clock divider
    57  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    58  000C                    CLOCK_DIV_VC2_JUST:		equ	ch	;VC2 clock divider justified
    59  0002                    CLOCK_INPUT_VC3:		equ	2h	;VC3 clock source
    60  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    61  0002                    CLOCK_INPUT_VC3_JUST:	equ	2h	;VC3 clock source justified
    62  0031                    CLOCK_DIV_VC3:			equ	31h	;VC3 clock divider
    63  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    64  0031                    CLOCK_DIV_VC3_JUST:		equ	31h	;VC3 clock divider justified
    65  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    66  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    67  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    68  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    69  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    70  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    71                          ;
    72                          ; register initial values
    73                          ;
    74  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    75  004A                    PORT_0_GLOBAL_SELECT:	equ 4ah	;Port 0 global select register (PRT0GS)
    76  00CA                    PORT_0_DRIVE_0:			equ cah	;Port 0 drive mode 0 register (PRT0DM0)
    77  0015                    PORT_0_DRIVE_1:			equ 15h	;Port 0 drive mode 1 register (PRT0DM1)
    78  0015                    PORT_0_DRIVE_2:			equ 15h	;Port 0 drive mode 2 register (PRT0DM2)
    79  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    80  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    81  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    82  0001                    PORT_1_GLOBAL_SELECT:	equ 1h	;Port 1 global select register (PRT1GS)
    83  0001                    PORT_1_DRIVE_0:			equ 1h	;Port 1 drive mode 0 register (PRT1DM0)
    84  00D6                    PORT_1_DRIVE_1:			equ d6h	;Port 1 drive mode 1 register (PRT1DM1)
    85  00D6                    PORT_1_DRIVE_2:			equ d6h	;Port 1 drive mode 2 register (PRT1DM2)
    86  0028                    PORT_1_INTENABLE:		equ 28h	;Port 1 interrupt enable register (PRT1IE)
    87  0028                    PORT_1_INTCTRL_0:		equ 28h	;Port 1 interrupt control 0 register (PRT1IC0)
    88                          PORT_1_INTCTRL_1:		equ 28h	;Port 1 interrupt control 1 register (PRT1IC1)
      + 0028                    PORT_1_INTCTRL_1	equ	40
      + 0865                    ; end of file GlobalParams.inc

     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186+ 0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc

     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C21020 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C21020 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  0865                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   130                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   131                              M8C_SetBank1
   132                              mov   A, [@IMO_Trim]
   133                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   134                              mov   A, [@Volt_Trim]
   135                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   136                              M8C_SetBank0
   137  0865                        endm
   138                          
   139                          
   140                          ;-----------------------------------------------------------------------------
   141                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   142                          ;
   143                          ;  DESCRIPTION:
   144                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   145                          ;     registers with values from from the specified flash System Parameter
   146                          ;     table entries. Each trim value comes from a different table.
   147                          ;     Also, see M8SSC_SetTableTrims above.
   148                          ;-----------------------------------------------------------------------------
   149                          ;
   150                          ;  ARGUMENTS:
   151                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   152                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   153                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   154                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   155                          ;
   156                          ;  RETURNS:
   157                          ;     Nothing
   158                          ;
   159                          ;  SIDE EFFECTS:
   160                          ;     The values of the A and X registers are modified
   161                          ;
   162                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   163                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   164                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   165                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   166                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   167                              mov   reg[IMO_TR], A
   168                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   169                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   170                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   171                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   172                              M8C_SetBank0
   173  0865                        endm
   174                          
   175                          
   176                          ;-----------------------------------------------------------------------------
   177                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   178                          ;
   179                          ;  DESCRIPTION:
   180                          ;     Loads Bandgap Voltage Trim register with values from from the
   181                          ;     specified flash System Parameter table entry.
   182                          ;-----------------------------------------------------------------------------
   183                          ;
   184                          ;  ARGUMENTS:
   185                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   186                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   187                          ;
   188                          ;  RETURNS:
   189                          ;     Nothing
   190                          ;
   191                          ;  SIDE EFFECTS:
   192                          ;     The values of the A and X registers are modified
   193                          ;
   194                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   195                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   196                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   197                              M8C_SetBank1
   198                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   199                              mov   reg[BDG_TR], A                   ; Update the register value
   200                              M8C_SetBank0
   201  0865                        endm
   202                          
   203                          
   204                          ;-----------------------------------------------------------------------------
   205                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   206                          ;
   207                          ;  DESCRIPTION:
   208                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   209                          ;     from the specified flash System Parameter table entry.
   210                          ;-----------------------------------------------------------------------------
   211                          ;
   212                          ;  ARGUMENTS:
   213                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   214                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   215                          ;
   216                          ;  RETURNS:
   217                          ;     Nothing
   218                          ;
   219                          ;  SIDE EFFECTS:
   220                          ;     The values of the A and X registers are modified
   221                          ;
   222                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   223                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   224                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   225                              M8C_SetBank1
   226                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   227                              mov   reg[IMO_TR], A               ; Update the register value
   228                              M8C_SetBank0
   229                              endm
      + 0865                    
      + 0865                    ; end of file m8ssc.inc

     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408  0865                       endm
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;@Id: boot.tpl#903 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    4.40
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C21x23 microcontroller family.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ; Interrupt Vector Table
    81                          ;-----------------------------------------------------------------------------
    82                          ;
    83                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    84                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    85                          ; very short ISRs could be encoded within the table itself. Normally,
    86                          ; vector jump targets are modified automatically according to the user
    87                          ; modules selected. This occurs when the 'Generate Application' opera-
    88                          ; tion is run causing PSoC Designer to create boot.asm and the other
    89                          ; configuration files. If you need to hard code a vector, update the
    90                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
    91                          ; of this file.
    92                          ;-----------------------------------------------------------------------------
    93                          
    94                              AREA TOP (ROM, ABS, CON)
    95                          
    96  0000                        org   0                        ;Reset Interrupt Vector
    97                          IF	(TOOLCHAIN & HITECH)
    98                          ;   jmp   __Start                  ;C compiler fills in this vector
    99                          ELSE
   100                              jmp   __Start                  ;First instruction executed following a Reset
   101                          ENDIF
   102                              ;@PSoC_BOOT_ISR_UserCode_START@
   103                              ;---------------------------------------------------
   104                              ; Insert your custom code below this banner
   105                              ;---------------------------------------------------
   106                          
   107  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   108  0004  30                    halt                           ;Stop execution if power falls too low
   109                          
   110  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   111                              // call	void_handler
   112  0008  7E                    reti
   113                          
   114  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   115                              // call	void_handler
   116  000C  7E                    reti
   117                          
   118  0018                        org   18h                      ;VC3 Interrupt Vector
   119                              // call	void_handler
   120  0018  7E                    reti
   121                          
   122  001C                        org   1Ch                      ;GPIO Interrupt Vector
   123  001C  7D 0898               ljmp	PSoC_GPIO_ISR
   124  001F  7E                    reti
   125                          
   126  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   127                              // call	void_handler
   128  0020  7E                    reti
   129                          
   130  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   131  0024  7D 06F4               ljmp	_Counter16_1_ISR
   132  0027  7E                    reti
   133                          
   134  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   135                              // call	void_handler
   136  0028  7E                    reti
   137                          
   138  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   139  002C  7D 0879               ljmp	Dispatch_INTERRUPT_11
   140  002F  7E                    reti
   141                          
   142  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   143                              // call	void_handler
   144  0060  7E                    reti
   145                          
   146  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   147                              // call	void_handler
   148  0064  7E                    reti
   149                              ;---------------------------------------------------
   150                              ; Insert your custom code above this banner
   151                              ;---------------------------------------------------
   152                              ;@PSoC_BOOT_ISR_UserCode_END@
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  Start of Execution.
   156                          ;-----------------------------------------------------------------------------
   157                          ;  The Supervisory ROM SWBootReset function has already completed the
   158                          ;  calibrate1 process, loading trim values for 5 volt operation.
   159                          ;
   160                          
   161                          IF	(TOOLCHAIN & HITECH)
   162                           	AREA PD_startup(CODE, REL, CON)
   163                          ELSE
   164                              org 68h
   165                          ENDIF
   166  0B09                    __Start:
   167                          
   168                              ; initialize SMP values for voltage stabilization, if required,
   169                              ; leaving power-on reset (POR) level at the default (low) level, at
   170                              ; least for now. 
   171                              ;
   172  0B09  71 10                 M8C_SetBank1
   173  0B0B  62 E3 00              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   174  0B0E  70 EF                 M8C_SetBank0
   175                          
   176  0B10  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   177                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   178                              M8C_EnableWatchDog
   179                          ENDIF
   180                          
   181  0B13  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   182                          
   183                          IF	(TOOLCHAIN & HITECH)
   184                              ;---------------------------
   185                              ; Set up the Temporary stack
   186                              ;---------------------------
   187                              ; A temporary stack is set up for the SSC instructions.
   188                              ; The real stack start will be assigned later.
   189                              ;
   190                          	global		__Lstackps
   191  0B16  50 C7             	mov     a,low __Lstackps
   192  0B18  4E                	swap    a,sp
   193                          ELSE
   194                              ;------------------
   195                              ; Set up the stack
   196                              ;------------------
   197                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   198                              swap  SP, A                    ; This is only temporary if going to LMM
   199                          ENDIF
   200                          
   201                              ;-----------------------------------------------
   202                              ; Set Power-related Trim.
   203                              ;-----------------------------------------------
   204  0B19  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   205                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   206                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   207                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   208                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   209                           ENDIF
   210                          ENDIF ; 5.0 V Operation
   211                          
   212                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   213                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   214                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   215                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   216                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   217                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   218                           ENDIF
   219                          ENDIF ; 3.3 Volt Operation
   220                          
   221                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   222  0B1C  43 FE 10              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   223                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
      + 0B1F  55 FA 02          	mov	[250], 2
      + 0B22  4F                ;   !!! DO NOT CHANGE THIS CODE !!!
;       This sequence of opcodes provides a
;       signature fo
      +                         r the debugger and ICE.
	mov	x, sp
      + 0B23  5B                	mov	a, x
      + 0B24  01 03             	add	a, 3
      + 0B26  53 F9             	mov	[249], a
      + 0B28  55 F8 3A          	mov	[248], 58
      + 0B2B  50 06             	mov	a, 6
      + 0B2D  00                	ssc
      + 0B2E  71 10             ;   !!! DO NOT CHANGE THIS CODE !!!
	or	f, 0x10
      + 0B30  51 F9             	mov	a, [249]
      + 0B32  60 E8             	mov	reg[232], a
      + 0B34  51 F8             	mov	a, [248]
      + 0B36  60 EA             	mov	reg[234], a
      + 0B38  70 EF             	and	f, 0xEF
   224                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   225                          
   226                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   227                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   228                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   229                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   230                          
   231  0B3A  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   232  0B3D  55 F9 00              mov  [bSSC_KEYSP], 0
   233                          
   234                              ;---------------------------------------
   235                              ; Initialize Crystal Oscillator and PLL
   236                              ;---------------------------------------
   237                          IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
   238  0B40  71 10                 M8C_SetBank1
   239  0B42  62 E0 00              mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
   240  0B45  70 EF                 M8C_SetBank0
   241  0B47  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   242                          
   243                          ELSE 	 ;*** all other voltages OK for 12Mhz ***
   244                              M8C_SetBank1
   245                              mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   246                              M8C_SetBank0
   247                              M8C_ClearWDTAndSleep           ; Reset the watch dog
   248                          
   249                          ENDIF
   250                          
   251                              ;-------------------------------------------------------
   252                              ; Initialize Proper Drive Mode for External Clock Pin
   253                              ;-------------------------------------------------------
   254                          
   255                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   256                          
   257                          IF (SYSCLK_SOURCE)
   258                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   259                          ENDIF
   260                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   261                          
   262                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   263                              ;---------------------------------------------------
   264                              ; Insert your custom code below this banner
   265                              ;---------------------------------------------------
   266                          
   267                              ;---------------------------------------------------
   268                              ; Insert your custom code above this banner
   269                              ;---------------------------------------------------
   270                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   271                          
   272                              ;-------------------------
   273                              ; Load Base Configuration
   274                              ;-------------------------
   275                              ; Load global parameter settings and load the user modules in the
   276                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   277                              ; to minimize start up time; (2) We may still need to play with the
   278                              ; Sleep Timer.
   279                              ;
   280  0B4A  7C 0582               lcall LoadConfigInit
   281                          
   282                              ;-----------------------------------
   283                              ; Initialize C Run-Time Environment
   284                              ;-----------------------------------
   285                          IF ( C_LANGUAGE_SUPPORT )
   286                              mov  A,0                           ; clear the 'bss' segment to zero
   287                              mov  [__r0],<__bss_start
   288                          BssLoop:
   289                              cmp  [__r0],<__bss_end
   290                              jz   BssDone
   291                              mvi  [__r0],A
   292                              jmp  BssLoop
   293                          BssDone:
   294                              mov  A,>__idata_start              ; copy idata to data segment
   295                              mov  X,<__idata_start
   296                              mov  [__r0],<__data_start
   297                          IDataLoop:
   298                              cmp  [__r0],<__data_end
   299                              jz   C_RTE_Done
   300                              push A
   301                              romx
   302                              mvi  [__r0],A
   303                              pop  A
   304                              inc  X
   305                              adc  A,0
   306                              jmp  IDataLoop
   307                          
   308                          C_RTE_Done:
   309                          
   310                          ENDIF ; C_LANGUAGE_SUPPORT
   311                          
   312                              ;-------------------------------
   313                              ; Voltage Stabilization for SMP
   314                              ;-------------------------------
   315                          
   316                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   317                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   318                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   319                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   320                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   321                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   322                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   323                              M8C_SetBank1
   324                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   325                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   326                              M8C_SetBank0
   327                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   328                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   329                          .WaitFor2ms:
   330                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   331                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   332                          ENDIF ; SMP is operational
   333                          ENDIF ; 5.0V Operation
   334                          
   335                              ;-------------------------------
   336                              ; Set Power-On Reset (POR) Level
   337                              ;-------------------------------
   338                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
   339                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
   340                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   341                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   342                              ;  Technical Reference Manual #001-14463 for more information.
   343                          
   344  0B4D  71 10                 M8C_SetBank1
   345                          
   346                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   347                                                                         ;  Yes, lowest trip already set
   348                          ELSE                                           ;   No, must adjust POR...
   349                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   350                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   351                          ELSE
   352                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   353                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   354                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   355                           ELSE                                          ;    No, fast mode
   356                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   357                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   358                            ELSE ; 24HMz                                 ;
   359                              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   360                            ENDIF ; 24MHz
   361                           ENDIF ; Slow Mode
   362                          ENDIF ; 5.0V Operation
   363                          ENDIF ; 3.3V Operation
   364                          ENDIF ; 2.7V Operation
   365                          
   366  0B4F  70 EF                 M8C_SetBank0
   367                          
   368                              ;----------------------------
   369                              ; Wrap up and invoke "main"
   370                              ;----------------------------
   371                          
   372                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   373                              ; no interrupts should be enabled now, so may as well clear the register.
   374                              ;
   375  0B51  62 E0 00              mov  reg[INT_MSK0],0
   376                          
   377                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   378                              ;
   379  0B54  71 10                 M8C_SetBank1
   380  0B56  62 E0 03              mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   381  0B59  70 EF                 M8C_SetBank0
   382                          
   383                              ; Global Interrupt are NOT enabled, this should be done in main().
   384                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   385                              ; Global Interrupts should be enabled as soon as possible in main().
   386                              ;
   387  0B5B  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   388                                                             ; have been set during the boot process.
   389                          IF	(TOOLCHAIN & HITECH)
   390  0B5E  7D 0B64           	ljmp  startup                  ; Jump to C compiler startup code
   391                          ELSE
   392                          IF ENABLE_LJMP_TO_MAIN
   393                              ljmp  _main                    ; goto main (no return)
   394                          ELSE
   395                              lcall _main                    ; call main
   396                          .Exit:
   397                              jmp  .Exit                     ; Wait here after return till power-off or reset
   398                          ENDIF
   399                          ENDIF ; TOOLCHAIN
   400                          
   401                              ;---------------------------------
   402                              ; Library Access to Global Parms
   403                              ;---------------------------------
   404                              ;
   405  0B61                     bGetPowerSetting:
   406  0B61                    _bGetPowerSetting:
   407                              ; Returns value of POWER_SETTING in the A register.
   408                              ; No inputs. No Side Effects.
   409                              ;
   410                          IF (POWER_SETTING & POWER_SET_2V7)
   411  0B61  50 05                 mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   412                          ELSE
   413                              mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   414                          ENDIF
   415  0B63  7F                    ret


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012

       SSCTBL2_TRIM_BGR_2V 00F8                  __Lstackps 00C7          C_LANGUAGE_SUPPORT 0000               PSoC_GPIO_ISR 0898  
             POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0005               POWER_SET_5V0 0010  
          SLEEP_TIMER_JUST 0000                    CPU_SCR1 00FE            bGetPowerSetting 0B61                    INT_MSK0 00E0  
                  OPER_KEY 003A          POWER_SET_2V7_6MHZ 0002                      BDG_TR 00EA                      HITECH 0002  
     Dispatch_INTERRUPT_11 0879                      IMO_TR 00E8                      INT_VC 00E2              CPU_CLOCK_JUST 0003  
         _bGetPowerSetting 0B61               LVD_TBEN_JUST 0000                      VLT_CR 00E3       SWITCH_MODE_PUMP_JUST 0000  
          _Counter16_1_ISR 06F4            OSC_CR0_CPU_3MHz 0000         POWER_SET_2V7_12MHZ 0004          POWER_SET_SLOW_IMO 0001  
                 TOOLCHAIN 0002               SYSCLK_SOURCE 0000                     OSC_CR0 00E0                     RES_WDT 00E3  
            CPU_SCR1_SLIMO 0010             WATCHDOG_ENABLE 0000                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004  
            LoadConfigInit 0582                     __Start 0B09                   bSSC_KEY1 00F8                  TABLE_READ 0006  
                   startup 0B64               FLAG_XIO_MASK 0010   SSCTBL2_TRIM_IMO_2V_12MHZ 00F9           TRIP_VOLTAGE_JUST 0000  
        bSSC_TABLE_TableId 00FA  
