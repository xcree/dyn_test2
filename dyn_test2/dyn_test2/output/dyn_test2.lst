

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:16 2012


     1                          	opt	pw 132
     2                          	psect	text,global,class=CODE,delta=1
     3                          	psect	maintext,global,class=CODE,delta=1
     4                          	psect	intrtext,global,class=CODE,delta=1
     5                          	psect	cdata,global,reloc=256,class=ROM,delta=1
     6                          	psect	bss0,global,class=RAM,space=1,delta=1
     7                          	psect	nvram0,global,class=RAM,space=1,delta=1
     8                          	psect	strings,global,reloc=256,class=ROM,delta=1
     9                          
    10                          	psect	text
    11  006C                    TMP_DR0	equ	108
    12  006D                    TMP_DR1	equ	109
    13  006E                    TMP_DR2	equ	110
    14  006F                    TMP_DR3	equ	111
    15  00D0                    CUR_PP	equ	208
    16  00D1                    STK_PP	equ	209
    17  00D3                    IDX_PP	equ	211
    18  00D4                    MVR_PP	equ	212
    19  00D5                    MVW_PP	equ	213
    20  00E8                    MUL0_X	equ	232
    21  00E9                    MUL0_Y	equ	233
    22  00EA                    MUL0_DH	equ	234
    23  00EB                    MUL0_DL	equ	235
    24  00A8                    MUL1_X	equ	168
    25  00A9                    MUL1_Y	equ	169
    26  00AA                    MUL1_DH	equ	170
    27  00AB                    MUL1_DL	equ	171
    28                          ; =============== function _main ends ============
    29  07F9                    ___start_of_c_program_code:
    30                          ; *************** function _My_TX *****************
    31                          ; Defined at:
    32                          ;		line 307 in file "./main.c"
    33                          ; Parameters:
    34                          ;		None
    35                          ; Auto variables:
    36                          ;		None
    37                          ; Return value:
    38                          ;		type: int 
    39                          ;		size: 2
    40                          ; Registers used:
    41                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
    42                          ; Tracked objects:
    43                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
    44                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
    45                          ;		Unchanged: 
    46                          ; Data sizes:
    47                          ;		Autos:    0
    48                          ;		Params:   0
    49                          ;		Temp:     0
    50                          ;		Total:    0
    51                          ; This function calls:
    52                          ;		_IsADC_ConfigLoaded
    53                          ;		_LoadConfig_ADC_Config
    54                          ;		_TX8_2_Start
    55                          ;		_TX8_2_PutChar
    56                          ;		_TX8_2_PutCRLF
    57                          ;		_TX8_2_bReadTxStatus
    58                          ;		_TX8_2_Stop
    59                          ;		_UnloadConfig_ADC_Config
    60                          ;		_LoadConfig_dyn_test2
    61                          ;		_PWM8_1_Start
    62                          ; This function is called by:
    63                          ;		_main
    64                          ; This function uses a non-reentrant model
    65                          ; 
    66  0060                    __size_of_My_TX	equ	__end_of_My_TX-_My_TX
    67                          ;main.c: 306: My_TX(void)
    68                          ;main.c: 307: {
    69                          ;			PG=0 
    70  07F9                    _My_TX:
    71                          ;main.c: 310: if(IsADC_ConfigLoaded()==0)
    72  07F9  7C 086F           	call	_IsADC_ConfigLoaded
    73  07FC  78                	dec	a
    74  07FD  D058              	jnc	l63
    75                          ;main.c: 311: {
    76                          ;main.c: 312: LoadConfig_ADC_Config();
    77  07FF  7C 05EA           	call	_LoadConfig_ADC_Config
    78                          ;main.c: 314: TX8_2_Start(0x00);
    79  0802  50 00             	mov	a, 0
    80  0804  70 CF             	and	f, 0xCF	;select user reg space
    81  0806  7C 0752           	call	_TX8_2_Start
    82                          ;main.c: 357: for ( r = 0; r < 52; ++r )
    83  0809  55 B7  00         	mov	[_r], 0
    84  080C  55 B8  00         	mov	[_r+1], 0
    85                          ;			XIO=0 
    86  080F                    l64:
    87                          ;main.c: 358: {
    88                          ;main.c: 359: if ( mat[r] == 1 )
    89  080F  58 B8             	mov	x, [_r+1]
    90  0811  3D 6E  01         	cmp	[x+_mat], 1
    91  0814  B009              	jnz	l67
    92                          ;main.c: 360: {
    93                          ;main.c: 361: TX8_2_PutChar('1');
    94  0816  50 31             	mov	a, 49
    95  0818  7C 078B           	call	_TX8_2_PutChar
    96                          ;main.c: 362: }
    97  081B  7D 0823           	jmp	l68
    98                          ;			XIO=0 
    99  081E                    l67:
   100                          ;main.c: 363: else TX8_2_PutChar('0');
   101  081E  50 30             	mov	a, 48
   102  0820  7C 078B           	call	_TX8_2_PutChar
   103                          ;			XIO=0 
   104  0823                    l68:
   105  0823  76 B8             	inc	[_r+1]
   106  0825  0E B7  00         	adc	[_r], 0
   107  0828  51 B8             	mov	a, [_r+1]
   108  082A  39 34             	cmp	a, 52
   109  082C  51 B7             	mov	a, [_r]
   110  082E  31 80             	xor	a, 0x80
   111  0830  19 80             	sbb	a, 128
   112  0832  CFDC              	jc	l64
   113                          ;			XIO=0 
   114                          ;main.c: 364: }
   115                          ;main.c: 368: TX8_2_PutCRLF();
   116  0834  7C 07EF           	call	_TX8_2_PutCRLF
   117                          ;main.c: 370: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   118                          ;			XIO=0 
   119  0837                    l69:
   120  0837  7C 075E           	call	_TX8_2_bReadTxStatus
   121  083A  21 20             	and	a, 0x20
   122  083C  AFFA              	jz	l69
   123                          ;			XIO=0 
   124                          ;main.c: 371: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   125                          ;			XIO=0 
   126  083E                    l72:
   127  083E  7C 075E           	call	_TX8_2_bReadTxStatus
   128  0841  21 20             	and	a, 0x20
   129  0843  AFFA              	jz	l72
   130                          ;			XIO=0 
   131                          ;main.c: 374: TX8_2_Stop();
   132  0845  7C 0757           	call	_TX8_2_Stop
   133                          ;main.c: 376: m=0;
   134  0848  55 BB  00         	mov	[_m], 0
   135                          ;main.c: 378: UnloadConfig_ADC_Config();
   136  084B  7C 0610           	call	_UnloadConfig_ADC_Config
   137                          ;main.c: 379: LoadConfig_dyn_test2();
   138  084E  7C 058C           	call	_LoadConfig_dyn_test2
   139                          ;main.c: 380: PWM8_1_Start();
   140  0851  70 CF             	and	f, 0xCF	;select user reg space
   141  0853  7C 06FD           	call	_PWM8_1_Start
   142                          ;			
   143  0856                    l63:
   144                          ;main.c: 382: }
   145                          ;main.c: 383: }
   146                          ;			
   147  0856  70 CF             	and	f, 0xCF	;select user reg space
   148  0858  7F                	ret
   149  0859                    __end_of_My_TX:
   150                          ; =============== function _MyGpioISR_int3 ends ============
   151                          ; *************** function _led_t *****************
   152                          ; Defined at:
   153                          ;		line 385 in file "./main.c"
   154                          ; Parameters:
   155                          ;		None
   156                          ; Auto variables:
   157                          ;		None
   158                          ; Return value:
   159                          ;		type: int 
   160                          ;		size: 2
   161                          ; Registers used:
   162                          ;		a, CUR_PP
   163                          ; Tracked objects:
   164                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   165                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
   166                          ;		Unchanged: CUR_PP IDX_PP MVR_PP MVW_PP 
   167                          ; Data sizes:
   168                          ;		Autos:    0
   169                          ;		Params:   0
   170                          ;		Temp:     0
   171                          ;		Total:    0
   172                          ; This function calls:
   173                          ;		Nothing
   174                          ; This function is called by:
   175                          ;		_MyGpioISR_int3
   176                          ; This function uses a non-reentrant model
   177                          ; 
   178  000C                    __size_of_led_t	equ	__end_of_led_t-_led_t
   179                          ;main.c: 384: led_t(void)
   180                          ;main.c: 385: {
   181                          ;			XIO=0 PG=0 
   182  0859                    _led_t:
   183                          ;main.c: 386: Port1Shadow = PRT0DR ;
   184  0859  5D 00             	mov	a, reg[0]
   185  085B  53 BC             	mov	[_Port1Shadow], a
   186                          ;main.c: 388: Port1Shadow ^= 0x80;
   187  085D  36 BC  80         	xor	[_Port1Shadow], 0x80
   188                          ;main.c: 389: PRT0DR = Port1Shadow;
   189  0860  51 BC             	mov	a, [_Port1Shadow]
   190  0862  60 00             	mov	reg[0], a
   191                          ;main.c: 390: }
   192                          ;			XIO=0 PG=0 
   193  0864  7F                	ret
   194  0865                    __end_of_led_t:
   195  0865                    ___end_of_c_program_code:
   196                          
   197                          	psect	maintext
   198                          ;Data sizes: Strings 9, constant 0, data 0, bss 188, persistent 1 stack 9
   199                          ; *************** function _main *****************
   200                          ; Defined at:
   201                          ;		line 29 in file "./main.c"
   202                          ; Parameters:
   203                          ;		None
   204                          ; Auto variables:
   205                          ;		None
   206                          ; Return value:
   207                          ;		type: void 
   208                          ;		size: 0
   209                          ; Registers used:
   210                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   211                          ; Tracked objects:
   212                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   213                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
   214                          ;		Unchanged: 
   215                          ; Data sizes:
   216                          ;		Autos:    0
   217                          ;		Params:   0
   218                          ;		Temp:     2
   219                          ;		Total:    2
   220                          ; This function calls:
   221                          ;		_PWM8_1_Start
   222                          ;		_Counter16_1_DisableInt
   223                          ;		_Counter16_1_Start
   224                          ;		_Counter16_1_wReadCounter
   225                          ;		_Counter16_1_Stop
   226                          ;		_Counter16_1_WritePeriod
   227                          ;		_My_TX
   228                          ;		_IsADC_ConfigLoaded
   229                          ;		_LoadConfig_ADC_Config
   230                          ;		_TX8_2_Start
   231                          ;		_TX8_2_CPutString
   232                          ;		_TX8_2_bReadTxStatus
   233                          ;		_TX8_2_PutSHexInt
   234                          ;		_TX8_2_PutCRLF
   235                          ;		_UnloadConfig_ADC_Config
   236                          ;		_LoadConfig_dyn_test2
   237                          ; This function is called by:
   238                          ;		Startup code after reset
   239                          ; This function uses a non-reentrant model
   240                          ; 
   241  0139                    __size_of_main	equ	__end_of_main-_main
   242                          ;main.c: 28: void main(void)
   243                          ;main.c: 29: {
   244                          ;			CUR_PP=0 XIO=0 PG=0 
   245  089C                    _main:
   246  089C  71 01             	or	f, 1	;#
   247                          ;main.c: 34: asm("or  F, 01h") ;
   248                          ;main.c: 35: (INT_MSK0 |= (0x20));
   249  089E  43 E0 20          	or	reg[0xE0], 0x20
   250                          ;main.c: 45: PWM8_1_Start();
   251  08A1  7C 06FD           	call	_PWM8_1_Start
   252                          ;main.c: 47: Counter16_1_DisableInt();
   253  08A4  7C 069C           	call	_Counter16_1_DisableInt
   254                          ;main.c: 48: Counter16_1_Start();
   255  08A7  7C 06A0           	call	_Counter16_1_Start
   256                          ;main.c: 57: Port1Shadow = PRT0DR;
   257  08AA  5D 00             	mov	a, reg[0]
   258  08AC  53 BC             	mov	[_Port1Shadow], a
   259                          ;main.c: 58: Port1Shadow &= ~0x32;
   260  08AE  26 BC  CD         	and	[_Port1Shadow], 0xCD
   261                          ;main.c: 60: PRT0DR = Port1Shadow;
   262  08B1  51 BC             	mov	a, [_Port1Shadow]
   263  08B3  60 00             	mov	reg[0], a
   264                          ;main.c: 62: while(1){
   265                          ;			
   266  08B5                    l3:
   267                          ;main.c: 66: if(Counter16_1_wReadCounter() <= 0x47e)
   268  08B5  70 CF             	and	f, 0xCF	;select user reg space
   269  08B7  7C 06BA           	call	_Counter16_1_wReadCounter
   270  08BA  5A BD             	mov	[??_main^0], x
   271  08BC  53 BE             	mov	[(??_main^0+1)], a
   272  08BE  3C BD  04         	cmp	[??_main^0], 4
   273  08C1  B004              	jnz	u23
   274  08C3  3C BE  7F         	cmp	[(??_main^0+1)], 127
   275  08C6                    u23:
   276  08C6  D04E              	jnc	l5
   277                          ;main.c: 67: {
   278                          ;main.c: 68: Counter16_1_Stop();
   279  08C8  7C 06A4           	call	_Counter16_1_Stop
   280                          ;main.c: 69: Counter16_1_WritePeriod(0x5db);
   281  08CB  50 DB             	mov	a, 219
   282  08CD  57 05             	mov	x, 5
   283  08CF  7C 06A8           	call	_Counter16_1_WritePeriod
   284                          ;main.c: 70: Counter16_1_Stop();
   285  08D2  7C 06A4           	call	_Counter16_1_Stop
   286                          ;main.c: 74: m++;
   287  08D5  76 BB             	inc	[_m]
   288                          ;main.c: 75: if(m>5)
   289  08D7  3C BB  06         	cmp	[_m], 6
   290  08DA  C03A              	jc	l5
   291                          ;main.c: 76: {
   292                          ;main.c: 77: flag=0;
   293  08DC  55 AF  00         	mov	[_flag], 0
   294  08DF  55 B0  00         	mov	[_flag+1], 0
   295                          ;main.c: 78: for (y=0; y<52; y++)
   296  08E2  55 B9  00         	mov	[_y], 0
   297  08E5  55 BA  00         	mov	[_y+1], 0
   298                          ;			
   299  08E8                    l7:
   300                          ;main.c: 79: {
   301                          ;main.c: 80: mat[y]=b_mat[y];
   302  08E8  57 B9             	mov	x, <_y
   303  08EA  52 01             	mov	a, [x+1]
   304  08EC  01 00             	add	a, <(<_b_mat)
   305  08EE  5C                	mov	x, a
   306  08EF  52 00             	mov	a, [x+0]
   307  08F1  58 BA             	mov	x, [_y+1]
   308  08F3  54 6E             	mov	[x+_mat], a
   309  08F5  76 BA             	inc	[_y+1]
   310  08F7  0E B9  00         	adc	[_y], 0
   311  08FA  51 BA             	mov	a, [_y+1]
   312  08FC  39 34             	cmp	a, 52
   313  08FE  51 B9             	mov	a, [_y]
   314  0900  31 80             	xor	a, 0x80
   315  0902  19 80             	sbb	a, 128
   316  0904  CFE3              	jc	l7
   317                          ;main.c: 81: }
   318                          ;main.c: 83: IntCount=p_num;
   319                          ;			
   320                          ;main.c: 84: p_num=0;
   321  0906  55 B5  00         	mov	[_p_num], 0
   322  0909  55 B6  00         	mov	[_p_num+1], 0
   323                          ;main.c: 85: b_IntCount=0;
   324  090C  55 A9  00         	mov	[_b_IntCount], 0
   325  090F  55 AA  00         	mov	[_b_IntCount+1], 0
   326                          ;main.c: 87: My_TX();
   327  0912  7C 07F9           	call	_My_TX
   328                          ;			XIO=0 
   329                          ;			XIO=0 
   330  0915                    l5:
   331                          ;main.c: 88: }
   332                          ;main.c: 90: }
   333                          ;main.c: 97: if (in5_Data_ADDR & 0x20)
   334  0915  49 00 20          	tst	reg[0], 32
   335  0918  A0A5              	jz	l10
   336                          ;main.c: 98: {
   337                          ;main.c: 106: Port1Shadow |= 0x80;
   338  091A  2E BC  80         	or	[_Port1Shadow], 0x80
   339                          ;main.c: 107: Port1Shadow &= ~0x32;
   340  091D  26 BC  CD         	and	[_Port1Shadow], 0xCD
   341                          ;main.c: 109: PRT0DR = Port1Shadow;
   342  0920  51 BC             	mov	a, [_Port1Shadow]
   343  0922  60 00             	mov	reg[0], a
   344                          ;main.c: 112: if(IsADC_ConfigLoaded()==0)
   345  0924  7C 086F           	call	_IsADC_ConfigLoaded
   346  0927  78                	dec	a
   347  0928  DF8C              	jnc	l3
   348                          ;main.c: 113: {
   349                          ;main.c: 114: LoadConfig_ADC_Config();
   350  092A  7C 05EA           	call	_LoadConfig_ADC_Config
   351                          ;main.c: 116: TX8_2_Start(0x00);
   352  092D  50 00             	mov	a, 0
   353  092F  70 CF             	and	f, 0xCF	;select user reg space
   354  0931  7C 0752           	call	_TX8_2_Start
   355                          ;main.c: 118: TX8_2_CPutString("a=");
   356  0934  57 00             	mov	x, <STR_1
   357  0936  50 0B             	mov	a, >STR_1
   358  0938  7C 07DD           	call	_TX8_2_CPutString
   359                          ;main.c: 119: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   360                          ;			XIO=0 
   361  093B                    l12:
   362  093B  7C 075E           	call	_TX8_2_bReadTxStatus
   363  093E  21 20             	and	a, 0x20
   364  0940  AFFA              	jz	l12
   365                          ;			XIO=0 
   366                          ;main.c: 120: TX8_2_PutSHexInt(a);
   367  0942  51 A6             	mov	a, [_a+1]
   368  0944  58 A5             	mov	x, [_a]
   369  0946  7C 0784           	call	_TX8_2_PutSHexInt
   370                          ;main.c: 121: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   371                          ;			XIO=0 
   372  0949                    l15:
   373  0949  7C 075E           	call	_TX8_2_bReadTxStatus
   374  094C  21 20             	and	a, 0x20
   375  094E  AFFA              	jz	l15
   376                          ;			XIO=0 
   377                          ;main.c: 122: TX8_2_PutCRLF();
   378  0950  7C 07EF           	call	_TX8_2_PutCRLF
   379                          ;main.c: 124: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   380                          ;			XIO=0 
   381  0953                    l18:
   382  0953  7C 075E           	call	_TX8_2_bReadTxStatus
   383  0956  21 20             	and	a, 0x20
   384  0958  AFFA              	jz	l18
   385                          ;			XIO=0 
   386                          ;main.c: 125: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   387                          ;			XIO=0 
   388  095A                    l21:
   389  095A  7C 075E           	call	_TX8_2_bReadTxStatus
   390  095D  21 20             	and	a, 0x20
   391  095F  AFFA              	jz	l21
   392                          ;			XIO=0 
   393                          ;main.c: 126: TX8_2_CPutString("b=");
   394  0961  57 03             	mov	x, <STR_2
   395  0963  50 0B             	mov	a, >STR_2
   396  0965  7C 07DD           	call	_TX8_2_CPutString
   397                          ;main.c: 127: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   398                          ;			XIO=0 
   399  0968                    l24:
   400  0968  7C 075E           	call	_TX8_2_bReadTxStatus
   401  096B  21 20             	and	a, 0x20
   402  096D  AFFA              	jz	l24
   403                          ;			XIO=0 
   404                          ;main.c: 128: TX8_2_PutSHexInt(b);
   405  096F  51 A8             	mov	a, [_b+1]
   406  0971  58 A7             	mov	x, [_b]
   407  0973  7C 0784           	call	_TX8_2_PutSHexInt
   408                          ;main.c: 129: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   409                          ;			XIO=0 
   410  0976                    l27:
   411  0976  7C 075E           	call	_TX8_2_bReadTxStatus
   412  0979  21 20             	and	a, 0x20
   413  097B  AFFA              	jz	l27
   414                          ;			XIO=0 
   415                          ;main.c: 130: TX8_2_PutCRLF();
   416  097D  7C 07EF           	call	_TX8_2_PutCRLF
   417                          ;main.c: 132: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   418                          ;			XIO=0 
   419  0980                    l30:
   420  0980  7C 075E           	call	_TX8_2_bReadTxStatus
   421  0983  21 20             	and	a, 0x20
   422  0985  AFFA              	jz	l30
   423                          ;			XIO=0 
   424                          ;main.c: 133: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   425                          ;			XIO=0 
   426  0987                    l33:
   427  0987  7C 075E           	call	_TX8_2_bReadTxStatus
   428  098A  21 20             	and	a, 0x20
   429  098C  AFFA              	jz	l33
   430                          ;			XIO=0 
   431                          ;main.c: 134: TX8_2_CPutString("c=");
   432  098E  57 06             	mov	x, <STR_3
   433  0990  50 0B             	mov	a, >STR_3
   434  0992  7C 07DD           	call	_TX8_2_CPutString
   435                          ;main.c: 135: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   436                          ;			XIO=0 
   437  0995                    l36:
   438  0995  7C 075E           	call	_TX8_2_bReadTxStatus
   439  0998  21 20             	and	a, 0x20
   440  099A  AFFA              	jz	l36
   441                          ;			XIO=0 
   442                          ;main.c: 136: TX8_2_PutSHexInt(c);
   443  099C  51 AC             	mov	a, [_c+1]
   444  099E  58 AB             	mov	x, [_c]
   445  09A0  7C 0784           	call	_TX8_2_PutSHexInt
   446                          ;main.c: 137: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   447                          ;			XIO=0 
   448  09A3                    l39:
   449  09A3  7C 075E           	call	_TX8_2_bReadTxStatus
   450  09A6  21 20             	and	a, 0x20
   451  09A8  AFFA              	jz	l39
   452                          ;			XIO=0 
   453                          ;main.c: 138: TX8_2_PutCRLF();
   454  09AA  7C 07EF           	call	_TX8_2_PutCRLF
   455                          ;main.c: 140: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   456                          ;			XIO=0 
   457  09AD                    l42:
   458  09AD  7C 075E           	call	_TX8_2_bReadTxStatus
   459  09B0  21 20             	and	a, 0x20
   460  09B2  AFFA              	jz	l42
   461                          ;			XIO=0 
   462                          ;main.c: 141: while( !( TX8_2_bReadTxStatus() & 0x20 ) );
   463                          ;			XIO=0 
   464  09B4                    l45:
   465  09B4  7C 075E           	call	_TX8_2_bReadTxStatus
   466  09B7  21 20             	and	a, 0x20
   467  09B9  AFFA              	jz	l45
   468                          ;			XIO=0 
   469                          ;			
   470                          ;main.c: 144: }
   471                          ;main.c: 147: }
   472  09BB  7D 08B5           	jmp	l3
   473                          ;			XIO=0 
   474  09BE                    l10:
   475                          ;main.c: 149: else{
   476                          ;main.c: 153: if(IsADC_ConfigLoaded()== 1)
   477  09BE  7C 086F           	call	_IsADC_ConfigLoaded
   478  09C1  78                	dec	a
   479  09C2  BEF2              	jnz	l3
   480                          ;main.c: 154: {
   481                          ;main.c: 167: UnloadConfig_ADC_Config();
   482  09C4  7C 0610           	call	_UnloadConfig_ADC_Config
   483                          ;main.c: 168: LoadConfig_dyn_test2();
   484  09C7  7C 058C           	call	_LoadConfig_dyn_test2
   485                          ;main.c: 169: PWM8_1_Start();
   486  09CA  70 CF             	and	f, 0xCF	;select user reg space
   487  09CC  7C 06FD           	call	_PWM8_1_Start
   488                          ;			XIO=0 
   489                          ;			XIO=0 
   490                          ;			
   491  09CF  7D 08B5           	jmp	l3
   492  09D2                    ___exit:	;where's that confounded watchdog?
   493  09D2  7D 09D2           	jmp	___exit
   494  09D5                    __end_of_main:
   495                          
   496                          	psect	intrtext
   497                          ; =============== function _My_TX ends ============
   498                          ; *************** function _MyGpioISR_int3 *****************
   499                          ; Defined at:
   500                          ;		line 199 in file "./main.c"
   501                          ; Parameters:
   502                          ;		None
   503                          ; Auto variables:
   504                          ;		None
   505                          ; Return value:
   506                          ;		type: void 
   507                          ;		size: 0
   508                          ; Registers used:
   509                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   510                          ; Tracked objects:
   511                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
   512                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   513                          ;		Unchanged: 
   514                          ; Data sizes:
   515                          ;		Autos:    0
   516                          ;		Params:   0
   517                          ;		Temp:     7
   518                          ;		Total:    7
   519                          ; This function calls:
   520                          ;		_Counter16_1_WritePeriod
   521                          ;		_Counter16_1_Start
   522                          ;		_Counter16_1_Stop
   523                          ;		_Counter16_1_wReadCounter
   524                          ;		_led_t
   525                          ; This function is called by:
   526                          ;		Interrupt level 1
   527                          ; This function uses a non-reentrant model
   528                          ; 
   529  012B                    __size_of_MyGpioISR_int3	equ	__end_of_MyGpioISR_int3-_MyGpioISR_int3
   530                          ;main.c: 198: void MyGpioISR_int3(void)
   531                          ;main.c: 199: {
   532  09D5                    _MyGpioISR_int3:
   533  09D5                    MyGpioISR_int3:	; in case PD tries to call an assembler ISR by this name
   534  09D5  08                	push	a
   535  09D6  10                	push	x
   536  09D7  5D 6C             	mov	a, reg[108]
   537  09D9  08                	push	a
   538  09DA  5D 6D             	mov	a, reg[109]
   539  09DC  08                	push	a
   540  09DD  5D 6E             	mov	a, reg[110]
   541  09DF  08                	push	a
   542  09E0  5D 6F             	mov	a, reg[111]
   543  09E2  08                	push	a
   544  09E3  5D D3             	mov	a, reg[211]
   545  09E5  08                	push	a
   546                          ;main.c: 201: h=0;
   547  09E6  55 B1  00         	mov	[_h], 0
   548  09E9  55 B2  00         	mov	[_h+1], 0
   549                          ;main.c: 203: if(flag ==0 )
   550  09EC  51 AF             	mov	a, [_flag]
   551  09EE  2A B0             	or	a, [_flag+1]
   552  09F0  B011              	jnz	l51
   553                          ;main.c: 204: {
   554                          ;main.c: 205: Counter16_1_WritePeriod(0x5db);
   555  09F2  50 DB             	mov	a, 219
   556  09F4  57 05             	mov	x, 5
   557  09F6  7C 06A8           	call	_Counter16_1_WritePeriod
   558                          ;main.c: 206: Counter16_1_Start();
   559  09F9  7C 06A0           	call	_Counter16_1_Start
   560                          ;main.c: 207: flag = 0x01;
   561  09FC  55 AF  00         	mov	[_flag], 0
   562  09FF  55 B0  01         	mov	[_flag+1], 1
   563                          ;			XIO=0 
   564  0A02                    l51:
   565                          ;main.c: 208: }
   566                          ;main.c: 211: if (int3_Data_ADDR & 0x8)
   567  0A02  49 04 08          	tst	reg[4], 8
   568  0A05  A00E              	jz	l52
   569                          ;main.c: 212: {
   570                          ;main.c: 214: Counter16_1_Stop();
   571  0A07  7C 06A4           	call	_Counter16_1_Stop
   572                          ;main.c: 216: Counter16_1_WritePeriod(0x5db);
   573  0A0A  50 DB             	mov	a, 219
   574  0A0C  57 05             	mov	x, 5
   575  0A0E  7C 06A8           	call	_Counter16_1_WritePeriod
   576                          ;main.c: 217: Counter16_1_Start();
   577  0A11  7C 06A0           	call	_Counter16_1_Start
   578                          ;			XIO=0 
   579  0A14                    l52:
   580                          ;main.c: 219: }
   581                          ;main.c: 221: if (~int3_Data_ADDR & 0x8)
   582  0A14  5D 04             	mov	a, reg[4]
   583  0A16  73                	cpl	a
   584  0A17  21 08             	and	a, 8
   585  0A19  A05E              	jz	l53
   586                          ;main.c: 222: {
   587                          ;main.c: 224: p_num++;
   588  0A1B  76 B6             	inc	[_p_num+1]
   589  0A1D  0E B5  00         	adc	[_p_num], 0
   590                          ;main.c: 225: b_IntCount++;
   591  0A20  76 AA             	inc	[_b_IntCount+1]
   592  0A22  0E A9  00         	adc	[_b_IntCount], 0
   593                          ;main.c: 226: k++;
   594  0A25  76 B4             	inc	[_k+1]
   595  0A27  0E B3  00         	adc	[_k], 0
   596                          ;main.c: 227: a=Counter16_1_wReadCounter();
   597  0A2A  7C 06BA           	call	_Counter16_1_wReadCounter
   598  0A2D  5A A5             	mov	[_a], x
   599  0A2F  53 A6             	mov	[_a+1], a
   600                          ;main.c: 230: if(a>=0x56c)
   601  0A31  51 A6             	mov	a, [_a+1]
   602  0A33  39 6C             	cmp	a, 108
   603  0A35  51 A5             	mov	a, [_a]
   604  0A37  31 80             	xor	a, 0x80
   605  0A39  19 85             	sbb	a, 133
   606  0A3B  C00F              	jc	l54
   607                          ;main.c: 231: {
   608                          ;main.c: 232: led_t();
   609  0A3D  7C 0859           	call	_led_t
   610                          ;main.c: 233: b=a;
   611  0A40  5F A7  A5         	mov	[_b], [_a]
   612  0A43  5F A8  A6         	mov	[_b+1], [_a+1]
   613                          ;main.c: 234: b_mat[p_num]=1;
   614  0A46  58 B6             	mov	x, [_p_num+1]
   615  0A48  56 00  01         	mov	[x+_b_mat], 1
   616                          ;			XIO=0 
   617  0A4B                    l54:
   618                          ;main.c: 235: }
   619                          ;main.c: 236: if(a<0x56c)
   620  0A4B  51 A6             	mov	a, [_a+1]
   621  0A4D  39 6C             	cmp	a, 108
   622  0A4F  51 A5             	mov	a, [_a]
   623  0A51  31 80             	xor	a, 0x80
   624  0A53  19 85             	sbb	a, 133
   625  0A55  D00F              	jnc	l55
   626                          ;main.c: 237: {
   627                          ;main.c: 239: b_mat[p_num]=0;
   628  0A57  58 B6             	mov	x, [_p_num+1]
   629  0A59  56 00  00         	mov	[x+_b_mat], 0
   630                          ;main.c: 240: c=a;
   631  0A5C  5F AB  A5         	mov	[_c], [_a]
   632  0A5F  5F AC  A6         	mov	[_c+1], [_a+1]
   633                          ;main.c: 241: }
   634  0A62  7D 0A6B           	jmp	l56
   635                          ;			XIO=0 
   636  0A65                    l55:
   637                          ;main.c: 242: else
   638                          ;main.c: 243: {
   639                          ;main.c: 244: d=a;
   640  0A65  5F AD  A5         	mov	[_d], [_a]
   641  0A68  5F AE  A6         	mov	[_d+1], [_a+1]
   642                          ;			XIO=0 
   643  0A6B                    l56:
   644                          ;main.c: 245: }
   645                          ;main.c: 247: Counter16_1_Stop();
   646  0A6B  7C 06A4           	call	_Counter16_1_Stop
   647                          ;main.c: 248: Counter16_1_WritePeriod(0x5db);
   648  0A6E  50 DB             	mov	a, 219
   649  0A70  57 05             	mov	x, 5
   650  0A72  7C 06A8           	call	_Counter16_1_WritePeriod
   651                          ;main.c: 249: Counter16_1_Start();
   652  0A75  7C 06A0           	call	_Counter16_1_Start
   653                          ;			XIO=0 
   654  0A78                    l53:
   655                          ;main.c: 250: }
   656                          ;main.c: 253: if (int4_Data_ADDR & 0x20)
   657  0A78  49 04 20          	tst	reg[4], 32
   658  0A7B  A00E              	jz	l57
   659                          ;main.c: 254: {
   660                          ;main.c: 256: Counter16_1_Stop();
   661  0A7D  7C 06A4           	call	_Counter16_1_Stop
   662                          ;main.c: 258: Counter16_1_WritePeriod(0x5db);
   663  0A80  50 DB             	mov	a, 219
   664  0A82  57 05             	mov	x, 5
   665  0A84  7C 06A8           	call	_Counter16_1_WritePeriod
   666                          ;main.c: 259: Counter16_1_Start();
   667  0A87  7C 06A0           	call	_Counter16_1_Start
   668                          ;			XIO=0 
   669  0A8A                    l57:
   670                          ;main.c: 261: }
   671                          ;main.c: 263: if (~int4_Data_ADDR & 0x20)
   672  0A8A  5D 04             	mov	a, reg[4]
   673  0A8C  73                	cpl	a
   674  0A8D  21 20             	and	a, 0x20
   675  0A8F  A05E              	jz	l58
   676                          ;main.c: 264: {
   677                          ;main.c: 266: p_num++;
   678  0A91  76 B6             	inc	[_p_num+1]
   679  0A93  0E B5  00         	adc	[_p_num], 0
   680                          ;main.c: 267: b_IntCount++;
   681  0A96  76 AA             	inc	[_b_IntCount+1]
   682  0A98  0E A9  00         	adc	[_b_IntCount], 0
   683                          ;main.c: 268: k++;
   684  0A9B  76 B4             	inc	[_k+1]
   685  0A9D  0E B3  00         	adc	[_k], 0
   686                          ;main.c: 269: a=Counter16_1_wReadCounter();
   687  0AA0  7C 06BA           	call	_Counter16_1_wReadCounter
   688  0AA3  5A A5             	mov	[_a], x
   689  0AA5  53 A6             	mov	[_a+1], a
   690                          ;main.c: 272: if(a>=0x56c)
   691  0AA7  51 A6             	mov	a, [_a+1]
   692  0AA9  39 6C             	cmp	a, 108
   693  0AAB  51 A5             	mov	a, [_a]
   694  0AAD  31 80             	xor	a, 0x80
   695  0AAF  19 85             	sbb	a, 133
   696  0AB1  C00F              	jc	l59
   697                          ;main.c: 273: {
   698                          ;main.c: 274: led_t();
   699  0AB3  7C 0859           	call	_led_t
   700                          ;main.c: 275: b=a;
   701  0AB6  5F A7  A5         	mov	[_b], [_a]
   702  0AB9  5F A8  A6         	mov	[_b+1], [_a+1]
   703                          ;main.c: 276: b_mat1[p_num]=1;
   704  0ABC  58 B6             	mov	x, [_p_num+1]
   705  0ABE  56 37  01         	mov	[x+_b_mat1], 1
   706                          ;			XIO=0 
   707  0AC1                    l59:
   708                          ;main.c: 277: }
   709                          ;main.c: 278: if(a<0x56c)
   710  0AC1  51 A6             	mov	a, [_a+1]
   711  0AC3  39 6C             	cmp	a, 108
   712  0AC5  51 A5             	mov	a, [_a]
   713  0AC7  31 80             	xor	a, 0x80
   714  0AC9  19 85             	sbb	a, 133
   715  0ACB  D00F              	jnc	l60
   716                          ;main.c: 279: {
   717                          ;main.c: 281: b_mat1[p_num]=0;
   718  0ACD  58 B6             	mov	x, [_p_num+1]
   719  0ACF  56 37  00         	mov	[x+_b_mat1], 0
   720                          ;main.c: 282: c=a;
   721  0AD2  5F AB  A5         	mov	[_c], [_a]
   722  0AD5  5F AC  A6         	mov	[_c+1], [_a+1]
   723                          ;main.c: 283: }
   724  0AD8  7D 0AE1           	jmp	l61
   725                          ;			XIO=0 
   726  0ADB                    l60:
   727                          ;main.c: 284: else
   728                          ;main.c: 285: {
   729                          ;main.c: 286: d=a;
   730  0ADB  5F AD  A5         	mov	[_d], [_a]
   731  0ADE  5F AE  A6         	mov	[_d+1], [_a+1]
   732                          ;			XIO=0 
   733  0AE1                    l61:
   734                          ;main.c: 287: }
   735                          ;main.c: 289: Counter16_1_Stop();
   736  0AE1  7C 06A4           	call	_Counter16_1_Stop
   737                          ;main.c: 290: Counter16_1_WritePeriod(0x5db);
   738  0AE4  50 DB             	mov	a, 219
   739  0AE6  57 05             	mov	x, 5
   740  0AE8  7C 06A8           	call	_Counter16_1_WritePeriod
   741                          ;main.c: 291: Counter16_1_Start();
   742  0AEB  7C 06A0           	call	_Counter16_1_Start
   743                          ;			XIO=0 
   744  0AEE                    l58:
   745                          ;main.c: 292: }
   746                          ;main.c: 297: }
   747                          ;			XIO=0 
   748  0AEE  18                	pop	a
   749  0AEF  60 D3             	mov	reg[211], a
   750  0AF1  18                	pop	a
   751  0AF2  60 6F             	mov	reg[111], a
   752  0AF4  18                	pop	a
   753  0AF5  60 6E             	mov	reg[110], a
   754  0AF7  18                	pop	a
   755  0AF8  60 6D             	mov	reg[109], a
   756  0AFA  18                	pop	a
   757  0AFB  60 6C             	mov	reg[108], a
   758  0AFD  20                	pop	x
   759  0AFE  18                	pop	a
   760  0AFF  7E                	reti
   761  0B00                    __end_of_MyGpioISR_int3:
   762                          
   763                          	psect	bss0
   764                          ; =============== function _led_t ends ============
   765  0000                    _b_mat:
   766  0000                    	blk	55
   767  0037                    _b_mat1:
   768  0037                    	blk	55
   769  006E                    _mat:
   770  006E                    	blk	55
   771  00A5                    _a:
   772  00A5                    	blk	2
   773  00A7                    _b:
   774  00A7                    	blk	2
   775  00A9                    _b_IntCount:
   776  00A9                    	blk	2
   777  00AB                    _c:
   778  00AB                    	blk	2
   779  00AD                    _d:
   780  00AD                    	blk	2
   781  00AF                    _flag:
   782  00AF                    	blk	2
   783  00B1                    _h:
   784  00B1                    	blk	2
   785  00B3                    _k:
   786  00B3                    	blk	2
   787  00B5                    _p_num:
   788  00B5                    	blk	2
   789  00B7                    _r:
   790  00B7                    	blk	2
   791  00B9                    _y:
   792  00B9                    	blk	2
   793  00BB                    _m:
   794  00BB                    	blk	1
   795                          
   796                          	psect	nvram0
   797  00BC                    _Port1Shadow:
   798  00BC                    	blk	1
   799                          
   800                          	psect	strings
   801                          ;			XIO=0 PG=0 
   802  0B00                    STR_1:
   803  0B00  61                	db	97	;'a'
   804  0B01  3D                	db	61	;'='
   805  0B02  00                	db	0
   806                          ;			XIO=0 PG=0 
   807  0B03                    STR_2:
   808  0B03  62                	db	98	;'b'
   809  0B04  3D                	db	61	;'='
   810  0B05  00                	db	0
   811                          ;			XIO=0 PG=0 
   812  0B06                    STR_3:
   813  0B06  63                	db	99	;'c'
   814  0B07  3D                	db	61	;'='
   815  0B08  00                	db	0


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:16 2012

                        l3 08B5                          l5 0915                          l7 08E8                          _a 00A5  
                        _b 00A7                          _c 00AB                          _d 00AD                          _h 00B1  
                        _k 00B3                          _m 00BB                          _r 00B7                          _y 00B9  
  _UnloadConfig_ADC_Config 0610                         l10 09BE                         l12 093B                         l21 095A  
                       l30 0980                         l15 0949                         l24 0968                         l33 0987  
                       l42 09AD                         l18 0953                         l51 0A02                         l27 0976  
                       l60 0ADB                         l52 0A14                         l36 0995                         l61 0AE1  
                       l53 0A78                         l45 09B4                         l54 0A4B                         l55 0A65  
                       l63 0856                         l39 09A3                         l56 0A6B                         l72 083E  
                       l64 080F                         l57 0A8A                         l58 0AEE                         l59 0AC1  
                       l67 081E                         l68 0823                         l69 0837                         u23 08C6  
            MyGpioISR_int3 09D5                        _mat 006E                _Port1Shadow 00BC                       STR_1 0B00  
                     STR_2 0B03                       STR_3 0B06                 _b_IntCount 00A9         _IsADC_ConfigLoaded 086F  
     _LoadConfig_dyn_test2 058C                       _flag 00AF                       _main 089C    ___end_of_c_program_code 0865  
               _TX8_2_Stop 0757                      IDX_PP 00D3              __end_of_My_TX 0859              _TX8_2_PutCRLF 07EF  
            __end_of_led_t 0865             _MyGpioISR_int3 09D5              _TX8_2_PutChar 078B                      _My_TX 07F9  
                    _b_mat 0000                      _led_t 0859                      _p_num 00B5                   intlevel1 00C6  
   __end_of_MyGpioISR_int3 0B00     _Counter16_1_DisableInt 069C                     ??_main 00BD                _TX8_2_Start 0752  
  _Counter16_1_WritePeriod 06A8                     TMP_DR0 006C                     TMP_DR1 006D                     TMP_DR2 006E  
                   TMP_DR3 006F               __end_of_main 09D5          _Counter16_1_Start 06A0           _TX8_2_PutSHexInt 0784  
                   ___exit 09D2                     _b_mat1 0037        _TX8_2_bReadTxStatus 075E               _PWM8_1_Start 06FD  
 _Counter16_1_wReadCounter 06BA           _Counter16_1_Stop 06A4           _TX8_2_CPutString 07DD      _LoadConfig_ADC_Config 05EA  
___start_of_c_program_code 07F9  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 0865                    
      + 0865                    ; end of file Memory.inc
      + 0865                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Counter16_1.inc
;;   Versi
      +                         on: 2.5, Updated on 2012/3/2 at 9:13:9
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION: A
      +                         ssembler declarations for the Counter16 user module interface
;;------------------------------------
      +                         -----------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights R
      +                         eserved.
;;*****************************************************************************
;;*********
      +                         ********************************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  0865                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter16_1.inc
     4                          ;;   Version: 2.5, Updated on 2012/3/2 at 9:13:9
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Counter16_1 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Counter16_1_CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
    21  00E1                    Counter16_1_INT_REG:                       equ 0x0e1
    22  0002                    Counter16_1_INT_MASK:                      equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Counter16_1 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  05DB                    Counter16_1_PERIOD:                        equ 0x5db
    30  0000                    Counter16_1_COMPARE_VALUE:                 equ 0x0
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Counter16_1
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Counter16_1_COUNTER_LSB_REG:           equ 0x20   ; DR0 Counter register
    38  0024                    Counter16_1_COUNTER_MSB_REG:           equ 0x24
    39  0021                    Counter16_1_PERIOD_LSB_REG:            equ 0x21   ; DR1 Period register
    40  0025                    Counter16_1_PERIOD_MSB_REG:            equ 0x25
    41  0022                    Counter16_1_COMPARE_LSB_REG:           equ 0x22   ; DR2 CompareValue register
    42  0026                    Counter16_1_COMPARE_MSB_REG:           equ 0x26
    43  0023                    Counter16_1_CONTROL_LSB_REG:           equ 0x23   ; Control register
    44  0027                    Counter16_1_CONTROL_MSB_REG:           equ 0x27
    45  0020                    Counter16_1_FUNC_LSB_REG:              equ 0x20   ; Function register
    46  0024                    Counter16_1_FUNC_MSB_REG:              equ 0x24
    47  0021                    Counter16_1_INPUT_LSB_REG:             equ 0x21   ; Input register
    48  0025                    Counter16_1_INPUT_MSB_REG:             equ 0x25
    49  0022                    Counter16_1_OUTPUT_LSB_REG:            equ 0x22   ; Output register
    50  0026                    Counter16_1_OUTPUT_MSB_REG:            equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Counter16_1 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Counter16_1_Start_M
    58                             or    reg[Counter16_1_CONTROL_LSB_REG],  Counter16_1_CONTROL_REG_START_BIT
    59  0865                       endm
    60                          
    61                             macro Counter16_1_Stop_M
    62                             and   reg[Counter16_1_CONTROL_LSB_REG], ~Counter16_1_CONTROL_REG_START_BIT
    63  0865                       endm
    64                          
    65                             macro Counter16_1_EnableInt_M
    66                             M8C_EnableIntMask Counter16_1_INT_REG, Counter16_1_INT_MASK
    67  0865                       endm
    68                          
    69                             macro Counter16_1_DisableInt_M
    70                             M8C_DisableIntMask Counter16_1_INT_REG, Counter16_1_INT_MASK
    71  0865                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter16_1.asm
     4                          ;;   Version: 2.5, Updated on 2012/3/2 at 9:13:9
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Counter16_1.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Counter16_1_EnableInt
    30                          export _Counter16_1_EnableInt
    31                          export  Counter16_1_DisableInt
    32                          export _Counter16_1_DisableInt
    33                          export  Counter16_1_Start
    34                          export _Counter16_1_Start
    35                          export  Counter16_1_Stop
    36                          export _Counter16_1_Stop
    37                          export  Counter16_1_WritePeriod
    38                          export _Counter16_1_WritePeriod
    39                          export  Counter16_1_WriteCompareValue
    40                          export _Counter16_1_WriteCompareValue
    41                          export  Counter16_1_wReadCompareValue
    42                          export _Counter16_1_wReadCompareValue
    43                          export  Counter16_1_wReadCounter
    44                          export _Counter16_1_wReadCounter
    45                          
    46                          ; The following functions are deprecated and subject to omission in future releases
    47                          ;
    48                          export  wCounter16_1_ReadCompareValue  ; deprecated
    49                          export _wCounter16_1_ReadCompareValue  ; deprecated
    50                          export  wCounter16_1_ReadCounter       ; deprecated
    51                          export _wCounter16_1_ReadCounter       ; deprecated
    52                          
    53                          ;-----------------------------------------------
    54                          ;  Constant Definitions
    55                          ;-----------------------------------------------
    56  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    57                          
    58                          
    59                          AREA UserModules (ROM, REL)
    60                          
    61                          .SECTION
    62                          ;-----------------------------------------------------------------------------
    63                          ;  FUNCTION NAME: Counter16_1_EnableInt
    64                          ;
    65                          ;  DESCRIPTION:
    66                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    67                          ;     associated with this User Module. This function has no effect until and
    68                          ;     unless the global interrupts are enabled (for example by using the
    69                          ;     macro M8C_EnableGInt).
    70                          ;-----------------------------------------------------------------------------
    71                          ;
    72                          ;  ARGUMENTS:    None.
    73                          ;  RETURNS:      Nothing.
    74                          ;  SIDE EFFECTS: 
    75                          ;    The A and X registers may be modified by this or future implementations
    76                          ;    of this function.  The same is true for all RAM page pointer registers in
    77                          ;    the Large Memory Model.  When necessary, it is the calling function's
    78                          ;    responsibility to perserve their values across calls to fastcall16 
    79                          ;    functions.
    80                          ;
    81  0698                     Counter16_1_EnableInt:
    82  0698                    _Counter16_1_EnableInt:
    83                             RAM_PROLOGUE RAM_USE_CLASS_1
    84  0698  43 E1 02             Counter16_1_EnableInt_M
    85                             RAM_EPILOGUE RAM_USE_CLASS_1
    86  069B  7F                   ret
    87                          
    88                          .ENDSECTION
    89                          
    90                          .SECTION
    91                          ;-----------------------------------------------------------------------------
    92                          ;  FUNCTION NAME: Counter16_1_DisableInt
    93                          ;
    94                          ;  DESCRIPTION:
    95                          ;     Disables this counter's interrupt by clearing the interrupt enable
    96                          ;     mask bit associated with this User Module.
    97                          ;-----------------------------------------------------------------------------
    98                          ;
    99                          ;  ARGUMENTS:    None
   100                          ;  RETURNS:      Nothing
   101                          ;  SIDE EFFECTS: 
   102                          ;    The A and X registers may be modified by this or future implementations
   103                          ;    of this function.  The same is true for all RAM page pointer registers in
   104                          ;    the Large Memory Model.  When necessary, it is the calling function's
   105                          ;    responsibility to perserve their values across calls to fastcall16 
   106                          ;    functions.
   107                          ;
   108  069C                     Counter16_1_DisableInt:
   109  069C                    _Counter16_1_DisableInt:
   110                             RAM_PROLOGUE RAM_USE_CLASS_1
   111  069C  41 E1 FD             Counter16_1_DisableInt_M
   112                             RAM_EPILOGUE RAM_USE_CLASS_1
   113  069F  7F                   ret
   114                          
   115                          
   116                          .ENDSECTION
   117                          
   118                          .SECTION
   119                          ;-----------------------------------------------------------------------------
   120                          ;  FUNCTION NAME: Counter16_1_Start
   121                          ;
   122                          ;  DESCRIPTION:
   123                          ;     Sets the start bit in the Control register of this user module.  The
   124                          ;     counter will begin counting on the next input clock as soon as the
   125                          ;     enable input is asserted high.
   126                          ;-----------------------------------------------------------------------------
   127                          ;
   128                          ;  ARGUMENTS:    None
   129                          ;  RETURNS:      Nothing
   130                          ;  SIDE EFFECTS: 
   131                          ;    The A and X registers may be modified by this or future implementations
   132                          ;    of this function.  The same is true for all RAM page pointer registers in
   133                          ;    the Large Memory Model.  When necessary, it is the calling function's
   134                          ;    responsibility to perserve their values across calls to fastcall16 
   135                          ;    functions.
   136                          ;
   137  06A0                     Counter16_1_Start:
   138  06A0                    _Counter16_1_Start:
   139                             RAM_PROLOGUE RAM_USE_CLASS_1
   140  06A0  43 23 01             Counter16_1_Start_M
   141                             RAM_EPILOGUE RAM_USE_CLASS_1
   142  06A3  7F                   ret
   143                          
   144                          
   145                          .ENDSECTION
   146                          
   147                          .SECTION
   148                          ;-----------------------------------------------------------------------------
   149                          ;  FUNCTION NAME: Counter16_1_Stop
   150                          ;
   151                          ;  DESCRIPTION:
   152                          ;     Disables counter operation by clearing the start bit in the Control
   153                          ;     register of the LSB block.
   154                          ;-----------------------------------------------------------------------------
   155                          ;
   156                          ;  ARGUMENTS:    None
   157                          ;  RETURNS:      Nothing
   158                          ;  SIDE EFFECTS: 
   159                          ;    The A and X registers may be modified by this or future implementations
   160                          ;    of this function.  The same is true for all RAM page pointer registers in
   161                          ;    the Large Memory Model.  When necessary, it is the calling function's
   162                          ;    responsibility to perserve their values across calls to fastcall16 
   163                          ;    functions.
   164                          ;
   165  06A4                     Counter16_1_Stop:
   166  06A4                    _Counter16_1_Stop:
   167                             RAM_PROLOGUE RAM_USE_CLASS_1
   168  06A4  41 23 FE             Counter16_1_Stop_M
   169                             RAM_EPILOGUE RAM_USE_CLASS_1
   170  06A7  7F                   ret
   171                          
   172                          
   173                          .ENDSECTION
   174                          
   175                          .SECTION
   176                          ;-----------------------------------------------------------------------------
   177                          ;  FUNCTION NAME: Counter16_1_WritePeriod
   178                          ;
   179                          ;  DESCRIPTION:
   180                          ;     Write the 16-bit period value into the Period register (DR1).
   181                          ;-----------------------------------------------------------------------------
   182                          ;
   183                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   184                          ;  RETURNS:   Nothing
   185                          ;  SIDE EFFECTS:
   186                          ;    If the counter user module is stopped, then this value will also be
   187                          ;    latched into the Count registers (DR0).
   188                          ;     
   189                          ;    The A and X registers may be modified by this or future implementations
   190                          ;    of this function.  The same is true for all RAM page pointer registers in
   191                          ;    the Large Memory Model.  When necessary, it is the calling function's
   192                          ;    responsibility to perserve their values across calls to fastcall16 
   193                          ;    functions.
   194                          ;
   195  06A8                     Counter16_1_WritePeriod:
   196  06A8                    _Counter16_1_WritePeriod:
   197                             RAM_PROLOGUE RAM_USE_CLASS_1
   198  06A8  60 21                mov   reg[Counter16_1_PERIOD_LSB_REG], A
   199  06AA  5B                   mov   A, X
   200  06AB  60 25                mov   reg[Counter16_1_PERIOD_MSB_REG], A
   201                             RAM_EPILOGUE RAM_USE_CLASS_1
   202  06AD  7F                   ret
   203                          
   204                          
   205                          .ENDSECTION
   206                          
   207                          .SECTION
   208                          ;-----------------------------------------------------------------------------
   209                          ;  FUNCTION NAME: Counter16_1_WriteCompareValue
   210                          ;
   211                          ;  DESCRIPTION:
   212                          ;     Writes compare value into the Compare register (DR2).
   213                          ;-----------------------------------------------------------------------------
   214                          ;
   215                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   216                          ;  RETURNS:      Nothing
   217                          ;  SIDE EFFECTS: 
   218                          ;    The A and X registers may be modified by this or future implementations
   219                          ;    of this function.  The same is true for all RAM page pointer registers in
   220                          ;    the Large Memory Model.  When necessary, it is the calling function's
   221                          ;    responsibility to perserve their values across calls to fastcall16 
   222                          ;    functions.
   223                          ;
   224  06AE                     Counter16_1_WriteCompareValue:
   225  06AE                    _Counter16_1_WriteCompareValue:
   226                             RAM_PROLOGUE RAM_USE_CLASS_1
   227  06AE  60 22                mov   reg[Counter16_1_COMPARE_LSB_REG], A
   228  06B0  5B                   mov   A, X
   229  06B1  60 26                mov   reg[Counter16_1_COMPARE_MSB_REG], A
   230                             RAM_EPILOGUE RAM_USE_CLASS_1
   231  06B3  7F                   ret
   232                          
   233                          
   234                          .ENDSECTION
   235                          
   236                          .SECTION
   237                          ;-----------------------------------------------------------------------------
   238                          ;  FUNCTION NAME: Counter16_1_wReadCompareValue
   239                          ;
   240                          ;  DESCRIPTION:
   241                          ;     Reads the Compare registers.
   242                          ;-----------------------------------------------------------------------------
   243                          ;
   244                          ;  ARGUMENTS:    None
   245                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   246                          ;  SIDE EFFECTS: 
   247                          ;    The A and X registers may be modified by this or future implementations
   248                          ;    of this function.  The same is true for all RAM page pointer registers in
   249                          ;    the Large Memory Model.  When necessary, it is the calling function's
   250                          ;    responsibility to perserve their values across calls to fastcall16 
   251                          ;    functions.
   252                          ;
   253  06B4                     Counter16_1_wReadCompareValue:
   254  06B4                    _Counter16_1_wReadCompareValue:
   255  06B4                     wCounter16_1_ReadCompareValue:                  ; this name deprecated
   256  06B4                    _wCounter16_1_ReadCompareValue:                  ; this name deprecated
   257                             RAM_PROLOGUE RAM_USE_CLASS_1
   258  06B4  5D 26                mov   A, reg[Counter16_1_COMPARE_MSB_REG]
   259  06B6  5C                   mov   X, A
   260  06B7  5D 22                mov   A, reg[Counter16_1_COMPARE_LSB_REG]
   261                             RAM_EPILOGUE RAM_USE_CLASS_1
   262  06B9  7F                   ret
   263                          
   264                          
   265                          .ENDSECTION
   266                          
   267                          .SECTION
   268                          ;-----------------------------------------------------------------------------
   269                          ;  FUNCTION NAME: Counter16_1_wReadCounter
   270                          ;
   271                          ;  DESCRIPTION:
   272                          ;     Returns the value in the Count register (DR0), preserving the value in
   273                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   274                          ;     from the Count to the Compare registers by holding the clock low in
   275                          ;     the MSB PSoC block.
   276                          ;-----------------------------------------------------------------------------
   277                          ;
   278                          ;  ARGUMENTS: None
   279                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   280                          ;  SIDE EFFECTS:
   281                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   282                          ;     2) The A and X registers may be modified by this or future implementations
   283                          ;        of this function.  The same is true for all RAM page pointer registers in
   284                          ;        the Large Memory Model.  When necessary, it is the calling function's
   285                          ;        responsibility to perserve their values across calls to fastcall16 
   286                          ;        functions.
   287                          ;
   288  06BA                     Counter16_1_wReadCounter:
   289  06BA                    _Counter16_1_wReadCounter:
   290  06BA                     wCounter16_1_ReadCounter:                       ; this name deprecated
   291  06BA                    _wCounter16_1_ReadCounter:                       ; this name deprecated
   292                          
   293  0000                       bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
   294  0002                       bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
   295  0003                       bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
   296  0004                       wCounter:               EQU   4                  ; Frame offset to temp Count   store
   297  0006                       STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
   298                          
   299                             RAM_PROLOGUE RAM_USE_CLASS_2
   300  06BA  4F                   mov   X, SP                                      ; X <-  stack frame pointer
   301  06BB  5D 26                mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Save the Compare register on the stack
   302  06BD  08                   push  A                                          ;
   303  06BE  5D 22                mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ;
   304  06C0  08                   push  A                                          ;   -stack frame now 2 bytes-
   305  06C1  5D 23                mov   A, reg[Counter16_1_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
   306  06C3  08                   push  A                                          ;   -stack frame now 3 bytes-
   307  06C4  41 23 FE             Counter16_1_Stop_M                            ; Disable (stop) the Counter if running
   308  06C7  71 10                M8C_SetBank1                                     ;
   309  06C9  5D 21                mov   A, reg[Counter16_1_INPUT_LSB_REG]       ; save the LSB clock input setting
   310  06CB  08                   push  A                                          ;   on the stack (now 4 bytes) and ...
   311                                                                              ;   hold the clock low:
   312  06CC  62 21 00             mov   reg[Counter16_1_INPUT_LSB_REG], INPUT_REG_NULL
   313  06CF  70 EF                M8C_SetBank0                                     ; Extract the Count via DR2 register
   314  06D1  5D 24                mov   A, reg[Counter16_1_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
   315  06D3  5D 26                mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
   316  06D5  08                   push  A                                          ;   -stack frame is now 5 bytes
   317  06D6  5D 20                mov   A, reg[Counter16_1_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
   318  06D8  5D 22                mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
   319  06DA  08                   push  A                                          ;   -stack frame is now 6 bytes-
   320  06DB  52 00                mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
   321  06DD  60 26                mov   reg[Counter16_1_COMPARE_MSB_REG], A     ;
   322  06DF  52 01                mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
   323  06E1  60 22                mov   reg[Counter16_1_COMPARE_LSB_REG], A     ;
   324  06E3  71 10                M8C_SetBank1                                     ; ---Restore the counter operation
   325  06E5  52 03                mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
   326  06E7  60 21                mov   reg[Counter16_1_INPUT_LSB_REG], A       ;   and restore it
   327  06E9  70 EF                M8C_SetBank0                                     ; Now re-enable (start) the counter
   328  06EB  52 02                mov   A, [X+bOrigControlReg]                     ;   if it was running when
   329  06ED  60 23                mov   reg[Counter16_1_CONTROL_LSB_REG], A     ;   this function was first called
   330  06EF  18                   pop   A                                          ; Setup the return value
   331  06F0  20                   pop   X                                          ;
   332  06F1  38 FC                ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
   333                             RAM_EPILOGUE RAM_USE_CLASS_2
   334  06F3  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
   _Counter16_1_WriteCompareValue 06AE        Counter16_1_COUNTER_LSB_REG 0020        Counter16_1_COUNTER_MSB_REG 0024  
    wCounter16_1_ReadCompareValue 06B4          _wCounter16_1_ReadCounter 06BA              Counter16_1_EnableInt 0698  
      Counter16_1_CONTROL_LSB_REG 0023                  bOrigClockSetting 0003             _Counter16_1_EnableInt 0698  
                           HITECH 0002         Counter16_1_PERIOD_LSB_REG 0021           Counter16_1_wReadCounter 06BA  
       Counter16_1_PERIOD_MSB_REG 0025          Counter16_1_INPUT_LSB_REG 0021        Counter16_1_COMPARE_LSB_REG 0022  
      Counter16_1_COMPARE_MSB_REG 0026            Counter16_1_WritePeriod 06A8             Counter16_1_DisableInt 069C  
                   INPUT_REG_NULL 0000      Counter16_1_WriteCompareValue 06AE          SYSTEM_LARGE_MEMORY_MODEL 0000  
Counter16_1_CONTROL_REG_START_BIT 0001                  Counter16_1_Start 06A0     _wCounter16_1_ReadCompareValue 06B4  
          _Counter16_1_DisableInt 069C                          TOOLCHAIN 0002     _Counter16_1_wReadCompareValue 06B4  
                bOrigCompareValue 0000           _Counter16_1_WritePeriod 06A8                    RAM_USE_CLASS_1 0001  
                  RAM_USE_CLASS_2 0002                    RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008  
         wCounter16_1_ReadCounter 06BA                    bOrigControlReg 0002                 _Counter16_1_Start 06A0  
                 Counter16_1_Stop 06A4                   STACK_FRAME_SIZE 0006          _Counter16_1_wReadCounter 06BA  
                _Counter16_1_Stop 06A4                      FLAG_XIO_MASK 0010      Counter16_1_wReadCompareValue 06B4  
       SYSTEM_IDXPG_TRACKS_IDX_PP 0001               Counter16_1_INT_MASK 0002                Counter16_1_INT_REG 00E1  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 0865                    
      + 0865                    ; end of file Memory.inc
      + 0865                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Counter16_1.inc
;;   Versi
      +                         on: 2.5, Updated on 2012/3/2 at 9:13:9
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION: A
      +                         ssembler declarations for the Counter16 user module interface
;;------------------------------------
      +                         -----------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights R
      +                         eserved.
;;*****************************************************************************
;;*********
      +                         ********************************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  0865                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter16_1.inc
     4                          ;;   Version: 2.5, Updated on 2012/3/2 at 9:13:9
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Counter16_1 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Counter16_1_CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
    21  00E1                    Counter16_1_INT_REG:                       equ 0x0e1
    22  0002                    Counter16_1_INT_MASK:                      equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Counter16_1 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  05DB                    Counter16_1_PERIOD:                        equ 0x5db
    30  0000                    Counter16_1_COMPARE_VALUE:                 equ 0x0
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Counter16_1
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Counter16_1_COUNTER_LSB_REG:           equ 0x20   ; DR0 Counter register
    38  0024                    Counter16_1_COUNTER_MSB_REG:           equ 0x24
    39  0021                    Counter16_1_PERIOD_LSB_REG:            equ 0x21   ; DR1 Period register
    40  0025                    Counter16_1_PERIOD_MSB_REG:            equ 0x25
    41  0022                    Counter16_1_COMPARE_LSB_REG:           equ 0x22   ; DR2 CompareValue register
    42  0026                    Counter16_1_COMPARE_MSB_REG:           equ 0x26
    43  0023                    Counter16_1_CONTROL_LSB_REG:           equ 0x23   ; Control register
    44  0027                    Counter16_1_CONTROL_MSB_REG:           equ 0x27
    45  0020                    Counter16_1_FUNC_LSB_REG:              equ 0x20   ; Function register
    46  0024                    Counter16_1_FUNC_MSB_REG:              equ 0x24
    47  0021                    Counter16_1_INPUT_LSB_REG:             equ 0x21   ; Input register
    48  0025                    Counter16_1_INPUT_MSB_REG:             equ 0x25
    49  0022                    Counter16_1_OUTPUT_LSB_REG:            equ 0x22   ; Output register
    50  0026                    Counter16_1_OUTPUT_MSB_REG:            equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Counter16_1 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Counter16_1_Start_M
    58                             or    reg[Counter16_1_CONTROL_LSB_REG],  Counter16_1_CONTROL_REG_START_BIT
    59  0865                       endm
    60                          
    61                             macro Counter16_1_Stop_M
    62                             and   reg[Counter16_1_CONTROL_LSB_REG], ~Counter16_1_CONTROL_REG_START_BIT
    63  0865                       endm
    64                          
    65                             macro Counter16_1_EnableInt_M
    66                             M8C_EnableIntMask Counter16_1_INT_REG, Counter16_1_INT_MASK
    67  0865                       endm
    68                          
    69                             macro Counter16_1_DisableInt_M
    70                             M8C_DisableIntMask Counter16_1_INT_REG, Counter16_1_INT_MASK
    71  0865                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter16_1INT.asm
     4                          ;;   Version: 2.5, Updated on 2012/3/2 at 9:13:9
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Counter16_1.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Counter16_1_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Counter16_1_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  06F4                    _Counter16_1_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                            ;lcall _Counter16_1_int
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  06F4  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
                           HITECH 0002                   _Counter16_1_ISR 06F4                          TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  dyn_test2Dynamic.inc
     5                          ;
     6                          ;  Data: 29 October, 2001
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains equates that are used to refer to the active configuration
    11                          ;  status variable.
    12                          ;  
    13                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    14                          ;  Edits to this file will not be preserved.
    15                          ;
    16  0001                    dyn_test2_BIT:	equ	 1h
    17  0000                    dyn_test2_ORD:	equ	 0
    18  0000                    dyn_test2_ADDR_OFF:	equ	 0
    19  0002                    ADC_Config_BIT:	equ	 2h
    20  0001                    ADC_Config_ORD:	equ	 1
    21                          ADC_Config_ADDR_OFF:	equ	 0
      + 0000                    ADC_Config_ADDR_OFF	equ	0
      + 0865                    ;==========================================================================
;  PSoCConfig.asm
;  @PS
      +                         OC_VERSION
;
;  Version: 0.85
;  Revised: June 22, 2004
;  Copyright (c) Cypress Semiconductor 2012.
      +                          All Rights Reserved.
;
;  This file is generated by the Device Editor on Application Generation.
; 
      +                          It contains code which loads the configuration data table generated in
;  the file PSoCConfigTBL.as
      +                         m
;
;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
;  Edits to this file will not be pre
      +                         served.
;==========================================================================
;
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 0865                    
      + 0865                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       28 October 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C21323MLF
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SLEEP_TIMER:			equ	0h	;Sleep Timer value
    26  0018                    SLEEP_TIMER_MASK:		equ	18h	;Sleep Timer mask
    27  0000                    SLEEP_TIMER_JUST:		equ	0h	;Sleep Timer value justified
    28  0000                    SWITCH_MODE_PUMP:		equ	0h	;Switch Mode Pump setting
    29  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    30  0000                    SWITCH_MODE_PUMP_JUST:	equ	0h	;Switch Mode Pump justified
    31  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    32  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    33  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    34  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    35  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    36  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    37                                                        
    38  0005                    POWER_SETTING:			equ	5h
    39  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    40  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    41  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    42  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    43  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    44  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    45  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    46  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    47  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    48  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    49                          
    50  0000                    COMM_RX_PRESENT:		equ	0	;1 = TRUE
    51  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    52                          
    53  0005                    CLOCK_DIV_VC1:			equ	5h	;VC1 clock divider
    54  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    55  0050                    CLOCK_DIV_VC1_JUST:		equ	50h	;VC1 clock divider justified
    56  000C                    CLOCK_DIV_VC2:			equ	ch	;VC2 clock divider
    57  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    58  000C                    CLOCK_DIV_VC2_JUST:		equ	ch	;VC2 clock divider justified
    59  0002                    CLOCK_INPUT_VC3:		equ	2h	;VC3 clock source
    60  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    61  0002                    CLOCK_INPUT_VC3_JUST:	equ	2h	;VC3 clock source justified
    62  0031                    CLOCK_DIV_VC3:			equ	31h	;VC3 clock divider
    63  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    64  0031                    CLOCK_DIV_VC3_JUST:		equ	31h	;VC3 clock divider justified
    65  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    66  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    67  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    68  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    69  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    70  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    71                          ;
    72                          ; register initial values
    73                          ;
    74  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    75  004A                    PORT_0_GLOBAL_SELECT:	equ 4ah	;Port 0 global select register (PRT0GS)
    76  00CA                    PORT_0_DRIVE_0:			equ cah	;Port 0 drive mode 0 register (PRT0DM0)
    77  0015                    PORT_0_DRIVE_1:			equ 15h	;Port 0 drive mode 1 register (PRT0DM1)
    78  0015                    PORT_0_DRIVE_2:			equ 15h	;Port 0 drive mode 2 register (PRT0DM2)
    79  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    80  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    81  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    82  0001                    PORT_1_GLOBAL_SELECT:	equ 1h	;Port 1 global select register (PRT1GS)
    83  0001                    PORT_1_DRIVE_0:			equ 1h	;Port 1 drive mode 0 register (PRT1DM0)
    84  00D6                    PORT_1_DRIVE_1:			equ d6h	;Port 1 drive mode 1 register (PRT1DM1)
    85  00D6                    PORT_1_DRIVE_2:			equ d6h	;Port 1 drive mode 2 register (PRT1DM2)
    86  0028                    PORT_1_INTENABLE:		equ 28h	;Port 1 interrupt enable register (PRT1IE)
    87  0028                    PORT_1_INTCTRL_0:		equ 28h	;Port 1 interrupt control 0 register (PRT1IC0)
    88  0028                    PORT_1_INTCTRL_1:		equ 28h	;Port 1 interrupt control 1 register (PRT1IC1)
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          INCLUDE "PSoCDynamic.inc"
     4                          ;==========================================================================
     5                          ;  PSoCConfig.asm
     6                          ;  @PSOC_VERSION
     7                          ;
     8                          ;  Version: 0.85
     9                          ;  Revised: June 22, 2004
    10                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    11                          ;
    12                          ;  This file is generated by the Device Editor on Application Generation.
    13                          ;  It contains code which loads the configuration data table generated in
    14                          ;  the file PSoCConfigTBL.asm
    15                          ;
    16                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    17                          ;  Edits to this file will not be preserved.
    18                          ;==========================================================================
    19                          ;
    20                          include "m8c.inc"
    21                          include "memory.inc"
    22                          include "GlobalParams.inc"
    23                          
    24                          export LoadConfigInit
    25                          export _LoadConfigInit
    26                          export LoadConfig_dyn_test2
    27                          export _LoadConfig_dyn_test2
    28                          export UnloadConfig_dyn_test2
    29                          export _UnloadConfig_dyn_test2
    30                          export ReloadConfig_dyn_test2
    31                          export _ReloadConfig_dyn_test2
    32                          export LoadConfig_ADC_Config
    33                          export _LoadConfig_ADC_Config
    34                          export UnloadConfig_ADC_Config
    35                          export _UnloadConfig_ADC_Config
    36                          export UnloadConfig_Total
    37                          export _UnloadConfig_Total
    38                          export ACTIVE_CONFIG_STATUS
    39                          
    40                          export NO_SHADOW
    41                          export _NO_SHADOW
    42                          
    43  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    44  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    45                          
    46                          AREA psoc_config(rom, rel)
    47                          
    48                          ;---------------------------------------------------------------------------
    49                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    50                          ;                  parameters handled by boot code, like CPU speed). This
    51                          ;                  function can be called from user code, but typically it
    52                          ;                  is only called from boot.
    53                          ;
    54                          ;       INPUTS: None.
    55                          ;      RETURNS: Nothing.
    56                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    57                          ;               In the large memory model currently only the page
    58                          ;               pointer registers listed below are modified.  This does
    59                          ;               not guarantee that in future implementations of this
    60                          ;               function other page pointer registers will not be
    61                          ;               modified.
    62                          ;          
    63                          ;               Page Pointer Registers Modified: 
    64                          ;               CUR_PP
    65                          ;
    66  0582                    _LoadConfigInit:
    67  0582                     LoadConfigInit:
    68                              RAM_PROLOGUE RAM_USE_CLASS_4
    69                              RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
    70  0582  55 C6  00         	mov		[ACTIVE_CONFIG_STATUS], 0
    71                          
    72  0585  7C 058C           	lcall	LoadConfig_dyn_test2
    73  0588  7C 0B7B           	lcall	LoadConfigTBL_dyn_test2_Ordered
    74                          
    75                          
    76                              RAM_EPILOGUE RAM_USE_CLASS_4
    77  058B  7F                    ret
    78                          
    79                          ;---------------------------------------------------------------------------
    80                          ; Load Configuration dyn_test2
    81                          ;
    82                          ;    Load configuration registers for dyn_test2.
    83                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    84                          ;
    85                          ;       INPUTS: None.
    86                          ;      RETURNS: Nothing.
    87                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    88                          ;               modified as may the Page Pointer registers!
    89                          ;               In the large memory model currently only the page
    90                          ;               pointer registers listed below are modified.  This does
    91                          ;               not guarantee that in future implementations of this
    92                          ;               function other page pointer registers will not be
    93                          ;               modified.
    94                          ;          
    95                          ;               Page Pointer Registers Modified: 
    96                          ;               CUR_PP
    97                          ;
    98  058C                    _LoadConfig_dyn_test2:
    99  058C                     LoadConfig_dyn_test2:
   100                              RAM_PROLOGUE RAM_USE_CLASS_4
   101  058C  70 EF             	M8C_SetBank0
   102                          
   103  058E  10                	push	x
   104  058F  70 EF                 M8C_SetBank0                    ; Force bank 0
   105  0591  50 00                 mov     a, 0                    ; Specify bank 0
   106  0593  67                    asr     a                       ; Store in carry flag
   107                                                              ; Load bank 0 table:
   108  0594  50 04                 mov     A, >LoadConfigTBL_dyn_test2_Bank0
   109  0596  57 C1                 mov     X, <LoadConfigTBL_dyn_test2_Bank0
   110  0598  7C 065C               lcall   LoadConfig              ; Load the bank 0 values
   111                          
   112  059B  50 01                 mov     a, 1                    ; Specify bank 1
   113  059D  67                    asr     a                       ; Store in carry flag
   114                                                              ; Load bank 1 table:
   115  059E  50 04                 mov     A, >LoadConfigTBL_dyn_test2_Bank1
   116  05A0  57 F0                 mov     X, <LoadConfigTBL_dyn_test2_Bank1
   117  05A2  7C 065C               lcall   LoadConfig              ; Load the bank 1 values
   118                          
   119                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   120                          ; set config active bit
   121  05A5  2E C6  01         	or		[ACTIVE_CONFIG_STATUS+dyn_test2_ADDR_OFF], dyn_test2_BIT
   122  05A8  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   123  05AA  20                	pop		x
   124                          
   125                              RAM_EPILOGUE RAM_USE_CLASS_4
   126  05AB  7F                    ret
   127                          
   128                          ;---------------------------------------------------------------------------
   129                          ; Reload Configuration dyn_test2
   130                          ;
   131                          ;    Reload configuration registers for dyn_test2.
   132                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
   133                          ;
   134                          ;       INPUTS: None.
   135                          ;      RETURNS: Nothing.
   136                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
   137                          ;               modified as may the Page Pointer registers!
   138                          ;               In the large memory model currently only the page
   139                          ;               pointer registers listed below are modified.  This does
   140                          ;               not guarantee that in future implementations of this
   141                          ;               function other page pointer registers will not be
   142                          ;               modified.
   143                          ;          
   144                          ;               Page Pointer Registers Modified: 
   145                          ;               CUR_PP
   146                          ;
   147  05AC                    _ReloadConfig_dyn_test2:
   148  05AC                     ReloadConfig_dyn_test2:
   149                              RAM_PROLOGUE RAM_USE_CLASS_4
   150                          
   151  05AC  10                	push	x
   152  05AD  70 EF                 M8C_SetBank0                    ; Force bank 0
   153  05AF  50 00                 mov     a, 0                    ; Specify bank 0
   154  05B1  67                    asr     a                       ; Store in carry flag
   155                                                              ; Bank 0 table address:
   156  05B2  50 05                 mov     A, >ReloadConfigTBL_dyn_test2_Bank0
   157  05B4  57 1F                 mov     X, <ReloadConfigTBL_dyn_test2_Bank0
   158  05B6  7C 065C               lcall   LoadConfig              ; Reload the bank 0 values
   159                          
   160  05B9  50 01                 mov     a, 1                    ; Specify bank 1
   161  05BB  67                    asr     a                       ; Store in carry flag
   162                                                              ; Bank 1 table address:
   163  05BC  50 05                 mov     A, >ReloadConfigTBL_dyn_test2_Bank1
   164  05BE  57 32                 mov     X, <ReloadConfigTBL_dyn_test2_Bank1
   165  05C0  7C 065C               lcall   LoadConfig              ; Reload the bank 1 values
   166                          
   167                          ; set config active bit
   168                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   169  05C3  2E C6  01         	or		[ACTIVE_CONFIG_STATUS+dyn_test2_ADDR_OFF], dyn_test2_BIT
   170  05C6  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   171  05C8  20                	pop		x
   172                          
   173                              RAM_EPILOGUE RAM_USE_CLASS_4
   174  05C9  7F                    ret
   175                          
   176                          ;---------------------------------------------------------------------------
   177                          ; Unload Configuration dyn_test2
   178                          ;
   179                          ;    Reset configuration registers for dyn_test2
   180                          ;    to their values as initially configured.
   181                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
   182                          ;
   183                          ;       INPUTS: None.
   184                          ;      RETURNS: Nothing.
   185                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
   186                          ;               modified as may the Page Pointer registers!
   187                          ;               In the large memory model currently only the page
   188                          ;               pointer registers listed below are modified.  This does
   189                          ;               not guarantee that in future implementations of this
   190                          ;               function other page pointer registers will not be
   191                          ;               modified.
   192                          ;          
   193                          ;               Page Pointer Registers Modified: 
   194                          ;               CUR_PP
   195                          ;
   196  05CA                    _UnloadConfig_dyn_test2:
   197  05CA                     UnloadConfig_dyn_test2:
   198                              RAM_PROLOGUE RAM_USE_CLASS_4
   199                          
   200  05CA  10                	push	x
   201  05CB  70 EF                 M8C_SetBank0                    ; Force bank 0
   202  05CD  50 00                 mov     a, 0                    ; Specify bank 0
   203  05CF  67                    asr     a                       ; Store in carry flag
   204                                                              ; Bank 0 table address:
   205  05D0  50 05                 mov     A, >UnloadConfigTBL_dyn_test2_Bank0
   206  05D2  57 45                 mov     X, <UnloadConfigTBL_dyn_test2_Bank0
   207  05D4  7C 065C               lcall   LoadConfig              ; Unload the bank 0 values
   208                          
   209  05D7  50 01                 mov     a, 1                    ; Specify bank 1
   210  05D9  67                    asr     a                       ; Store in carry flag
   211                                                              ; Bank 1 table address:
   212  05DA  50 05                 mov     A, >UnloadConfigTBL_dyn_test2_Bank1
   213  05DC  57 4C                 mov     X, <UnloadConfigTBL_dyn_test2_Bank1
   214  05DE  7C 065C               lcall   LoadConfig              ; Unload the bank 1 values
   215                          
   216  05E1  70 EF             	M8C_SetBank0
   217                          ; clear config active bit
   218                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   219  05E3  26 C6  FE         	and		[ACTIVE_CONFIG_STATUS+dyn_test2_ADDR_OFF], ~dyn_test2_BIT
   220  05E6  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   221  05E8  20                	pop		x
   222                          
   223                              RAM_EPILOGUE RAM_USE_CLASS_4
   224  05E9  7F                    ret
   225                          
   226                          ;---------------------------------------------------------------------------
   227                          ; Load Configuration ADC_Config
   228                          ;
   229                          ;    Load configuration registers for ADC_Config.
   230                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
   231                          ;
   232                          ;       INPUTS: None.
   233                          ;      RETURNS: Nothing.
   234                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
   235                          ;               modified as may the Page Pointer registers!
   236                          ;               In the large memory model currently only the page
   237                          ;               pointer registers listed below are modified.  This does
   238                          ;               not guarantee that in future implementations of this
   239                          ;               function other page pointer registers will not be
   240                          ;               modified.
   241                          ;          
   242                          ;               Page Pointer Registers Modified: 
   243                          ;               CUR_PP
   244                          ;
   245  05EA                    _LoadConfig_ADC_Config:
   246  05EA                     LoadConfig_ADC_Config:
   247                              RAM_PROLOGUE RAM_USE_CLASS_4
   248  05EA  70 EF             	M8C_SetBank0
   249                          ; writing Row_0_InputMux register
   250  05EC  41 B0 F3          	and		reg[b0h], ~ ch
   251                          ; writing Row_0_OutputDrive_0 register
   252  05EF  41 B5 EF          	and		reg[b5h], ~10h
   253                          
   254  05F2  10                	push	x
   255  05F3  70 EF                 M8C_SetBank0                    ; Force bank 0
   256  05F5  50 00                 mov     a, 0                    ; Specify bank 0
   257  05F7  67                    asr     a                       ; Store in carry flag
   258                                                              ; Load bank 0 table:
   259  05F8  50 04                 mov     A, >LoadConfigTBL_ADC_Config_Bank0
   260  05FA  57 A8                 mov     X, <LoadConfigTBL_ADC_Config_Bank0
   261  05FC  7C 065C               lcall   LoadConfig              ; Load the bank 0 values
   262                          
   263  05FF  50 01                 mov     a, 1                    ; Specify bank 1
   264  0601  67                    asr     a                       ; Store in carry flag
   265                                                              ; Load bank 1 table:
   266  0602  50 04                 mov     A, >LoadConfigTBL_ADC_Config_Bank1
   267  0604  57 AF                 mov     X, <LoadConfigTBL_ADC_Config_Bank1
   268  0606  7C 065C               lcall   LoadConfig              ; Load the bank 1 values
   269                          
   270                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   271                          ; set config active bit
   272  0609  2E C6  02         	or		[ACTIVE_CONFIG_STATUS+ADC_Config_ADDR_OFF], ADC_Config_BIT
   273  060C  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   274  060E  20                	pop		x
   275                          
   276                              RAM_EPILOGUE RAM_USE_CLASS_4
   277  060F  7F                    ret
   278                          
   279                          ;---------------------------------------------------------------------------
   280                          ; Unload Configuration ADC_Config
   281                          ;
   282                          ;    Reset configuration registers for ADC_Config
   283                          ;    to their values as initially configured.
   284                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
   285                          ;
   286                          ;       INPUTS: None.
   287                          ;      RETURNS: Nothing.
   288                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
   289                          ;               modified as may the Page Pointer registers!
   290                          ;               In the large memory model currently only the page
   291                          ;               pointer registers listed below are modified.  This does
   292                          ;               not guarantee that in future implementations of this
   293                          ;               function other page pointer registers will not be
   294                          ;               modified.
   295                          ;          
   296                          ;               Page Pointer Registers Modified: 
   297                          ;               CUR_PP
   298                          ;
   299  0610                    _UnloadConfig_ADC_Config:
   300  0610                     UnloadConfig_ADC_Config:
   301                              RAM_PROLOGUE RAM_USE_CLASS_4
   302                          
   303  0610  10                	push	x
   304  0611  70 EF                 M8C_SetBank0                    ; Force bank 0
   305  0613  50 00                 mov     a, 0                    ; Specify bank 0
   306  0615  67                    asr     a                       ; Store in carry flag
   307                                                              ; Bank 0 table address:
   308  0616  50 04                 mov     A, >UnloadConfigTBL_ADC_Config_Bank0
   309  0618  57 B6                 mov     X, <UnloadConfigTBL_ADC_Config_Bank0
   310  061A  7C 065C               lcall   LoadConfig              ; Unload the bank 0 values
   311                          
   312  061D  50 01                 mov     a, 1                    ; Specify bank 1
   313  061F  67                    asr     a                       ; Store in carry flag
   314                                                              ; Bank 1 table address:
   315  0620  50 04                 mov     A, >UnloadConfigTBL_ADC_Config_Bank1
   316  0622  57 B9                 mov     X, <UnloadConfigTBL_ADC_Config_Bank1
   317  0624  7C 065C               lcall   LoadConfig              ; Unload the bank 1 values
   318                          
   319  0627  70 EF             	M8C_SetBank0
   320                          ; writing Row_0_InputMux register
   321  0629  41 B0 F3          	and		reg[b0h], ~ ch
   322  062C  43 B0 04          	or		reg[b0h],  4h
   323                          ; writing Row_0_OutputDrive_0 register
   324  062F  41 B5 EF          	and		reg[b5h], ~10h
   325  0632  43 B5 10          	or		reg[b5h], 10h
   326                          ; clear config active bit
   327                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   328  0635  26 C6  FD         	and		[ACTIVE_CONFIG_STATUS+ADC_Config_ADDR_OFF], ~ADC_Config_BIT
   329  0638  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   330  063A  20                	pop		x
   331                          
   332                              RAM_EPILOGUE RAM_USE_CLASS_4
   333  063B  7F                    ret
   334                          
   335                          ;---------------------------------------------------------------------------
   336                          ; Unload Configuration Total
   337                          ;
   338                          ;    Reset configuration registers for Total
   339                          ;    to their values as initially configured.
   340                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
   341                          ;
   342                          ;       INPUTS: None.
   343                          ;      RETURNS: Nothing.
   344                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
   345                          ;               modified as may the Page Pointer registers!
   346                          ;               In the large memory model currently only the page
   347                          ;               pointer registers listed below are modified.  This does
   348                          ;               not guarantee that in future implementations of this
   349                          ;               function other page pointer registers will not be
   350                          ;               modified.
   351                          ;          
   352                          ;               Page Pointer Registers Modified: 
   353                          ;               CUR_PP
   354                          ;
   355  063C                    _UnloadConfig_Total:
   356  063C                     UnloadConfig_Total:
   357                              RAM_PROLOGUE RAM_USE_CLASS_4
   358                          
   359  063C  10                	push	x
   360  063D  70 EF                 M8C_SetBank0                    ; Force bank 0
   361  063F  50 00                 mov     a, 0                    ; Specify bank 0
   362  0641  67                    asr     a                       ; Store in carry flag
   363                                                              ; Bank 0 table address:
   364  0642  50 05                 mov     A, >UnloadConfigTBL_Total_Bank0
   365  0644  57 60                 mov     X, <UnloadConfigTBL_Total_Bank0
   366  0646  7C 065C               lcall   LoadConfig              ; Unload the bank 0 values
   367                          
   368  0649  50 01                 mov     a, 1                    ; Specify bank 1
   369  064B  67                    asr     a                       ; Store in carry flag
   370                                                              ; Bank 1 table address:
   371  064C  50 05                 mov     A, >UnloadConfigTBL_Total_Bank1
   372  064E  57 69                 mov     X, <UnloadConfigTBL_Total_Bank1
   373  0650  7C 065C               lcall   LoadConfig              ; Unload the bank 1 values
   374                          
   375  0653  70 EF             	M8C_SetBank0
   376                          ; clear config active bit
   377                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
   378  0655  55 C6  00         	mov		[ACTIVE_CONFIG_STATUS+0], 0
   379  0658  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   380  065A  20                	pop		x
   381                          
   382                              RAM_EPILOGUE RAM_USE_CLASS_4
   383  065B  7F                    ret
   384                          
   385                          
   386                          
   387                          
   388                          ;---------------------------------------------------------------------------
   389                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   390                          ;              pairs. Terminate on address=0xFF.
   391                          ;
   392                          ;  INPUTS:  [A,X] points to the table to be loaded
   393                          ;           Flag Register Carry bit encodes the Register Bank
   394                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   395                          ;
   396                          ;  RETURNS: nothing.
   397                          ;
   398                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   399                          ;                X-3 Temporary store for register address
   400                          ;                X-2 LSB of config table address
   401                          ;                X-1 MSB of config table address
   402                          ;
   403  065C                    LoadConfig:
   404                              RAM_PROLOGUE RAM_USE_CLASS_2
   405  065C  38 02                 add     SP, 2                   ; Set up local vars
   406  065E  10                    push    X                       ; Save config table address on stack
   407  065F  08                    push    A
   408  0660  4F                    mov     X, SP
   409  0661  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   410  0664  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   411  0666  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   412  0669                    .BankSelectSaved:
   413  0669  18                    pop     A
   414  066A  20                    pop     X
   415                          
   416  066B                    LoadConfigLp:
   417  066B  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   418  066D  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   419  0670  10                    push    X                       ; Preserve the config table address
   420  0671  08                    push    A
   421  0672  28                    romx                            ; Load register address from table
   422  0673  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   423  0675  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   424  0677  4F                    mov     X, SP                   ;
   425  0678  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   426  067B  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   427  067D  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   428  067F                    .IOBankNowSet:
   429  067F  54 FD                 mov     [X-3], A                ; Stash the register address
   430  0681  18                    pop     A                       ; Retrieve the table address
   431  0682  20                    pop     X
   432  0683  75                    inc     X                       ; Advance to the data byte
   433  0684  09 00                 adc     A, 0
   434  0686  10                    push    X                       ; Save the config table address again
   435  0687  08                    push    A
   436  0688  28                    romx                            ; load config data from the table
   437  0689  4F                    mov     X, SP                   ; retrieve the register address
   438  068A  59 FD                 mov     X, [X-3]
   439  068C  61 00                 mov     reg[X], A               ; Configure the register
   440  068E  18                    pop     A                       ; retrieve the table address
   441  068F  20                    pop     X
   442  0690  75                    inc     X                       ; advance to next table entry
   443  0691  09 00                 adc     A, 0
   444  0693  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   445  0695                    EndLoadConfig:
   446  0695  38 FC                 add     SP, -4
   447                              RAM_EPILOGUE RAM_USE_CLASS_2
   448  0697  7F                    ret
   449                          
   450                          AREA InterruptRAM(ram, rel)
   451                          
   452  00C6                    NO_SHADOW:
   453                          _NO_SHADOW:
      + 00C6                    _NO_SHADOW:
      + 00C6                    ; active configuration status byte
ACTIVE_CONFIG_STATUS:
   454                          ; active configuration status byte
   455  00C6                    ACTIVE_CONFIG_STATUS:	BLK	1
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
                 _LoadConfigInit 0582          _UnloadConfig_ADC_Config 0610            UnloadConfig_dyn_test2 05CA  
     UnloadConfigTBL_Total_Bank0 0560       UnloadConfigTBL_Total_Bank1 0569  UnloadConfigTBL_ADC_Config_Bank0 04B6  
  LoadConfigTBL_ADC_Config_Bank0 04A8  UnloadConfigTBL_ADC_Config_Bank1 04B9    LoadConfigTBL_ADC_Config_Bank1 04AF  
          ReloadConfig_dyn_test2 05AC   ReloadConfigTBL_dyn_test2_Bank0 051F   ReloadConfigTBL_dyn_test2_Bank1 0532  
             ADC_Config_ADDR_OFF 0000             _LoadConfig_dyn_test2 058C           _UnloadConfig_dyn_test2 05CA  
         _ReloadConfig_dyn_test2 05AC   LoadConfigTBL_dyn_test2_Ordered 0B7B                            HITECH 0002  
              UnloadConfig_Total 063C         SYSTEM_LARGE_MEMORY_MODEL 0000                         NO_SHADOW 00C6  
                       TOOLCHAIN 0002                        _NO_SHADOW 00C6                           RES_WDT 00E3  
                 RAM_USE_CLASS_1 0001                   RAM_USE_CLASS_2 0002                   RAM_USE_CLASS_3 0004  
                 RAM_USE_CLASS_4 0008              LoadConfig_dyn_test2 058C                     dyn_test2_BIT 0001  
                      LoadConfig 065C               _UnloadConfig_Total 063C                    LoadConfigInit 0582  
                END_CONFIG_TABLE 00FF           UnloadConfig_ADC_Config 0610   UnloadConfigTBL_dyn_test2_Bank0 0545  
   LoadConfigTBL_dyn_test2_Bank0 04C1   UnloadConfigTBL_dyn_test2_Bank1 054C     LoadConfigTBL_dyn_test2_Bank1 04F0  
            ACTIVE_CONFIG_STATUS 00C6                dyn_test2_ADDR_OFF 0000                     EndLoadConfig 0695  
           LoadConfig_ADC_Config 05EA                     FLAG_XIO_MASK 0010        SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
                    LoadConfigLp 066B                    ADC_Config_BIT 0002            _LoadConfig_ADC_Config 05EA  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  0865                        endm
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          include "m8c.inc"
     4                          ;  Personalization tables 
     5                          export LoadConfigTBL_dyn_test2_Bank1
     6                          export LoadConfigTBL_dyn_test2_Bank0
     7                          export LoadConfigTBL_dyn_test2_Ordered
     8                          export UnloadConfigTBL_dyn_test2_Bank1
     9                          export UnloadConfigTBL_dyn_test2_Bank0
    10                          export ReloadConfigTBL_dyn_test2_Bank1
    11                          export ReloadConfigTBL_dyn_test2_Bank0
    12                          export LoadConfigTBL_ADC_Config_Bank1
    13                          export LoadConfigTBL_ADC_Config_Bank0
    14                          export UnloadConfigTBL_ADC_Config_Bank1
    15                          export UnloadConfigTBL_ADC_Config_Bank0
    16                          export UnloadConfigTBL_Total_Bank1
    17                          export UnloadConfigTBL_Total_Bank0
    18                          AREA lit(rom, rel)
    19  04A8                    LoadConfigTBL_ADC_Config_Bank0:
    20                          ;  Instance name TX8_2, User Module TX8
    21                          ;       Instance name TX8_2, Block Name TX8(DCB03)
    22  04A8  2F 00             	db		2fh, 00h		;TX8_2_CONTROL_REG  (DCB03CR0)
    23  04AA  2D 00             	db		2dh, 00h		;TX8_2_TX_BUFFER_REG(DCB03DR1)
    24  04AC  2E 00             	db		2eh, 00h		;TX8_2_(DCB03DR2)
    25  04AE  FF                	db		ffh
    26  04AF                    LoadConfigTBL_ADC_Config_Bank1:
    27                          ;  Instance name TX8_2, User Module TX8
    28                          ;       Instance name TX8_2, Block Name TX8(DCB03)
    29  04AF  2C 0D             	db		2ch, 0dh		;TX8_2_FUNC_REG     (DCB03FN)
    30  04B1  2D 06             	db		2dh, 06h		;TX8_2_INPUT_REG    (DCB03IN)
    31  04B3  2E 44             	db		2eh, 44h		;TX8_2_OUTPUT_REG   (DCB03OU)
    32  04B5  FF                	db		ffh
    33  04B6                    UnloadConfigTBL_ADC_Config_Bank0:
    34                          ;  Instance name TX8_2, User Module TX8
    35                          ;       Instance name TX8_2, Block Name TX8(DCB03)
    36  04B6  2F 00             	db		2fh, 00h		;TX8_2_CONTROL_0 (DCB03CR0)
    37  04B8  FF                	db		ffh
    38  04B9                    UnloadConfigTBL_ADC_Config_Bank1:
    39                          ;  Instance name TX8_2, User Module TX8
    40                          ;       Instance name TX8_2, Block Name TX8(DCB03)
    41  04B9  2C 00             	db		2ch, 00h		;TX8_2_DIG_BasicFunction (DCB03FN)
    42  04BB  2D 00             	db		2dh, 00h		;TX8_2_DIG_Input (DCB03IN)
    43  04BD  2E 00             	db		2eh, 00h		;TX8_2_DIG_Output (DCB03OU)
    44  04BF  FF                	db		ffh
    45                          
    46                          ;  Instance name TX8_2, User Module TX8
    47                          ;       Instance name TX8_2, Block Name TX8(DCB03)
    48  04C0  FF                	db		ffh
    49  04C1                    LoadConfigTBL_dyn_test2_Bank0:
    50                          ;  Instance name Counter16_1, User Module Counter16
    51                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
    52  04C1  23 00             	db		23h, 00h		;Counter16_1_CONTROL_LSB_REG(DBB00CR0)
    53  04C3  21 DB             	db		21h, dbh		;Counter16_1_PERIOD_LSB_REG(DBB00DR1)
    54  04C5  22 00             	db		22h, 00h		;Counter16_1_COMPARE_LSB_REG(DBB00DR2)
    55                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
    56  04C7  27 00             	db		27h, 00h		;Counter16_1_CONTROL_MSB_REG(DBB01CR0)
    57  04C9  25 05             	db		25h, 05h		;Counter16_1_PERIOD_MSB_REG(DBB01DR1)
    58  04CB  26 00             	db		26h, 00h		;Counter16_1_COMPARE_MSB_REG(DBB01DR2)
    59                          ;  Instance name PWM8_1, User Module PWM8
    60                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
    61  04CD  2F 00             	db		2fh, 00h		;PWM8_1_CONTROL_REG(DCB03CR0)
    62  04CF  2D 1C             	db		2dh, 1ch		;PWM8_1_PERIOD_REG(DCB03DR1)
    63  04D1  2E 0E             	db		2eh, 0eh		;PWM8_1_COMPARE_REG(DCB03DR2)
    64                          ;  Global Register values Bank 0
    65  04D3  60 09             	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
    66  04D5  64 00             	db		64h, 00h		; AnalogComparatorControl0 register (CMP_CR0)
    67  04D7  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
    68  04D9  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
    69  04DB  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
    70  04DD  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
    71  04DF  62 00             	db		62h, 00h		; PWM_Control register (PWM_CR)
    72  04E1  B0 04             	db		b0h, 04h		; Row_0_InputMux register (RDI0RI)
    73  04E3  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
    74  04E5  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
    75  04E7  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
    76  04E9  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
    77  04EB  B5 14             	db		b5h, 14h		; Row_0_OutputDrive_0 register (RDI0SRO0)
    78  04ED  B6 12             	db		b6h, 12h		; Row_0_OutputDrive_1 register (RDI0SRO1)
    79  04EF  FF                	db		ffh
    80  04F0                    LoadConfigTBL_dyn_test2_Bank1:
    81                          ;  Instance name Counter16_1, User Module Counter16
    82                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
    83  04F0  20 01             	db		20h, 01h		;Counter16_1_FUNC_LSB_REG(DBB00FN)
    84  04F2  21 15             	db		21h, 15h		;Counter16_1_INPUT_LSB_REG(DBB00IN)
    85  04F4  22 40             	db		22h, 40h		;Counter16_1_OUTPUT_LSB_REG(DBB00OU)
    86                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
    87  04F6  24 21             	db		24h, 21h		;Counter16_1_FUNC_MSB_REG(DBB01FN)
    88  04F8  25 35             	db		25h, 35h		;Counter16_1_INPUT_MSB_REG(DBB01IN)
    89  04FA  26 40             	db		26h, 40h		;Counter16_1_OUTPUT_MSB_REG(DBB01OU)
    90                          ;  Instance name PWM8_1, User Module PWM8
    91                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
    92  04FC  2C 21             	db		2ch, 21h		;PWM8_1_FUNC_REG(DCB03FN)
    93  04FE  2D 16             	db		2dh, 16h		;PWM8_1_INPUT_REG(DCB03IN)
    94  0500  2E 47             	db		2eh, 47h		;PWM8_1_OUTPUT_REG(DCB03OU)
    95                          ;  Global Register values Bank 1
    96  0502  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
    97  0504  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
    98  0506  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
    99  0508  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   100  050A  64 00             	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
   101  050C  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   102  050E  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   103  0510  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   104  0512  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   105  0514  E1 5C             	db		e1h, 5ch		; OscillatorControl_1 register (OSC_CR1)
   106  0516  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   107  0518  DF 31             	db		dfh, 31h		; OscillatorControl_3 register (OSC_CR3)
   108  051A  DE 02             	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
   109  051C  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   110  051E  FF                	db		ffh
   111                          AREA psoc_config(rom, rel)
   112  0B7B                    LoadConfigTBL_dyn_test2_Ordered:
   115  0B7D  62 00 00          	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
   117  0B82  62 00 CA          	mov	reg[00h], cah		; Port_0_DriveMode_0 register (PRT0DM0)
   118  0B85  62 01 15          	mov	reg[01h], 15h		; Port_0_DriveMode_1 register (PRT0DM1)
   120  0B8A  62 03 15          	mov	reg[03h], 15h		; Port_0_DriveMode_2 register (PRT0DM2)
   121  0B8D  62 02 4A          	mov	reg[02h], 4ah		; Port_0_GlobalSelect register (PRT0GS)
   123  0B92  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
   124  0B95  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
   126  0B9A  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
   127  0B9D  62 04 00          	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
   129  0BA2  62 04 01          	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
   130  0BA5  62 05 D6          	mov	reg[05h], d6h		; Port_1_DriveMode_1 register (PRT1DM1)
   132  0BAA  62 07 D6          	mov	reg[07h], d6h		; Port_1_DriveMode_2 register (PRT1DM2)
   133  0BAD  62 06 01          	mov	reg[06h], 01h		; Port_1_GlobalSelect register (PRT1GS)
   135  0BB2  62 06 28          	mov	reg[06h], 28h		; Port_1_IntCtrl_0 register (PRT1IC0)
   136  0BB5  62 07 28          	mov	reg[07h], 28h		; Port_1_IntCtrl_1 register (PRT1IC1)
   138  0BBA  62 05 28          	mov	reg[05h], 28h		; Port_1_IntEn register (PRT1IE)
   140  0BBF  7F                	ret
   141                          AREA lit(rom, rel)
   142  051F                    ReloadConfigTBL_dyn_test2_Bank0:
   143                          ;  Instance name Counter16_1, User Module Counter16
   144                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
   145  051F  23 00             	db		23h, 00h		;Counter16_1_CONTROL_LSB_REG(DBB00CR0)
   146  0521  21 DB             	db		21h, dbh		;Counter16_1_PERIOD_LSB_REG(DBB00DR1)
   147  0523  22 00             	db		22h, 00h		;Counter16_1_COMPARE_LSB_REG(DBB00DR2)
   148                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
   149  0525  27 00             	db		27h, 00h		;Counter16_1_CONTROL_MSB_REG(DBB01CR0)
   150  0527  25 05             	db		25h, 05h		;Counter16_1_PERIOD_MSB_REG(DBB01DR1)
   151  0529  26 00             	db		26h, 00h		;Counter16_1_COMPARE_MSB_REG(DBB01DR2)
   152                          ;  Instance name PWM8_1, User Module PWM8
   153                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
   154  052B  2F 00             	db		2fh, 00h		;PWM8_1_CONTROL_REG(DCB03CR0)
   155  052D  2D 1C             	db		2dh, 1ch		;PWM8_1_PERIOD_REG(DCB03DR1)
   156  052F  2E 0E             	db		2eh, 0eh		;PWM8_1_COMPARE_REG(DCB03DR2)
   157  0531  FF                	db		ffh
   158  0532                    ReloadConfigTBL_dyn_test2_Bank1:
   159                          ;  Instance name Counter16_1, User Module Counter16
   160                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
   161  0532  20 01             	db		20h, 01h		;Counter16_1_FUNC_LSB_REG(DBB00FN)
   162  0534  21 15             	db		21h, 15h		;Counter16_1_INPUT_LSB_REG(DBB00IN)
   163  0536  22 40             	db		22h, 40h		;Counter16_1_OUTPUT_LSB_REG(DBB00OU)
   164                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
   165  0538  24 21             	db		24h, 21h		;Counter16_1_FUNC_MSB_REG(DBB01FN)
   166  053A  25 35             	db		25h, 35h		;Counter16_1_INPUT_MSB_REG(DBB01IN)
   167  053C  26 40             	db		26h, 40h		;Counter16_1_OUTPUT_MSB_REG(DBB01OU)
   168                          ;  Instance name PWM8_1, User Module PWM8
   169                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
   170  053E  2C 21             	db		2ch, 21h		;PWM8_1_FUNC_REG(DCB03FN)
   171  0540  2D 16             	db		2dh, 16h		;PWM8_1_INPUT_REG(DCB03IN)
   172  0542  2E 47             	db		2eh, 47h		;PWM8_1_OUTPUT_REG(DCB03OU)
   173  0544  FF                	db		ffh
   174  0545                    UnloadConfigTBL_dyn_test2_Bank0:
   175                          ;  Instance name Counter16_1, User Module Counter16
   176                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
   177  0545  23 00             	db		23h, 00h		;Counter16_1_CONTROL_0 (DBB00CR0)
   178                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
   179  0547  27 00             	db		27h, 00h		;Counter16_1_CONTROL_0 (DBB01CR0)
   180                          ;  Instance name PWM8_1, User Module PWM8
   181                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
   182  0549  2F 00             	db		2fh, 00h		;PWM8_1_CONTROL_0 (DCB03CR0)
   183  054B  FF                	db		ffh
   184  054C                    UnloadConfigTBL_dyn_test2_Bank1:
   185                          ;  Instance name Counter16_1, User Module Counter16
   186                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
   187  054C  20 00             	db		20h, 00h		;Counter16_1_DIG_BasicFunction (DBB00FN)
   188  054E  21 00             	db		21h, 00h		;Counter16_1_DIG_Input (DBB00IN)
   189  0550  22 00             	db		22h, 00h		;Counter16_1_DIG_Output (DBB00OU)
   190                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
   191  0552  24 00             	db		24h, 00h		;Counter16_1_DIG_BasicFunction (DBB01FN)
   192  0554  25 00             	db		25h, 00h		;Counter16_1_DIG_Input (DBB01IN)
   193  0556  26 00             	db		26h, 00h		;Counter16_1_DIG_Output (DBB01OU)
   194                          ;  Instance name PWM8_1, User Module PWM8
   195                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
   196  0558  2C 00             	db		2ch, 00h		;PWM8_1_DIG_BasicFunction (DCB03FN)
   197  055A  2D 00             	db		2dh, 00h		;PWM8_1_DIG_Input (DCB03IN)
   198  055C  2E 00             	db		2eh, 00h		;PWM8_1_DIG_Output (DCB03OU)
   199  055E  FF                	db		ffh
   200                          
   201                          ;  Instance name Counter16_1, User Module Counter16
   202                          ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
   203                          ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
   204                          ;  Instance name PWM8_1, User Module PWM8
   205                          ;       Instance name PWM8_1, Block Name PWM8(DCB03)
   206  055F  FF                	db		ffh
   207  0560                    UnloadConfigTBL_Total_Bank0:
   208                          ;  Block DBB00
   209  0560  23 00             	db		23h, 00h		; CONTROL_0 register (DBB00CR0)
   210                          ;  Block DBB01
   211  0562  27 00             	db		27h, 00h		; CONTROL_0 register (DBB01CR0)
   212                          ;  Block DCB02
   213  0564  2B 00             	db		2bh, 00h		; CONTROL_0 register (DCB02CR0)
   214                          ;  Block DCB03
   215  0566  2F 00             	db		2fh, 00h		; CONTROL_0 register (DCB03CR0)
   216                          ;  Block ACE00
   217                          ;  Block ASE10
   218                          ;  Block ACE01
   219                          ;  Block ASE11
   220  0568  FF                	db		ffh
   221  0569                    UnloadConfigTBL_Total_Bank1:
   222                          ;  Block DBB00
   223  0569  20 00             	db		20h, 00h		; DIG_BasicFunction register (DBB00FN)
   224  056B  21 00             	db		21h, 00h		; DIG_Input register (DBB00IN)
   225  056D  22 00             	db		22h, 00h		; DIG_Output register (DBB00OU)
   226                          ;  Block DBB01
   227  056F  24 00             	db		24h, 00h		; DIG_BasicFunction register (DBB01FN)
   228  0571  25 00             	db		25h, 00h		; DIG_Input register (DBB01IN)
   229  0573  26 00             	db		26h, 00h		; DIG_Output register (DBB01OU)
   230                          ;  Block DCB02
   231  0575  28 00             	db		28h, 00h		; DIG_BasicFunction register (DCB02FN)
   232  0577  29 00             	db		29h, 00h		; DIG_Input register (DCB02IN)
   233  0579  2A 00             	db		2ah, 00h		; DIG_Output register (DCB02OU)
   234                          ;  Block DCB03
   235  057B  2C 00             	db		2ch, 00h		; DIG_BasicFunction register (DCB03FN)
   236  057D  2D 00             	db		2dh, 00h		; DIG_Input register (DCB03IN)
   237  057F  2E 00             	db		2eh, 00h		; DIG_Output register (DCB03OU)
   238                          ;  Block ACE00
   239                          ;  Block ASE10
   240                          ;  Block ACE01
   241                          ;  Block ASE11
   242  0581  FF                	db		ffh
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
     UnloadConfigTBL_Total_Bank0 0560       UnloadConfigTBL_Total_Bank1 0569  UnloadConfigTBL_ADC_Config_Bank0 04B6  
  LoadConfigTBL_ADC_Config_Bank0 04A8  UnloadConfigTBL_ADC_Config_Bank1 04B9    LoadConfigTBL_ADC_Config_Bank1 04AF  
 ReloadConfigTBL_dyn_test2_Bank0 051F   ReloadConfigTBL_dyn_test2_Bank1 0532   LoadConfigTBL_dyn_test2_Ordered 0B7B  
 UnloadConfigTBL_dyn_test2_Bank0 0545     LoadConfigTBL_dyn_test2_Bank0 04C1   UnloadConfigTBL_dyn_test2_Bank1 054C  
   LoadConfigTBL_dyn_test2_Bank1 04F0                     FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 0865                    
      + 0865                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  dyn_test2Dynamic.inc
     5                          ;
     6                          ;  Data: 29 October, 2001
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains equates that are used to refer to the active configuration
    11                          ;  status variable.
    12                          ;  
    13                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    14                          ;  Edits to this file will not be preserved.
    15                          ;
    16  0001                    dyn_test2_BIT:	equ	 1h
    17  0000                    dyn_test2_ORD:	equ	 0
    18  0000                    dyn_test2_ADDR_OFF:	equ	 0
    19  0002                    ADC_Config_BIT:	equ	 2h
    20  0001                    ADC_Config_ORD:	equ	 1
    21  0000                    ADC_Config_ADDR_OFF:	equ	 0
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  dyn_test2Dynamic.asm
     5                          ;
     6                          ;  Data: 11 June, 2004
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains functions that can be used to test the state of the 
    11                          ;  currently active configuration.
    12                          ;  
    13                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    14                          ;  Edits to this file will not be preserved.
    15                          ;
    16                          include "m8c.inc"
    17                          include "memory.inc"
    18                          include "PSoCDynamic.inc"
    19                          export Isdyn_test2Loaded
    20                          export _Isdyn_test2Loaded
    21                          export IsADC_ConfigLoaded
    22                          export _IsADC_ConfigLoaded
    23  0865                    Isdyn_test2Loaded:
    24  0865                    _Isdyn_test2Loaded:
    25                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
    26  0865  50 00             	mov		a, 0
    27  0867  47 C6  01         	tst		[ACTIVE_CONFIG_STATUS+dyn_test2_ADDR_OFF], dyn_test2_BIT
    28  086A  A003              	jz		dyn_test2IsNotLoaded
    29  086C  50 01             	mov		a, 1
    30  086E                    dyn_test2IsNotLoaded:
    31  086E  7F                	ret
    32                          
    33  086F                    IsADC_ConfigLoaded:
    34  086F                    _IsADC_ConfigLoaded:
    35                          	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
    36  086F  50 00             	mov		a, 0
    37  0871  47 C6  02         	tst		[ACTIVE_CONFIG_STATUS+ADC_Config_ADDR_OFF], ADC_Config_BIT
    38  0874  A003              	jz		ADC_ConfigIsNotLoaded
    39  0876  50 01             	mov		a, 1
    40  0878                    ADC_ConfigIsNotLoaded:
    41  0878  7F                	ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
         Isdyn_test2Loaded 0865         ADC_Config_ADDR_OFF 0000         _IsADC_ConfigLoaded 086F                      HITECH 0002  
        _Isdyn_test2Loaded 0865        dyn_test2IsNotLoaded 086E       ADC_ConfigIsNotLoaded 0878   SYSTEM_LARGE_MEMORY_MODEL 0000  
                 TOOLCHAIN 0002               dyn_test2_BIT 0001          IsADC_ConfigLoaded 086F        ACTIVE_CONFIG_STATUS 00C6  
        dyn_test2_ADDR_OFF 0000              ADC_Config_BIT 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  dyn_test2Dynamic.inc
     5                          ;
     6                          ;  Data: 29 October, 2001
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains equates that are used to refer to the active configuration
    11                          ;  status variable.
    12                          ;  
    13                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    14                          ;  Edits to this file will not be preserved.
    15                          ;
    16  0001                    dyn_test2_BIT:	equ	 1h
    17  0000                    dyn_test2_ORD:	equ	 0
    18  0000                    dyn_test2_ADDR_OFF:	equ	 0
    19  0002                    ADC_Config_BIT:	equ	 2h
    20  0001                    ADC_Config_ORD:	equ	 1
    21  0000                    ADC_Config_ADDR_OFF:	equ	 0
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0879                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0879                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0879                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0879                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0879                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0879                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0879                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0879                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0879                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0879                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0879                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0879                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0879                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0879                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  0879                        endm
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  dyn_test2INT.asm
     5                          ;
     6                          ;  Data: 29 October, 2001
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains dispatch code that ensures that interrupt vectors are 
    11                          ;  serviced by the appropriate ISR depending on the currently active
    12                          ;  configuration.
    13                          ;  
    14                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    15                          ;  Edits to this file will not be preserved.
    16                          ;
    17                          include "PSoCDynamic.inc"
    18                          include "m8c.inc"
    19                          export	Dispatch_INTERRUPT_11
    20                          
    21                          
    22  0879                    Dispatch_INTERRUPT_11:
    23  0879  08                	push	a
    24  087A  50 00             	mov		a,0
    25  087C  47 C6  02         	tst		[ACTIVE_CONFIG_STATUS+ADC_Config_ADDR_OFF], ADC_Config_BIT
    26  087F  B00C              	jnz		Dispatch_INTERRUPT_11_END
    27  0881  50 04             	mov		a,4
    28  0883  47 C6  01         	tst		[ACTIVE_CONFIG_STATUS+dyn_test2_ADDR_OFF], dyn_test2_BIT
    29  0886  B005              	jnz		Dispatch_INTERRUPT_11_END
    30  0888  18                	pop		a
    31  0889  7E                	reti
    35  088C                    Dispatch_INTERRUPT_11_END:
    36  088C  E001              	jacc	Dispatch_INTERRUPT_11_TBL
    37  088E                    Dispatch_INTERRUPT_11_TBL:
    38  088E  18                	pop		a
    39  088F  7D 07F8           	ljmp	_TX8_2_ISR
    40  0892  18                	pop		a
    41  0893  7D 0737           	ljmp	_PWM8_1_ISR
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
      ADC_Config_ADDR_OFF 0000                _PWM8_1_ISR 0737      Dispatch_INTERRUPT_11 0879                 _TX8_2_ISR 07F8  
            dyn_test2_BIT 0001  Dispatch_INTERRUPT_11_END 088C  Dispatch_INTERRUPT_11_TBL 088E       ACTIVE_CONFIG_STATUS 00C6  
       dyn_test2_ADDR_OFF 0000             ADC_Config_BIT 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0898                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0898                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0898                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0898                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0898                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0898                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0898                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0898                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0898                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0898                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0898                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0898                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0898                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0898                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  0898                        endm
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;
     4                          ;  PSoCGPIOINT.inc
     5                          ;
     6                          ;  Data: 29 October, 2001
     7                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     8                          ;
     9                          ;  This file is generated by the Device Editor on Application Generation.
    10                          ;  It contains equates that are useful in writing code relating to GPIO
    11                          ;  related interrupts.
    12                          ;  
    13                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    14                          ;  Edits to this file will not be preserved.
    15                          ;
    16                          ; int4 address and mask equates
    17  0004                    int4_Data_ADDR:	equ	4h
    18  0104                    int4_DriveMode_0_ADDR:	equ	104h
    19  0105                    int4_DriveMode_1_ADDR:	equ	105h
    20  0007                    int4_DriveMode_2_ADDR:	equ	7h
    21  0006                    int4_GlobalSelect_ADDR:	equ	6h
    22  0106                    int4_IntCtrl_0_ADDR:	equ	106h
    23  0107                    int4_IntCtrl_1_ADDR:	equ	107h
    24  0005                    int4_IntEn_ADDR:	equ	5h
    25  0020                    int4_MASK:	equ	20h
    26                          ; int3 address and mask equates
    27  0004                    int3_Data_ADDR:	equ	4h
    28  0104                    int3_DriveMode_0_ADDR:	equ	104h
    29  0105                    int3_DriveMode_1_ADDR:	equ	105h
    30  0007                    int3_DriveMode_2_ADDR:	equ	7h
    31  0006                    int3_GlobalSelect_ADDR:	equ	6h
    32  0106                    int3_IntCtrl_0_ADDR:	equ	106h
    33  0107                    int3_IntCtrl_1_ADDR:	equ	107h
    34  0005                    int3_IntEn_ADDR:	equ	5h
    35  0008                    int3_MASK:	equ	8h
    36                          ; led3 address and mask equates
    37  0000                    led3_Data_ADDR:	equ	0h
    38  0100                    led3_DriveMode_0_ADDR:	equ	100h
    39  0101                    led3_DriveMode_1_ADDR:	equ	101h
    40  0003                    led3_DriveMode_2_ADDR:	equ	3h
    41  0002                    led3_GlobalSelect_ADDR:	equ	2h
    42  0102                    led3_IntCtrl_0_ADDR:	equ	102h
    43  0103                    led3_IntCtrl_1_ADDR:	equ	103h
    44  0001                    led3_IntEn_ADDR:	equ	1h
    45  0002                    led3_MASK:	equ	2h
    46                          ; int13 address and mask equates
    47  0004                    int13_Data_ADDR:	equ	4h
    48  0104                    int13_DriveMode_0_ADDR:	equ	104h
    49  0105                    int13_DriveMode_1_ADDR:	equ	105h
    50  0007                    int13_DriveMode_2_ADDR:	equ	7h
    51  0006                    int13_GlobalSelect_ADDR:	equ	6h
    52  0106                    int13_IntCtrl_0_ADDR:	equ	106h
    53  0107                    int13_IntCtrl_1_ADDR:	equ	107h
    54  0005                    int13_IntEn_ADDR:	equ	5h
    55  0008                    int13_MASK:	equ	8h
    56                          ; in5 address and mask equates
    57  0000                    in5_Data_ADDR:	equ	0h
    58  0100                    in5_DriveMode_0_ADDR:	equ	100h
    59  0101                    in5_DriveMode_1_ADDR:	equ	101h
    60  0003                    in5_DriveMode_2_ADDR:	equ	3h
    61  0002                    in5_GlobalSelect_ADDR:	equ	2h
    62  0102                    in5_IntCtrl_0_ADDR:	equ	102h
    63  0103                    in5_IntCtrl_1_ADDR:	equ	103h
    64  0001                    in5_IntEn_ADDR:	equ	1h
    65  0020                    in5_MASK:	equ	20h
    66                          ; led7 address and mask equates
    67  0000                    led7_Data_ADDR:	equ	0h
    68  0100                    led7_DriveMode_0_ADDR:	equ	100h
    69  0101                    led7_DriveMode_1_ADDR:	equ	101h
    70  0003                    led7_DriveMode_2_ADDR:	equ	3h
    71  0002                    led7_GlobalSelect_ADDR:	equ	2h
    72  0102                    led7_IntCtrl_0_ADDR:	equ	102h
    73  0103                    led7_IntCtrl_1_ADDR:	equ	103h
    74  0001                    led7_IntEn_ADDR:	equ	1h
    75  0080                    led7_MASK:	equ	80h
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;;*****************************************************************************
     4                          ;;*****************************************************************************
     5                          ;;  FILENAME: PSoCGPIOINT.asm
     6                          ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
     7                          ;;  @PSOC_VERSION
     8                          ;;
     9                          ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
    10                          ;;-----------------------------------------------------------------------------
    11                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    12                          ;;*****************************************************************************
    13                          ;;*****************************************************************************
    14                          
    15                          include "m8c.inc"
    16                          include "PSoCGPIOINT.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export   PSoC_GPIO_ISR
    22                          
    23                          
    24                          ;-----------------------------------------------
    25                          ;  Constant Definitions
    26                          ;-----------------------------------------------
    27                          
    28                          
    29                          ;-----------------------------------------------
    30                          ; Variable Allocation
    31                          ;-----------------------------------------------
    32                          	
    33                          
    34                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    35                          ;---------------------------------------------------
    36                          ; Insert your custom declarations below this banner
    37                          ;---------------------------------------------------
    38                          
    39                          ;---------------------------------------------------
    40                          ; Insert your custom declarations above this banner
    41                          ;---------------------------------------------------
    42                          ;@PSoC_UserCode_END@ (Do not change this line.)
    43                          
    44                          
    45                          ;-----------------------------------------------------------------------------
    46                          ;  FUNCTION NAME: PSoC_GPIO_ISR
    47                          ;
    48                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    49                          ;
    50                          ;-----------------------------------------------------------------------------
    51                          ;
    52  0898                    PSoC_GPIO_ISR:
    53                          
    54                          
    55                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    56                             ;---------------------------------------------------
    57                             ; Insert your custom code below this banner
    58                             ;---------------------------------------------------
    59  0898  7D 09D5           	ljmp _MyGpioISR_int3
    60                             ;---------------------------------------------------
    61                             ; Insert your custom code above this banner
    62                             ;---------------------------------------------------
    63                             ;@PSoC_UserCode_END@ (Do not change this line.)
    64                          
    65  089B  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
           PSoC_GPIO_ISR 0898           _MyGpioISR_int3 09D5  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:14 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283+ 0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 089C                    
      + 089C                    ; end of file m8c.inc
      + 089C                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_1.inc
;;   Version: 2
      +                         .60, Updated on 2012/3/2 at 9:15:10
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the PWM8 user module interface
;;--------------------------------------------
      +                         ---------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
      +                         
;;*****************************************************************************
;;*****************
      +                         ************************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  089C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_1.inc
     4                          ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_1 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_1_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    21  00E1                    PWM8_1_INT_REG:                            equ 0x0e1
    22  0008                    PWM8_1_INT_MASK:                           equ 0x08
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_1 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  001C                    PWM8_1_PERIOD:                             equ 0x1c
    30  000E                    PWM8_1_PULSE_WIDTH:                        equ 0x0e
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_1
    35                          ;--------------------------------------------------
    36                          
    37  002C                    PWM8_1_COUNTER_REG:                    equ 0x2c   ; DR0 Count register
    38  002D                    PWM8_1_PERIOD_REG:                     equ 0x2d   ; DR1 Period register
    39  002E                    PWM8_1_COMPARE_REG:                    equ 0x2e   ; DR2 Compare register
    40  002F                    PWM8_1_CONTROL_REG:                    equ 0x2f   ; Control register
    41  002C                    PWM8_1_FUNC_REG:                       equ 0x2c   ; Function register
    42  002D                    PWM8_1_INPUT_REG:                      equ 0x2d   ; Input register
    43  002E                    PWM8_1_OUTPUT_REG:                     equ 0x2e   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_1 Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_1_Start_M
    51                             or    reg[PWM8_1_CONTROL_REG],  PWM8_1_CONTROL_REG_START_BIT
    52  089C                       endm
    53                          
    54                             macro PWM8_1_Stop_M
    55                             and   reg[PWM8_1_CONTROL_REG], ~PWM8_1_CONTROL_REG_START_BIT
    56  089C                       endm
    57                          
    58                             macro PWM8_1_EnableInt_M
    59                             M8C_EnableIntMask PWM8_1_INT_REG, PWM8_1_INT_MASK
    60  089C                       endm
    61                          
    62                             macro PWM8_1_DisableInt_M
    63                             M8C_DisableIntMask PWM8_1_INT_REG, PWM8_1_INT_MASK
    64                             endm
      + 089C                    
      + 089C                    ; end of file PWM8_1.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  089C                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  089C                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  089C                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  089C                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  089C                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  089C                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  089C                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  089C                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  089C                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  089C                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  089C                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  089C                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  089C                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  089C                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  089C                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  089C                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408  089C                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_1.asm
     4                          ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "PWM8_1.inc"
    24                          include "memory.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  PWM8_1_EnableInt
    30                          export _PWM8_1_EnableInt
    31                          export  PWM8_1_DisableInt
    32                          export _PWM8_1_DisableInt
    33                          export  PWM8_1_Start
    34                          export _PWM8_1_Start
    35                          export  PWM8_1_Stop
    36                          export _PWM8_1_Stop
    37                          export  PWM8_1_WritePeriod
    38                          export _PWM8_1_WritePeriod
    39                          export  PWM8_1_WritePulseWidth
    40                          export _PWM8_1_WritePulseWidth
    41                          export  PWM8_1_bReadPulseWidth
    42                          export _PWM8_1_bReadPulseWidth
    43                          export  PWM8_1_bReadCounter
    44                          export _PWM8_1_bReadCounter
    45                          
    46                          ; The following functions are deprecated and subject to omission in future releases
    47                          ;
    48                          export  bPWM8_1_ReadPulseWidth    ; deprecated
    49                          export _bPWM8_1_ReadPulseWidth    ; deprecated
    50                          export  bPWM8_1_ReadCounter       ; deprecated
    51                          export _bPWM8_1_ReadCounter       ; deprecated
    52                          
    53                          
    54                          AREA dyn_test2_RAM (RAM,REL)
    55                          
    56                          ;-----------------------------------------------
    57                          ;  Constant Definitions
    58                          ;-----------------------------------------------
    59                          
    60  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    61                          
    62                          
    63                          ;-----------------------------------------------
    64                          ; Variable Allocation
    65                          ;-----------------------------------------------
    66                          
    67                          
    68                          AREA UserModules (ROM, REL)
    69                          
    70                          .SECTION
    71                          ;-----------------------------------------------------------------------------
    72                          ;  FUNCTION NAME: PWM8_1_EnableInt
    73                          ;
    74                          ;  DESCRIPTION:
    75                          ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
    76                          ;     associated with this User Module. This function has no effect until and
    77                          ;     unless the global interrupts are enabled (for example by using the
    78                          ;     macro M8C_EnableGInt).
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:    None.
    82                          ;  RETURNS:      Nothing.
    83                          ;  SIDE EFFECTS:
    84                          ;    The A and X registers may be modified by this or future implementations
    85                          ;    of this function.  The same is true for all RAM page pointer registers in
    86                          ;    the Large Memory Model.  When necessary, it is the calling function's
    87                          ;    responsibility to perserve their values across calls to fastcall16 
    88                          ;    functions.
    89                          ;
    90  06F5                     PWM8_1_EnableInt:
    91  06F5                    _PWM8_1_EnableInt:
    92                             RAM_PROLOGUE RAM_USE_CLASS_1
    93  06F5  43 E1 08             PWM8_1_EnableInt_M
    94                             RAM_EPILOGUE RAM_USE_CLASS_1
    95  06F8  7F                   ret
    96                          
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: PWM8_1_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this PWM's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS:
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  06F9                     PWM8_1_DisableInt:
   119  06F9                    _PWM8_1_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  06F9  41 E1 F7             PWM8_1_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  06FC  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: PWM8_1_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     PWM will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS:
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  06FD                     PWM8_1_Start:
   148  06FD                    _PWM8_1_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  06FD  43 2F 01             PWM8_1_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  0700  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: PWM8_1_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables PWM operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS:
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  0701                     PWM8_1_Stop:
   176  0701                    _PWM8_1_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  0701  41 2F FE             PWM8_1_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  0704  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: PWM8_1_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the PWM user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;    
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  0705                     PWM8_1_WritePeriod:
   206  0705                    _PWM8_1_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  0705  60 2D                mov   reg[PWM8_1_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  0707  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: PWM8_1_WritePulseWidth
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS:
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  0708                     PWM8_1_WritePulseWidth:
   233  0708                    _PWM8_1_WritePulseWidth:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  0708  60 2E                mov   reg[PWM8_1_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  070A  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS:
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  070B                     PWM8_1_bReadPulseWidth:
   260  070B                    _PWM8_1_bReadPulseWidth:
   261  070B                     bPWM8_1_ReadPulseWidth:                         ; this name deprecated
   262  070B                    _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  070B  5D 2E                mov   A, reg[PWM8_1_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  070D  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: PWM8_1_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   286                          ;     2) The A and X registers may be modified by this or future implementations
   287                          ;        of this function.  The same is true for all RAM page pointer registers in
   288                          ;        the Large Memory Model.  When necessary, it is the calling function's
   289                          ;        responsibility to perserve their values across calls to fastcall16 
   290                          ;        functions.
   291                          ;
   292  070E                     PWM8_1_bReadCounter:
   293  070E                    _PWM8_1_bReadCounter:
   294  070E                     bPWM8_1_ReadCounter:                            ; this name deprecated
   295  070E                    _bPWM8_1_ReadCounter:                            ; this name deprecated
   296                          
   297  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   298  0001                       bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
   299  0002                       wCounter:               EQU   2               ; Frame offset to temp Count   store
   300  0003                       STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
   301                          
   302                             RAM_PROLOGUE RAM_USE_CLASS_2
   303  070E  4F                   mov   X, SP                                   ; X <- stack frame pointer
   304  070F  5D 2E                mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
   305  0711  08                   push  A                                       ;
   306  0712  41 2F FE             PWM8_1_Stop_M                                 ; Disable (stop) the PWM
   307  0715  71 10                M8C_SetBank1                                  ;
   308  0717  5D 2D                mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
   309  0719  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   310                                                                           ;   hold the clock low:
   311  071A  62 2D 00             mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
   312  071D  70 EF                M8C_SetBank0
   313                                                                           ; Extract the Count via DR2 register
   314  071F  5D 2C                mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
   315  0721  5D 2E                mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
   316  0723  08                   push  A                                       ;  -stack frame is now 3 bytes
   317  0724  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   318  0726  60 2E                mov   reg[PWM8_1_COMPARE_REG], A
   319  0728  71 10                M8C_SetBank1                                  ; Restore the PWM operation:
   320  072A  52 01                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   321  072C  60 2D                mov   reg[PWM8_1_INPUT_REG], A                ;
   322  072E  70 EF                M8C_SetBank0                                  ;
   323  0730  43 2F 01             PWM8_1_Start_M                                ;   then re-enable the PWM.
   324  0733  18                   pop   A                                       ; Setup the return value
   325  0734  38 FE                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   326                             RAM_EPILOGUE RAM_USE_CLASS_2
   327  0736  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:14 2012
      PWM8_1_WritePulseWidth 0708           bPWM8_1_ReadCounter 070E           PWM8_1_bReadCounter 070E  
     _PWM8_1_WritePulseWidth 0708        bPWM8_1_ReadPulseWidth 070B                   PWM8_1_Stop 0701  
           bOrigClockSetting 0001            PWM8_1_COMPARE_REG 002E       _bPWM8_1_ReadPulseWidth 070B  
                      HITECH 0002        PWM8_1_bReadPulseWidth 070B            PWM8_1_CONTROL_REG 002F  
                _PWM8_1_Stop 0701              PWM8_1_INPUT_REG 002D            PWM8_1_COUNTER_REG 002C  
              INPUT_REG_NULL 0000     SYSTEM_LARGE_MEMORY_MODEL 0000       _PWM8_1_bReadPulseWidth 070B  
                PWM8_1_Start 06FD             PWM8_1_DisableInt 06F9  PWM8_1_CONTROL_REG_START_BIT 0001  
                   TOOLCHAIN 0002             bOrigCompareValue 0000            PWM8_1_WritePeriod 0705  
             RAM_USE_CLASS_1 0001               RAM_USE_CLASS_2 0002               RAM_USE_CLASS_3 0004  
             RAM_USE_CLASS_4 0008               PWM8_1_INT_MASK 0008            _PWM8_1_DisableInt 06F9  
            PWM8_1_EnableInt 06F5              STACK_FRAME_SIZE 0003                 _PWM8_1_Start 06FD  
        _bPWM8_1_ReadCounter 070E                PWM8_1_INT_REG 00E1             _PWM8_1_EnableInt 06F5  
        _PWM8_1_bReadCounter 070E                 FLAG_XIO_MASK 0010             PWM8_1_PERIOD_REG 002D  
  SYSTEM_IDXPG_TRACKS_IDX_PP 0001           _PWM8_1_WritePeriod 0705  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 089C                    
      + 089C                    ; end of file m8c.inc
      + 089C                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_1.inc
;;   Version: 2
      +                         .60, Updated on 2012/3/2 at 9:15:10
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the PWM8 user module interface
;;--------------------------------------------
      +                         ---------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
      +                         
;;*****************************************************************************
;;*****************
      +                         ************************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  089C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_1.inc
     4                          ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_1 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_1_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    21  00E1                    PWM8_1_INT_REG:                            equ 0x0e1
    22  0008                    PWM8_1_INT_MASK:                           equ 0x08
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_1 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  001C                    PWM8_1_PERIOD:                             equ 0x1c
    30  000E                    PWM8_1_PULSE_WIDTH:                        equ 0x0e
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_1
    35                          ;--------------------------------------------------
    36                          
    37  002C                    PWM8_1_COUNTER_REG:                    equ 0x2c   ; DR0 Count register
    38  002D                    PWM8_1_PERIOD_REG:                     equ 0x2d   ; DR1 Period register
    39  002E                    PWM8_1_COMPARE_REG:                    equ 0x2e   ; DR2 Compare register
    40  002F                    PWM8_1_CONTROL_REG:                    equ 0x2f   ; Control register
    41  002C                    PWM8_1_FUNC_REG:                       equ 0x2c   ; Function register
    42  002D                    PWM8_1_INPUT_REG:                      equ 0x2d   ; Input register
    43  002E                    PWM8_1_OUTPUT_REG:                     equ 0x2e   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_1 Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_1_Start_M
    51                             or    reg[PWM8_1_CONTROL_REG],  PWM8_1_CONTROL_REG_START_BIT
    52  089C                       endm
    53                          
    54                             macro PWM8_1_Stop_M
    55                             and   reg[PWM8_1_CONTROL_REG], ~PWM8_1_CONTROL_REG_START_BIT
    56  089C                       endm
    57                          
    58                             macro PWM8_1_EnableInt_M
    59                             M8C_EnableIntMask PWM8_1_INT_REG, PWM8_1_INT_MASK
    60  089C                       endm
    61                          
    62                             macro PWM8_1_DisableInt_M
    63                             M8C_DisableIntMask PWM8_1_INT_REG, PWM8_1_INT_MASK
    64                             endm
      + 089C                    
      + 089C                    ; end of file PWM8_1.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  089C                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  089C                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  089C                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  089C                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  089C                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  089C                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  089C                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  089C                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  089C                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  089C                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  089C                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  089C                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  089C                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  089C                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  089C                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  089C                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408  089C                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_1INT.asm
     4                          ;;   Version: 2.60, Updated on 2012/3/2 at 9:15:10
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "PWM8_1.inc"
    15                          include "memory.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _PWM8_1_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _PWM8_1_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0737                    _PWM8_1_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0737  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012
                 _PWM8_1_ISR 0737                        HITECH 0002                     TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 089C                    
      + 089C                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  089C                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  089C                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  089C                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  089C                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  089C                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  089C                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  089C                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  089C                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  089C                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  089C                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  089C                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  089C                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  089C                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  089C                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  089C                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  089C                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 089C                    
      + 089C                    ; end of file Memory.inc
      + 089C                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: TX8_2.inc
;;   Version: 3.
      +                         50, Updated on 2012/3/2 at 9:15:33
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION:  Asse
      +                         mbler declarations for the TX8 user module.
;;------------------------------------------------------
      +                         -----------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*******
      +                         **********************************************************************
;;***************************
      +                         **************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413+ 00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  089C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2.inc
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the TX8 user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          ;---------------------------------------------------
    16                          ; Constants for TX8_2 API's
    17                          ;---------------------------------------------------
    18                          
    19                          ;mask value for global int reg bit for TX instance
    20  0008                    TX8_2_bINT_MASK:        equ 08h
    21                          ;TX8 interrupt address
    22  00E1                    TX8_2_INT_REG:          equ 0e1h
    23                          
    24                          ; Old equate, will be removed in future release, Do not use.
    25  0008                    bTX8_2_INT_MASK:        equ 08h
    26                          
    27                          
    28                          ;------------------------------------
    29                          ;  Transmitter Parity masks
    30                          ;------------------------------------
    31  0000                    TX8_2_PARITY_NONE:       equ   00h
    32  0002                    TX8_2_PARITY_EVEN:       equ   02h
    33  0006                    TX8_2_PARITY_ODD:        equ   06h
    34                          
    35                          ;------------------------------------
    36                          ;  Transmitter Status Register masks
    37                          ;------------------------------------
    38  0020                    TX8_2_TX_COMPLETE:        equ   20h
    39  0010                    TX8_2_TX_BUFFER_EMPTY:    equ   10h
    40                          
    41                          
    42  0000                    TX8_2_INT_MODE_TX_REG_EMPTY:                 equ 0x00
    43  0001                    TX8_2_INT_MODE_TX_COMPLETE:                  equ 0x01
    44                          
    45                          ; Do not use! old style equates.  Will be moved
    46                          ; in future versions.
    47  0000                    TX8_PARITY_NONE:           equ   00h
    48  0002                    TX8_PARITY_EVEN:           equ   02h
    49  0006                    TX8_PARITY_ODD:            equ   06h
    50  0020                    TX8_TX_COMPLETE:           equ   20h
    51  0010                    TX8_TX_BUFFER_EMPTY:       equ   10h
    52                          
    53                          ;----------------------------------------------------
    54                          ;  Register Address Constants for TX8_2
    55                          ;----------------------------------------------------
    56  002F                    TX8_2_CONTROL_REG:  equ 2fh                      ; Control register
    57  002C                    TX8_2_TX_SHIFT_REG: equ 2ch                      ; TX Shift Register register
    58  002D                    TX8_2_TX_BUFFER_REG:    equ 2dh                  ; TX Buffer Register
    59  002C                    TX8_2_FUNC_REG: equ 2ch                          ; Function register
    60  002D                    TX8_2_INPUT_REG:    equ 2dh                      ; Input register
    61  002E                    TX8_2_OUTPUT_REG:   equ 2eh                      ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2.asm
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: TX8 User Module software implementation file.
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          ;-----------------------------------------------
    23                          ; include instance specific register definitions
    24                          ;-----------------------------------------------
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "TX8_2.inc"
    28                          
    29                          area UserModules (ROM, REL)
    30                          ;-----------------------------------------------
    31                          ;  Global Symbols
    32                          ;-----------------------------------------------
    33                          export   TX8_2_SetTxIntMode
    34                          export  _TX8_2_SetTxIntMode
    35                          export   TX8_2_EnableInt
    36                          export  _TX8_2_EnableInt
    37                          export   TX8_2_DisableInt
    38                          export  _TX8_2_DisableInt
    39                          export   TX8_2_Start
    40                          export  _TX8_2_Start
    41                          export   TX8_2_Stop
    42                          export  _TX8_2_Stop
    43                          export   TX8_2_SendData
    44                          export  _TX8_2_SendData
    45                          export   TX8_2_bReadTxStatus
    46                          export  _TX8_2_bReadTxStatus
    47                          
    48                          // Old labels, will be removed in future release
    49                          // Do Not Use.
    50                          export   bTX8_2_ReadTxStatus
    51                          export  _bTX8_2_ReadTxStatus
    52                          
    53                          ;-----------------------------------------------
    54                          ;  High Level TX functions
    55                          ;-----------------------------------------------
    56                          export  TX8_2_PutSHexByte
    57                          export _TX8_2_PutSHexByte
    58                          export  TX8_2_PutSHexInt
    59                          export _TX8_2_PutSHexInt
    60                          
    61                          export  TX8_2_CPutString
    62                          export _TX8_2_CPutString
    63                          export  TX8_2_PutString
    64                          export _TX8_2_PutString
    65                          export  TX8_2_PutChar
    66                          export _TX8_2_PutChar
    67                          export  TX8_2_Write
    68                          export _TX8_2_Write
    69                          export  TX8_2_CWrite
    70                          export _TX8_2_CWrite
    71                          export  TX8_2_PutCRLF
    72                          export _TX8_2_PutCRLF 
    73                          
    74                          ;-----------------------------------------------
    75                          ;  EQUATES
    76                          ;-----------------------------------------------
    77  0001                    bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
    78  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
    79                          
    80                          AREA UserModules (ROM, REL)
    81                          
    82                          .SECTION
    83                          ;-----------------------------------------------------------------------------
    84                          ;  FUNCTION NAME: TX8_2_EnableInt
    85                          ;
    86                          ;  DESCRIPTION:
    87                          ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
    88                          ;     bit associated with this User Module. Remember to call the global interrupt
    89                          ;     enable function by using the macro: M8C_EnableGInt.
    90                          ;
    91                          ;-----------------------------------------------------------------------------
    92                          ;
    93                          ;  ARGUMENTS: none
    94                          ;
    95                          ;  RETURNS: none
    96                          ;
    97                          ;  SIDE EFFECTS:
    98                          ;    The A and X registers may be modified by this or future implementations
    99                          ;    of this function.  The same is true for all RAM page pointer registers in
   100                          ;    the Large Memory Model.  When necessary, it is the calling function's
   101                          ;    responsibility to perserve their values across calls to fastcall16 
   102                          ;    functions.
   103                          ;
   104  0738                     TX8_2_EnableInt:
   105  0738                    _TX8_2_EnableInt:
   106                             RAM_PROLOGUE RAM_USE_CLASS_1
   107  0738  43 E1 08             M8C_EnableIntMask  TX8_2_INT_REG, TX8_2_bINT_MASK
   108                             RAM_EPILOGUE RAM_USE_CLASS_1
   109  073B  7F                   ret
   110                          .ENDSECTION
   111                          
   112                          .SECTION
   113                          ;-----------------------------------------------------------------------------
   114                          ;  FUNCTION NAME: TX8_2_DisableInt
   115                          ;
   116                          ;  DESCRIPTION:
   117                          ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
   118                          ;     associated with this User Module.
   119                          ;
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:  none
   123                          ;
   124                          ;  RETURNS:  none
   125                          ;
   126                          ;  SIDE EFFECTS:
   127                          ;    The A and X registers may be modified by this or future implementations
   128                          ;    of this function.  The same is true for all RAM page pointer registers in
   129                          ;    the Large Memory Model.  When necessary, it is the calling function's
   130                          ;    responsibility to perserve their values across calls to fastcall16 
   131                          ;    functions.
   132                          ;
   133  073C                     TX8_2_DisableInt:
   134  073C                    _TX8_2_DisableInt:
   135                             RAM_PROLOGUE RAM_USE_CLASS_1
   136  073C  41 E1 F7             M8C_DisableIntMask TX8_2_INT_REG, TX8_2_bINT_MASK
   137                             RAM_EPILOGUE RAM_USE_CLASS_1
   138  073F  7F                   ret
   139                          .ENDSECTION
   140                          
   141                          .SECTION
   142                          ;-----------------------------------------------------------------------------
   143                          ;  FUNCTION NAME: TX8_2_SetTxIntMode(BYTE bTxIntMode)
   144                          ;
   145                          ;  DESCRIPTION:
   146                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   147                          ;
   148                          ;  ARGUMENTS:
   149                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   150                          ;        Passed in the A register
   151                          ;
   152                          ;  RETURNS:
   153                          ;     none.
   154                          ;
   155                          ;  SIDE EFFECTS:
   156                          ;    The A and X registers may be modified by this or future implementations
   157                          ;    of this function.  The same is true for all RAM page pointer registers in
   158                          ;    the Large Memory Model.  When necessary, it is the calling function's
   159                          ;    responsibility to perserve their values across calls to fastcall16 
   160                          ;    functions.
   161                          ;
   162                          ;  THEORY of OPERATION OR PROCEDURE:
   163                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   164                          ;     on TX register empty or TX transmit complete
   165                          ;
   166  0740                     TX8_2_SetTxIntMode:
   167  0740                    _TX8_2_SetTxIntMode:
   168                             RAM_PROLOGUE RAM_USE_CLASS_1
   169  0740  71 10                M8C_SetBank1
   170  0742  21 01                and   A, TX8_2_INT_MODE_TX_COMPLETE
   171  0744  A007                 jz    .SetModeRegEmpty
   172  0746  43 2C 10             or    REG[TX8_2_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   173  0749  70 EF                M8C_SetBank0
   174                             RAM_EPILOGUE RAM_USE_CLASS_1
   175  074B  7F                   ret
   176                          
   177  074C                    .SetModeRegEmpty:
   178  074C  41 2C EF             and   REG[TX8_2_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   179  074F  70 EF                M8C_SetBank0
   180                             RAM_EPILOGUE RAM_USE_CLASS_1
   181  0751  7F                   ret
   182                          .ENDSECTION
   183                          
   184                          .SECTION
   185                          ;-----------------------------------------------------------------------------
   186                          ;  FUNCTION NAME: TX8_2_Start(BYTE bParity)
   187                          ;
   188                          ;  DESCRIPTION:
   189                          ;     Sets the start bit and parity in the Control register of this user module.
   190                          ;     The transmitter will begin transmitting if a byte has been written into the
   191                          ;     transmit buffer.
   192                          ;
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;    BYTE bParity - parity of transmitted data.  Use defined masks.
   197                          ;
   198                          ;  RETURNS:  none
   199                          ;
   200                          ;  SIDE EFFECTS:
   201                          ;    The A and X registers may be modified by this or future implementations
   202                          ;    of this function.  The same is true for all RAM page pointer registers in
   203                          ;    the Large Memory Model.  When necessary, it is the calling function's
   204                          ;    responsibility to perserve their values across calls to fastcall16 
   205                          ;    functions.
   206                          ;
   207  0752                     TX8_2_Start:
   208  0752                    _TX8_2_Start:
   209                             RAM_PROLOGUE RAM_USE_CLASS_1
   210  0752  29 01                or    A, bfCONTROL_REG_START_BIT
   211  0754  60 2F                mov   REG[TX8_2_CONTROL_REG], A
   212                             RAM_EPILOGUE RAM_USE_CLASS_1
   213  0756  7F                   ret
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: TX8_2_Stop
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Disables TX8 operation.
   222                          ;
   223                          ;-----------------------------------------------------------------------------
   224                          ;
   225                          ;  ARGUMENTS:  none
   226                          ;
   227                          ;  RETURNS:  none
   228                          ;
   229                          ;  SIDE EFFECTS:
   230                          ;    The A and X registers may be modified by this or future implementations
   231                          ;    of this function.  The same is true for all RAM page pointer registers in
   232                          ;    the Large Memory Model.  When necessary, it is the calling function's
   233                          ;    responsibility to perserve their values across calls to fastcall16 
   234                          ;    functions.
   235                          ;
   236  0757                     TX8_2_Stop:
   237  0757                    _TX8_2_Stop:
   238                             RAM_PROLOGUE RAM_USE_CLASS_1
   239  0757  41 2F FE             and   REG[TX8_2_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   240                             RAM_EPILOGUE RAM_USE_CLASS_1
   241  075A  7F                   ret
   242                          .ENDSECTION
   243                          
   244                          .SECTION
   245                          ;-----------------------------------------------------------------------------
   246                          ;  FUNCTION NAME: TX8_2_SendData
   247                          ;
   248                          ;  DESCRIPTION:
   249                          ;     Sends one byte through serial port.
   250                          ;
   251                          ;-----------------------------------------------------------------------------
   252                          ;
   253                          ;  ARGUMENTS:
   254                          ;     BYTE  TxData - data to transmit.
   255                          ;
   256                          ;  RETURNS:
   257                          ;
   258                          ;  SIDE EFFECTS:
   259                          ;    The A and X registers may be modified by this or future implementations
   260                          ;    of this function.  The same is true for all RAM page pointer registers in
   261                          ;    the Large Memory Model.  When necessary, it is the calling function's
   262                          ;    responsibility to perserve their values across calls to fastcall16 
   263                          ;    functions.
   264                          ;
   265  075B                     TX8_2_SendData:
   266  075B                    _TX8_2_SendData:
   267                             RAM_PROLOGUE RAM_USE_CLASS_1
   268  075B  60 2D                mov REG[TX8_2_TX_BUFFER_REG], A
   269                             RAM_EPILOGUE RAM_USE_CLASS_1
   270  075D  7F                   ret
   271                          .ENDSECTION
   272                          
   273                          .SECTION
   274                          ;-----------------------------------------------------------------------------
   275                          ;  FUNCTION NAME: TX8_2_bReadTxStatus
   276                          ;
   277                          ;  DESCRIPTION:
   278                          ;     Reads the Tx Status bits in the Control/Status register.
   279                          ;
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS:
   283                          ;
   284                          ;  RETURNS:
   285                          ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
   286                          ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
   287                          ;
   288                          ;  SIDE EFFECTS:
   289                          ;    The A and X registers may be modified by this or future implementations
   290                          ;    of this function.  The same is true for all RAM page pointer registers in
   291                          ;    the Large Memory Model.  When necessary, it is the calling function's
   292                          ;    responsibility to perserve their values across calls to fastcall16 
   293                          ;    functions.
   294                          ;
   295  075E                     TX8_2_bReadTxStatus:
   296  075E                    _TX8_2_bReadTxStatus:
   297  075E                     bTX8_2_ReadTxStatus:
   298  075E                    _bTX8_2_ReadTxStatus:
   299                             RAM_PROLOGUE RAM_USE_CLASS_1
   300  075E  5D 2F                mov A,  REG[TX8_2_CONTROL_REG]
   301                             RAM_EPILOGUE RAM_USE_CLASS_1
   302  0760  7F                   ret
   303                          
   304                          .ENDSECTION
   305                          
   306                          ;-----------------------------------------------------------------------------
   307                          ;  FUNCTION NAME: TX8_2_PutSHexByte
   308                          ;
   309                          ;  DESCRIPTION:
   310                          ;     Print a byte in Hex (two characters) to the UART Tx
   311                          ;
   312                          ;  ARGUMENTS:
   313                          ;     A  => (BYTE) Data/char to be printed
   314                          ;
   315                          ;  RETURNS:
   316                          ;     none.
   317                          ;
   318                          ;  SIDE EFFECTS:
   319                          ;    The A and X registers may be modified by this or future implementations
   320                          ;    of this function.  The same is true for all RAM page pointer registers in
   321                          ;    the Large Memory Model.  When necessary, it is the calling function's
   322                          ;    responsibility to perserve their values across calls to fastcall16 
   323                          ;    functions.
   324                          ;
   325                          .LITERAL
   326  0761                    TX8_2_HEX_STR:
   327  0761  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   328                          .ENDLITERAL
   329                          
   330                          .SECTION
   331  0771                     TX8_2_PutSHexByte:
   332  0771                    _TX8_2_PutSHexByte:
   333                              RAM_PROLOGUE RAM_USE_CLASS_1
   334  0771  08                    push  A                            ; Save lower nibble
   335  0772  67                    asr   A                            ; Shift high nibble to right
   336  0773  67                    asr   A
   337  0774  67                    asr   A
   338  0775  67                    asr   A
   339  0776  21 0F                 and   A,0Fh                        ; Mask off nibble
   340  0778  FFE7                  index TX8_2_HEX_STR                ; Get Hex value
   341  077A  900F                  call  TX8_2_PutChar                ; Write data to screen
   342  077C  18                    pop   A                            ; Restore value
   343  077D  21 0F                 and   A,0Fh                        ; Mask off lower nibble
   344  077F  FFE0                  index TX8_2_HEX_STR                ; Get Hex value
   345  0781  9008                  call  TX8_2_PutChar                ; Write data to screen
   346                              RAM_EPILOGUE RAM_USE_CLASS_1
   347  0783  7F                    ret
   348                          .ENDSECTION
   349                          
   350                          .SECTION
   351                          ;-----------------------------------------------------------------------------
   352                          ;  FUNCTION NAME: TX8_2_PutSHexInt
   353                          ;
   354                          ;  DESCRIPTION:
   355                          ;     Print an Int in Hex (four characters) to UART Tx
   356                          ;
   357                          ;  ARGUMENTS:
   358                          ;     Pointer to string
   359                          ;     A  => ASB of Int
   360                          ;     X  => MSB of Int
   361                          ;
   362                          ;  RETURNS:
   363                          ;     none.
   364                          ;
   365                          ;  SIDE EFFECTS:
   366                          ;    The A and X registers may be modified by this or future implementations
   367                          ;    of this function.  The same is true for all RAM page pointer registers in
   368                          ;    the Large Memory Model.  When necessary, it is the calling function's
   369                          ;    responsibility to perserve their values across calls to fastcall16 
   370                          ;    functions.
   371                          ;
   372  0784                     TX8_2_PutSHexInt:
   373  0784                    _TX8_2_PutSHexInt:
   374                              RAM_PROLOGUE RAM_USE_CLASS_1
   375  0784  4B                    swap  A,X
   376  0785  9FEA                  call  TX8_2_PutSHexByte            ; Print MSB
   377  0787  5B                    mov   A,X                          ; Move LSB into position
   378  0788  9FE7                  call  TX8_2_PutSHexByte            ; Print LSB
   379                              RAM_EPILOGUE RAM_USE_CLASS_1
   380  078A  7F                    ret
   381                          .ENDSECTION
   382                          
   383                          .SECTION
   384                          ;-----------------------------------------------------------------------------
   385                          ;  FUNCTION NAME: TX8_2_PutChar
   386                          ;
   387                          ;  DESCRIPTION:
   388                          ;     Send character out through UART TX port.
   389                          ;
   390                          ;
   391                          ;  ARGUMENTS:
   392                          ;     A has Character to send to UART Tx Port
   393                          ;
   394                          ;  RETURNS:
   395                          ;     none
   396                          ;
   397                          ;  SIDE EFFECTS:
   398                          ;    The A and X registers may be modified by this or future implementations
   399                          ;    of this function.  The same is true for all RAM page pointer registers in
   400                          ;    the Large Memory Model.  When necessary, it is the calling function's
   401                          ;    responsibility to perserve their values across calls to fastcall16 
   402                          ;    functions.
   403                          ;
   404                             macro InLinePutChar( Source )
   405                          .BufEmptyWaitLoop:
   406                             tst REG[TX8_2_CONTROL_REG], TX8_2_TX_BUFFER_EMPTY    ; Check Tx Status
   407                             jz  .BufEmptyWaitLoop
   408                             mov REG[TX8_2_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   409  078B                       endm
   410                          
   411                          
   412  078B                     TX8_2_PutChar:
   413  078B                    _TX8_2_PutChar:
   414                             RAM_PROLOGUE RAM_USE_CLASS_1
   415                             InLinePutChar A
      + 078B                    ; Nothing to do
??0000:
      + 078B  49 2F 10          	tst	reg[47], 16
      + 078E  AFFC              	jz	??0000
      + 0790  60 2D             	mov	reg[45], a
   416                             RAM_EPILOGUE RAM_USE_CLASS_1
   417  0792  7F                   ret
   418                          
   419                          .ENDSECTION
   420                          
   421                          
   422                          ;-----------------------------------------------
   423                          ;  High Level TX functions
   424                          ;-----------------------------------------------
   425                          
   426                          
   427                          .SECTION
   428                          ;-----------------------------------------------------------------------------
   429                          ;  FUNCTION NAME: TX8_2_PutString
   430                          ;
   431                          ;  DESCRIPTION:
   432                          ;     Send String out through UART TX port.
   433                          ;
   434                          ;
   435                          ;  ARGUMENTS:
   436                          ;     Pointer to String
   437                          ;     A has MSB of string address
   438                          ;     X has LSB of string address
   439                          ;
   440                          ;  RETURNS:
   441                          ;     none
   442                          ;
   443                          ;  SIDE EFFECTS:
   444                          ;    The A and X registers may be modified by this or future implementations
   445                          ;    of this function.  The same is true for all RAM page pointer registers in
   446                          ;    the Large Memory Model.  When necessary, it is the calling function's
   447                          ;    responsibility to perserve their values across calls to fastcall16 
   448                          ;    functions.
   449                          ;          
   450                          ;    Currently only the page pointer registers listed below are modified: 
   451                          ;          IDX_PP
   452                          ;
   453  0793                     TX8_2_PutString:
   454  0793                    _TX8_2_PutString:
   455                             RAM_PROLOGUE RAM_USE_CLASS_3
   456                             RAM_SETPAGE_IDX A
   457  0793                    .PutStringLoop:
   458  0793  52 00                mov   A,[X]                             ; Get value pointed to by X
   459  0795  A006                 jz    End_PutString                     ; Check for end of string
   460  0797  9FF2                 call  TX8_2_PutChar                      ; Send character to Tx port
   461  0799  75                   inc   X                                 ; Advance pointer to next character
   462  079A  8FF8                 jmp   .PutStringLoop                     ; Get next character
   463                          
   464  079C                    End_PutString:
   465                             RAM_EPILOGUE RAM_USE_CLASS_3
   466  079C  7F                   ret
   467                          .ENDSECTION
   468                          
   469                          .SECTION
   470                          ;-----------------------------------------------------------------------------
   471                          ;  FUNCTION NAME: TX8_2_Write
   472                          ;
   473                          ;  DESCRIPTION:
   474                          ;     Send String of length X to serial port
   475                          ;
   476                          ;
   477                          ;  ARGUMENTS:
   478                          ;     Pointer to String
   479                          ;     [SP-5] Count of characters to send
   480                          ;     [SP-4] has MSB of string address
   481                          ;     [SP-3] has LSB of string address
   482                          ;
   483                          ;  RETURNS:
   484                          ;     none
   485                          ;
   486                          ;  SIDE EFFECTS:
   487                          ;    The A and X registers may be modified by this or future implementations
   488                          ;    of this function.  The same is true for all RAM page pointer registers in
   489                          ;    the Large Memory Model.  When necessary, it is the calling function's
   490                          ;    responsibility to perserve their values across calls to fastcall16 
   491                          ;    functions.
   492                          ;          
   493                          ;    Currently only the page pointer registers listed below are modified: 
   494                          ;          IDX_PP
   495                          ;
   496  FFFFFFFB                    CNT_LEN:    equ -5           ; Length of data to send
   497  FFFFFFFC                    STR_MSB:    equ -4           ; MSB pointer of string
   498  FFFFFFFD                    STR_LSB:    equ -3           ; LSB pointer of string
   499                          
   500  079D                     TX8_2_Write:
   501  079D                    _TX8_2_Write:
   502                             RAM_PROLOGUE RAM_USE_CLASS_3
   503                             RAM_SETPAGE_IDX2STK
   504  079D  4F                   mov   X, SP
   505                          
   506  079E                    .NextByteLoop:
   507  079E  52 FB                mov   A,[X+CNT_LEN]                     ; Get length of string to send
   508  07A0  A013                 jz    .End_Write
   509  07A2  7B FB                dec   [X+CNT_LEN]                       ; Decrement counter
   510                          
   511                             IF SYSTEM_LARGE_MEMORY_MODEL
   512                             mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   513                             ENDIF
   514                          
   515  07A4  59 FD                mov   X,[X+STR_LSB]                     ; Get character to send
   516                             RAM_SETPAGE_IDX A                        ; switch index pages
   517  07A6  52 00                mov   A,[X]
   518                             InLinePutChar A                          ; Send character to UART
      + 07A8                    ??0001:
      + 07A8  49 2F 10          	tst	reg[47], 16
      + 07AB  AFFC              	jz	??0001
      + 07AD  60 2D             	mov	reg[45], a
   519  07AF  4F                   mov   X, SP
   520                             RAM_SETPAGE_IDX2STK
   521  07B0  77 FD                inc   [X+STR_LSB]
   522  07B2  8FEB                 jmp   .NextByteLoop
   523                          
   524  07B4                    .End_Write:
   525                             RAM_EPILOGUE RAM_USE_CLASS_3
   526  07B4  7F                   ret
   527                          .ENDSECTION
   528                          
   529                          .SECTION
   530                          ;-----------------------------------------------------------------------------
   531                          ;  FUNCTION NAME: TX8_2_CWrite
   532                          ;
   533                          ;             WARNING WARNING NOT COMPLETE
   534                          ;
   535                          ;  DESCRIPTION:
   536                          ;     Send String of length X to serial port
   537                          ;
   538                          ;  ARGUMENTS:
   539                          ;     Pointer to String
   540                          ;     [SP-6] MSB of Count of character to send
   541                          ;     [SP-5] LSB of Count of character to send
   542                          ;     [SP-4] has MSB of string address
   543                          ;     [SP-3] has LSB of string address
   544                          ;
   545                          ;  RETURNS:
   546                          ;     none
   547                          ;
   548                          ;  SIDE EFFECTS:
   549                          ;    The A and X registers may be modified by this or future implementations
   550                          ;    of this function.  The same is true for all RAM page pointer registers in
   551                          ;    the Large Memory Model.  When necessary, it is the calling function's
   552                          ;    responsibility to perserve their values across calls to fastcall16 
   553                          ;    functions.
   554                          ;
   555  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   556  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   557  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   558  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   559                          
   560  07B5                     TX8_2_CWrite:
   561  07B5                    _TX8_2_CWrite:
   562                             RAM_PROLOGUE RAM_USE_CLASS_2
   563  07B5  4F                   mov   X,SP
   564                          
   565  07B6                    .CW_Loop:
   566                                                                       ; Check for zero counter
   567  07B6  3D FA 00             cmp   [X+CLEN_MSB],0x00
   568  07B9  B006                 jnz   .CW_WRITEIT
   569  07BB  3D FB 00             cmp   [X+CLEN_LSB],0x00
   570  07BE  A01D                 jz    .End_CWrite                         ; Leave if done
   571                          
   572  07C0                    .CW_WRITEIT:                                 ; Save pointers
   573  07C0  10                   push  X
   574  07C1  52 FC                mov   A,[X+CSTR_MSB]
   575  07C3  59 FD                mov   X,[X+CSTR_LSB]
   576  07C5  28                   romx                                     ; Get character from ROM
   577                             InLinePutChar A
      + 07C6                    ??0002:
      + 07C6  49 2F 10          	tst	reg[47], 16
      + 07C9  AFFC              	jz	??0002
      + 07CB  60 2D             	mov	reg[45], a
   578  07CD  20                   pop   X
   579                          
   580  07CE  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   581  07D1  0F FC 00             adc   [X+CSTR_MSB],0
   582                          
   583                                                                      ; Dec the counter
   584  07D4  17 FB 01             sub   [X+CLEN_LSB],0x01
   585  07D7  1F FA 00             sbb   [X+CLEN_MSB],0x00
   586                          
   587  07DA  8FDB                 jmp   .CW_Loop
   588                          
   589  07DC                    .End_CWrite:
   590                             RAM_EPILOGUE RAM_USE_CLASS_1
   591  07DC  7F                   ret
   592                          .ENDSECTION
   593                          
   594                          .SECTION
   595                          ;-----------------------------------------------------------------------------
   596                          ;  FUNCTION NAME: TX8_2_CPutString
   597                          ;
   598                          ;  DESCRIPTION:
   599                          ;     Send String out through UART TX port.
   600                          ;
   601                          ;
   602                          ;  ARGUMENTS:
   603                          ;     Pointer to String
   604                          ;     A has MSB of string address
   605                          ;     X has LSB of string address
   606                          ;
   607                          ;  RETURNS:
   608                          ;     none
   609                          ;
   610                          ;  SIDE EFFECTS:
   611                          ;    The A and X registers may be modified by this or future implementations
   612                          ;    of this function.  The same is true for all RAM page pointer registers in
   613                          ;    the Large Memory Model.  When necessary, it is the calling function's
   614                          ;    responsibility to perserve their values across calls to fastcall16 
   615                          ;    functions.
   616                          ;
   617  07DD                     TX8_2_CPutString:
   618  07DD                    _TX8_2_CPutString:
   619                             RAM_PROLOGUE RAM_USE_CLASS_1   
   620  07DD  08                   push  A                                       ; Store ROM pointer
   621  07DE  10                   push  X
   622  07DF  28                   romx                                          ; Get character from ROM
   623  07E0  A00B                 jz    .End_CPutString
   624  07E2  9FA7                 call  TX8_2_PutChar                      ; Print character
   625  07E4  20                   pop   X
   626  07E5  18                   pop   A
   627  07E6  75                   inc   X                                       ; Inc LSB of pointer
   628  07E7  DFF5                 jnc   TX8_2_CPutString                        ; Check for carry
   629  07E9  74                   inc   A                                       ; Inc MSB of pointer
   630  07EA  8FF2                 jmp   TX8_2_CPutString
   631                          
   632                          
   633  07EC                    .End_CPutString:
   634  07EC  38 FE                add   SP, -2
   635                             RAM_EPILOGUE RAM_USE_CLASS_1
   636  07EE  7F                   ret
   637                          .ENDSECTION
   638                          
   639                          .SECTION
   640                          ;-----------------------------------------------------------------------------
   641                          ;  FUNCTION NAME: TX8_2_PutCRLF
   642                          ;
   643                          ;  DESCRIPTION:
   644                          ;     Send a CR and LF
   645                          ;
   646                          ;  ARGUMENTS:
   647                          ;     none.
   648                          ;
   649                          ;  RETURNS:
   650                          ;     none.
   651                          ;
   652                          ;  SIDE EFFECTS:
   653                          ;    The A and X registers may be modified by this or future implementations
   654                          ;    of this function.  The same is true for all RAM page pointer registers in
   655                          ;    the Large Memory Model.  When necessary, it is the calling function's
   656                          ;    responsibility to perserve their values across calls to fastcall16 
   657                          ;    functions.
   658                          ;
   659  07EF                     TX8_2_PutCRLF:
   660  07EF                    _TX8_2_PutCRLF:
   661                             RAM_PROLOGUE RAM_USE_CLASS_1
   662  07EF  50 0D                mov  A,0x0D                        ; Send CR
   663  07F1  9F98                 call TX8_2_PutChar
   664  07F3  50 0A                mov  A,0x0A                        ; Send LF
   665  07F5  9F94                 call TX8_2_PutChar
   666                             RAM_EPILOGUE RAM_USE_CLASS_1
   667  07F7  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012
           TX8_2_bReadTxStatus 075E                  TX8_2_FUNC_REG 002C             bTX8_2_ReadTxStatus 075E  
              _TX8_2_EnableInt 0738                   _TX8_2_CWrite 07B5                        CLEN_LSB FFFFFFFB  
                      CLEN_MSB FFFFFFFA                TX8_2_DisableInt 073C      TX8_2_INT_MODE_TX_COMPLETE 0001  
            TX8_2_SetTxIntMode 0740                        CSTR_LSB FFFFFFFD                        CSTR_MSB FFFFFFFC  
       bfCONTROL_REG_START_BIT 0001                      TX8_2_Stop 0757             TX8_2_TX_BUFFER_REG 002D  
                        ??0000 078B                          ??0001 07A8                          ??0002 07C6  
                 End_PutString 079C               _TX8_2_DisableInt 073C               TX8_2_PutSHexByte 0771  
                        HITECH 0002                     _TX8_2_Stop 0757                  _TX8_2_PutCRLF 07EF  
                _TX8_2_PutChar 078B                  TX8_2_SendData 075B                _TX8_2_PutString 0793  
                   TX8_2_Start 0752                     TX8_2_Write 079D              _TX8_2_PutSHexByte 0771  
     SYSTEM_LARGE_MEMORY_MODEL 0000                   TX8_2_HEX_STR 0761                   TX8_2_INT_REG 00E1  
               TX8_2_EnableInt 0738               TX8_2_CONTROL_REG 002F                       TOOLCHAIN 0002  
           _TX8_2_SetTxIntMode 0740                    _TX8_2_Start 0752                    _TX8_2_Write 079D  
                       CNT_LEN FFFFFFFB                 TX8_2_bINT_MASK 0008                TX8_2_PutSHexInt 0784  
               RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002                 RAM_USE_CLASS_3 0004  
               RAM_USE_CLASS_4 0008                 _TX8_2_SendData 075B                         STR_LSB FFFFFFFD  
bfFUNCTION_REG_TX_INT_MODE_BIT 0010                   TX8_2_PutCRLF 07EF                   TX8_2_PutChar 078B  
             _TX8_2_PutSHexInt 0784                    TX8_2_CWrite 07B5                TX8_2_CPutString 07DD  
          _TX8_2_bReadTxStatus 075E                 TX8_2_PutString 0793            _bTX8_2_ReadTxStatus 075E  
         TX8_2_TX_BUFFER_EMPTY 0010               _TX8_2_CPutString 07DD                   FLAG_XIO_MASK 0010  
    SYSTEM_IDXPG_TRACKS_IDX_PP 0001      SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 089C                    
      + 089C                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  089C                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  089C                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  089C                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  089C                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  089C                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  089C                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  089C                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  089C                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  089C                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  089C                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  089C                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  089C                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  089C                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  089C                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  089C                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  089C                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 089C                    
      + 089C                    ; end of file Memory.inc
      + 089C                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: TX8_2.inc
;;   Version: 3.
      +                         50, Updated on 2012/3/2 at 9:15:33
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION:  Asse
      +                         mbler declarations for the TX8 user module.
;;------------------------------------------------------
      +                         -----------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*******
      +                         **********************************************************************
;;***************************
      +                         **************************************************
   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  089C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2.inc
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the TX8 user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          ;---------------------------------------------------
    16                          ; Constants for TX8_2 API's
    17                          ;---------------------------------------------------
    18                          
    19                          ;mask value for global int reg bit for TX instance
    20  0008                    TX8_2_bINT_MASK:        equ 08h
    21                          ;TX8 interrupt address
    22  00E1                    TX8_2_INT_REG:          equ 0e1h
    23                          
    24                          ; Old equate, will be removed in future release, Do not use.
    25  0008                    bTX8_2_INT_MASK:        equ 08h
    26                          
    27                          
    28                          ;------------------------------------
    29                          ;  Transmitter Parity masks
    30                          ;------------------------------------
    31  0000                    TX8_2_PARITY_NONE:       equ   00h
    32  0002                    TX8_2_PARITY_EVEN:       equ   02h
    33  0006                    TX8_2_PARITY_ODD:        equ   06h
    34                          
    35                          ;------------------------------------
    36                          ;  Transmitter Status Register masks
    37                          ;------------------------------------
    38  0020                    TX8_2_TX_COMPLETE:        equ   20h
    39  0010                    TX8_2_TX_BUFFER_EMPTY:    equ   10h
    40                          
    41                          
    42  0000                    TX8_2_INT_MODE_TX_REG_EMPTY:                 equ 0x00
    43  0001                    TX8_2_INT_MODE_TX_COMPLETE:                  equ 0x01
    44                          
    45                          ; Do not use! old style equates.  Will be moved
    46                          ; in future versions.
    47  0000                    TX8_PARITY_NONE:           equ   00h
    48  0002                    TX8_PARITY_EVEN:           equ   02h
    49  0006                    TX8_PARITY_ODD:            equ   06h
    50  0020                    TX8_TX_COMPLETE:           equ   20h
    51  0010                    TX8_TX_BUFFER_EMPTY:       equ   10h
    52                          
    53                          ;----------------------------------------------------
    54                          ;  Register Address Constants for TX8_2
    55                          ;----------------------------------------------------
    56  002F                    TX8_2_CONTROL_REG:  equ 2fh                      ; Control register
    57  002C                    TX8_2_TX_SHIFT_REG: equ 2ch                      ; TX Shift Register register
    58  002D                    TX8_2_TX_BUFFER_REG:    equ 2dh                  ; TX Buffer Register
    59  002C                    TX8_2_FUNC_REG: equ 2ch                          ; Function register
    60  002D                    TX8_2_INPUT_REG:    equ 2dh                      ; Input register
    61  002E                    TX8_2_OUTPUT_REG:   equ 2eh                      ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2INT.asm
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION:  TX8 Interrupt Service Rountine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "TX8_2.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _TX8_2_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _TX8_2_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  07F8                    _TX8_2_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  07F8  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012
                     HITECH 0002                    TOOLCHAIN 0002                   _TX8_2_ISR 07F8  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       28 October 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C21323MLF
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SLEEP_TIMER:			equ	0h	;Sleep Timer value
    26  0018                    SLEEP_TIMER_MASK:		equ	18h	;Sleep Timer mask
    27  0000                    SLEEP_TIMER_JUST:		equ	0h	;Sleep Timer value justified
    28  0000                    SWITCH_MODE_PUMP:		equ	0h	;Switch Mode Pump setting
    29  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    30  0000                    SWITCH_MODE_PUMP_JUST:	equ	0h	;Switch Mode Pump justified
    31  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    32  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    33  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    34  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    35  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    36  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    37                                                        
    38  0005                    POWER_SETTING:			equ	5h
    39  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    40  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    41  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    42  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    43  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    44  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    45  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    46  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    47  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    48  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    49                          
    50  0000                    COMM_RX_PRESENT:		equ	0	;1 = TRUE
    51  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    52                          
    53  0005                    CLOCK_DIV_VC1:			equ	5h	;VC1 clock divider
    54  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    55  0050                    CLOCK_DIV_VC1_JUST:		equ	50h	;VC1 clock divider justified
    56  000C                    CLOCK_DIV_VC2:			equ	ch	;VC2 clock divider
    57  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    58  000C                    CLOCK_DIV_VC2_JUST:		equ	ch	;VC2 clock divider justified
    59  0002                    CLOCK_INPUT_VC3:		equ	2h	;VC3 clock source
    60  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    61  0002                    CLOCK_INPUT_VC3_JUST:	equ	2h	;VC3 clock source justified
    62  0031                    CLOCK_DIV_VC3:			equ	31h	;VC3 clock divider
    63  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    64  0031                    CLOCK_DIV_VC3_JUST:		equ	31h	;VC3 clock divider justified
    65  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    66  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    67  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    68  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    69  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    70  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    71                          ;
    72                          ; register initial values
    73                          ;
    74  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    75  004A                    PORT_0_GLOBAL_SELECT:	equ 4ah	;Port 0 global select register (PRT0GS)
    76  00CA                    PORT_0_DRIVE_0:			equ cah	;Port 0 drive mode 0 register (PRT0DM0)
    77  0015                    PORT_0_DRIVE_1:			equ 15h	;Port 0 drive mode 1 register (PRT0DM1)
    78  0015                    PORT_0_DRIVE_2:			equ 15h	;Port 0 drive mode 2 register (PRT0DM2)
    79  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    80  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    81  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    82  0001                    PORT_1_GLOBAL_SELECT:	equ 1h	;Port 1 global select register (PRT1GS)
    83  0001                    PORT_1_DRIVE_0:			equ 1h	;Port 1 drive mode 0 register (PRT1DM0)
    84  00D6                    PORT_1_DRIVE_1:			equ d6h	;Port 1 drive mode 1 register (PRT1DM1)
    85  00D6                    PORT_1_DRIVE_2:			equ d6h	;Port 1 drive mode 2 register (PRT1DM2)
    86  0028                    PORT_1_INTENABLE:		equ 28h	;Port 1 interrupt enable register (PRT1IE)
    87  0028                    PORT_1_INTCTRL_0:		equ 28h	;Port 1 interrupt control 0 register (PRT1IC0)
    88                          PORT_1_INTCTRL_1:		equ 28h	;Port 1 interrupt control 1 register (PRT1IC1)
      + 0028                    PORT_1_INTCTRL_1	equ	40
      + 0865                    ; end of file GlobalParams.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186+ 0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  0865                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  0865                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  0865                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  0865                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  0865                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  0865                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  0865                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  0865                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  0865                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  0865                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  0865                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  0865                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  0865                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  0865                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 0865                    
      + 0865                    ; end of file m8c.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C21020 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C21020 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  0865                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   130                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   131                              M8C_SetBank1
   132                              mov   A, [@IMO_Trim]
   133                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   134                              mov   A, [@Volt_Trim]
   135                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   136                              M8C_SetBank0
   137  0865                        endm
   138                          
   139                          
   140                          ;-----------------------------------------------------------------------------
   141                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   142                          ;
   143                          ;  DESCRIPTION:
   144                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   145                          ;     registers with values from from the specified flash System Parameter
   146                          ;     table entries. Each trim value comes from a different table.
   147                          ;     Also, see M8SSC_SetTableTrims above.
   148                          ;-----------------------------------------------------------------------------
   149                          ;
   150                          ;  ARGUMENTS:
   151                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   152                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   153                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   154                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   155                          ;
   156                          ;  RETURNS:
   157                          ;     Nothing
   158                          ;
   159                          ;  SIDE EFFECTS:
   160                          ;     The values of the A and X registers are modified
   161                          ;
   162                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   163                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   164                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   165                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   166                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   167                              mov   reg[IMO_TR], A
   168                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   169                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   170                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   171                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   172                              M8C_SetBank0
   173  0865                        endm
   174                          
   175                          
   176                          ;-----------------------------------------------------------------------------
   177                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   178                          ;
   179                          ;  DESCRIPTION:
   180                          ;     Loads Bandgap Voltage Trim register with values from from the
   181                          ;     specified flash System Parameter table entry.
   182                          ;-----------------------------------------------------------------------------
   183                          ;
   184                          ;  ARGUMENTS:
   185                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   186                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   187                          ;
   188                          ;  RETURNS:
   189                          ;     Nothing
   190                          ;
   191                          ;  SIDE EFFECTS:
   192                          ;     The values of the A and X registers are modified
   193                          ;
   194                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   195                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   196                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   197                              M8C_SetBank1
   198                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   199                              mov   reg[BDG_TR], A                   ; Update the register value
   200                              M8C_SetBank0
   201  0865                        endm
   202                          
   203                          
   204                          ;-----------------------------------------------------------------------------
   205                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   206                          ;
   207                          ;  DESCRIPTION:
   208                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   209                          ;     from the specified flash System Parameter table entry.
   210                          ;-----------------------------------------------------------------------------
   211                          ;
   212                          ;  ARGUMENTS:
   213                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   214                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   215                          ;
   216                          ;  RETURNS:
   217                          ;     Nothing
   218                          ;
   219                          ;  SIDE EFFECTS:
   220                          ;     The values of the A and X registers are modified
   221                          ;
   222                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   223                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   224                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   225                              M8C_SetBank1
   226                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   227                              mov   reg[IMO_TR], A               ; Update the register value
   228                              M8C_SetBank0
   229                              endm
      + 0865                    
      + 0865                    ; end of file m8ssc.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  0865                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  0865                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  0865                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  0865                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  0865                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  0865                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  0865                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  0865                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  0865                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  0865                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  0865                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  0865                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  0865                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  0865                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  0865                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  0865                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408  0865                       endm
     1                          ;  Generated by PSoC Designer 5.2.2551
     2                          ;
     3                          ;@Id: boot.tpl#903 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    4.40
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C21x23 microcontroller family.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ; Interrupt Vector Table
    81                          ;-----------------------------------------------------------------------------
    82                          ;
    83                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    84                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    85                          ; very short ISRs could be encoded within the table itself. Normally,
    86                          ; vector jump targets are modified automatically according to the user
    87                          ; modules selected. This occurs when the 'Generate Application' opera-
    88                          ; tion is run causing PSoC Designer to create boot.asm and the other
    89                          ; configuration files. If you need to hard code a vector, update the
    90                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
    91                          ; of this file.
    92                          ;-----------------------------------------------------------------------------
    93                          
    94                              AREA TOP (ROM, ABS, CON)
    95                          
    96  0000                        org   0                        ;Reset Interrupt Vector
    97                          IF	(TOOLCHAIN & HITECH)
    98                          ;   jmp   __Start                  ;C compiler fills in this vector
    99                          ELSE
   100                              jmp   __Start                  ;First instruction executed following a Reset
   101                          ENDIF
   102                              ;@PSoC_BOOT_ISR_UserCode_START@
   103                              ;---------------------------------------------------
   104                              ; Insert your custom code below this banner
   105                              ;---------------------------------------------------
   106                          
   107  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   108  0004  30                    halt                           ;Stop execution if power falls too low
   109                          
   110  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   111                              // call	void_handler
   112  0008  7E                    reti
   113                          
   114  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   115                              // call	void_handler
   116  000C  7E                    reti
   117                          
   118  0018                        org   18h                      ;VC3 Interrupt Vector
   119                              // call	void_handler
   120  0018  7E                    reti
   121                          
   122  001C                        org   1Ch                      ;GPIO Interrupt Vector
   123  001C  7D 0898               ljmp	PSoC_GPIO_ISR
   124  001F  7E                    reti
   125                          
   126  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   127                              // call	void_handler
   128  0020  7E                    reti
   129                          
   130  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   131  0024  7D 06F4               ljmp	_Counter16_1_ISR
   132  0027  7E                    reti
   133                          
   134  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   135                              // call	void_handler
   136  0028  7E                    reti
   137                          
   138  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   139  002C  7D 0879               ljmp	Dispatch_INTERRUPT_11
   140  002F  7E                    reti
   141                          
   142  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   143                              // call	void_handler
   144  0060  7E                    reti
   145                          
   146  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   147                              // call	void_handler
   148  0064  7E                    reti
   149                              ;---------------------------------------------------
   150                              ; Insert your custom code above this banner
   151                              ;---------------------------------------------------
   152                              ;@PSoC_BOOT_ISR_UserCode_END@
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  Start of Execution.
   156                          ;-----------------------------------------------------------------------------
   157                          ;  The Supervisory ROM SWBootReset function has already completed the
   158                          ;  calibrate1 process, loading trim values for 5 volt operation.
   159                          ;
   160                          
   161                          IF	(TOOLCHAIN & HITECH)
   162                           	AREA PD_startup(CODE, REL, CON)
   163                          ELSE
   164                              org 68h
   165                          ENDIF
   166  0B09                    __Start:
   167                          
   168                              ; initialize SMP values for voltage stabilization, if required,
   169                              ; leaving power-on reset (POR) level at the default (low) level, at
   170                              ; least for now. 
   171                              ;
   172  0B09  71 10                 M8C_SetBank1
   173  0B0B  62 E3 00              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   174  0B0E  70 EF                 M8C_SetBank0
   175                          
   176  0B10  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   177                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   178                              M8C_EnableWatchDog
   179                          ENDIF
   180                          
   181  0B13  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   182                          
   183                          IF	(TOOLCHAIN & HITECH)
   184                              ;---------------------------
   185                              ; Set up the Temporary stack
   186                              ;---------------------------
   187                              ; A temporary stack is set up for the SSC instructions.
   188                              ; The real stack start will be assigned later.
   189                              ;
   190                          	global		__Lstackps
   191  0B16  50 C7             	mov     a,low __Lstackps
   192  0B18  4E                	swap    a,sp
   193                          ELSE
   194                              ;------------------
   195                              ; Set up the stack
   196                              ;------------------
   197                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   198                              swap  SP, A                    ; This is only temporary if going to LMM
   199                          ENDIF
   200                          
   201                              ;-----------------------------------------------
   202                              ; Set Power-related Trim.
   203                              ;-----------------------------------------------
   204  0B19  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   205                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   206                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   207                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   208                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   209                           ENDIF
   210                          ENDIF ; 5.0 V Operation
   211                          
   212                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   213                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   214                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   215                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   216                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   217                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   218                           ENDIF
   219                          ENDIF ; 3.3 Volt Operation
   220                          
   221                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   222  0B1C  43 FE 10              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   223                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
      + 0B1F  55 FA 02          	mov	[250], 2
      + 0B22  4F                ;   !!! DO NOT CHANGE THIS CODE !!!
;       This sequence of opcodes provides a
;       signature fo
      +                         r the debugger and ICE.
	mov	x, sp
      + 0B23  5B                	mov	a, x
      + 0B24  01 03             	add	a, 3
      + 0B26  53 F9             	mov	[249], a
      + 0B28  55 F8 3A          	mov	[248], 58
      + 0B2B  50 06             	mov	a, 6
      + 0B2D  00                	ssc
      + 0B2E  71 10             ;   !!! DO NOT CHANGE THIS CODE !!!
	or	f, 0x10
      + 0B30  51 F9             	mov	a, [249]
      + 0B32  60 E8             	mov	reg[232], a
      + 0B34  51 F8             	mov	a, [248]
      + 0B36  60 EA             	mov	reg[234], a
      + 0B38  70 EF             	and	f, 0xEF
   224                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   225                          
   226                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   227                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   228                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   229                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   230                          
   231  0B3A  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   232  0B3D  55 F9 00              mov  [bSSC_KEYSP], 0
   233                          
   234                              ;---------------------------------------
   235                              ; Initialize Crystal Oscillator and PLL
   236                              ;---------------------------------------
   237                          IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
   238  0B40  71 10                 M8C_SetBank1
   239  0B42  62 E0 00              mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
   240  0B45  70 EF                 M8C_SetBank0
   241  0B47  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   242                          
   243                          ELSE 	 ;*** all other voltages OK for 12Mhz ***
   244                              M8C_SetBank1
   245                              mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   246                              M8C_SetBank0
   247                              M8C_ClearWDTAndSleep           ; Reset the watch dog
   248                          
   249                          ENDIF
   250                          
   251                              ;-------------------------------------------------------
   252                              ; Initialize Proper Drive Mode for External Clock Pin
   253                              ;-------------------------------------------------------
   254                          
   255                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   256                          
   257                          IF (SYSCLK_SOURCE)
   258                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   259                          ENDIF
   260                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   261                          
   262                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   263                              ;---------------------------------------------------
   264                              ; Insert your custom code below this banner
   265                              ;---------------------------------------------------
   266                          
   267                              ;---------------------------------------------------
   268                              ; Insert your custom code above this banner
   269                              ;---------------------------------------------------
   270                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   271                          
   272                              ;-------------------------
   273                              ; Load Base Configuration
   274                              ;-------------------------
   275                              ; Load global parameter settings and load the user modules in the
   276                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   277                              ; to minimize start up time; (2) We may still need to play with the
   278                              ; Sleep Timer.
   279                              ;
   280  0B4A  7C 0582               lcall LoadConfigInit
   281                          
   282                              ;-----------------------------------
   283                              ; Initialize C Run-Time Environment
   284                              ;-----------------------------------
   285                          IF ( C_LANGUAGE_SUPPORT )
   286                              mov  A,0                           ; clear the 'bss' segment to zero
   287                              mov  [__r0],<__bss_start
   288                          BssLoop:
   289                              cmp  [__r0],<__bss_end
   290                              jz   BssDone
   291                              mvi  [__r0],A
   292                              jmp  BssLoop
   293                          BssDone:
   294                              mov  A,>__idata_start              ; copy idata to data segment
   295                              mov  X,<__idata_start
   296                              mov  [__r0],<__data_start
   297                          IDataLoop:
   298                              cmp  [__r0],<__data_end
   299                              jz   C_RTE_Done
   300                              push A
   301                              romx
   302                              mvi  [__r0],A
   303                              pop  A
   304                              inc  X
   305                              adc  A,0
   306                              jmp  IDataLoop
   307                          
   308                          C_RTE_Done:
   309                          
   310                          ENDIF ; C_LANGUAGE_SUPPORT
   311                          
   312                              ;-------------------------------
   313                              ; Voltage Stabilization for SMP
   314                              ;-------------------------------
   315                          
   316                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   317                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   318                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   319                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   320                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   321                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   322                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   323                              M8C_SetBank1
   324                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   325                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   326                              M8C_SetBank0
   327                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   328                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   329                          .WaitFor2ms:
   330                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   331                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   332                          ENDIF ; SMP is operational
   333                          ENDIF ; 5.0V Operation
   334                          
   335                              ;-------------------------------
   336                              ; Set Power-On Reset (POR) Level
   337                              ;-------------------------------
   338                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
   339                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
   340                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   341                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   342                              ;  Technical Reference Manual #001-14463 for more information.
   343                          
   344  0B4D  71 10                 M8C_SetBank1
   345                          
   346                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   347                                                                         ;  Yes, lowest trip already set
   348                          ELSE                                           ;   No, must adjust POR...
   349                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   350                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   351                          ELSE
   352                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   353                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   354                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   355                           ELSE                                          ;    No, fast mode
   356                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   357                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   358                            ELSE ; 24HMz                                 ;
   359                              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   360                            ENDIF ; 24MHz
   361                           ENDIF ; Slow Mode
   362                          ENDIF ; 5.0V Operation
   363                          ENDIF ; 3.3V Operation
   364                          ENDIF ; 2.7V Operation
   365                          
   366  0B4F  70 EF                 M8C_SetBank0
   367                          
   368                              ;----------------------------
   369                              ; Wrap up and invoke "main"
   370                              ;----------------------------
   371                          
   372                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   373                              ; no interrupts should be enabled now, so may as well clear the register.
   374                              ;
   375  0B51  62 E0 00              mov  reg[INT_MSK0],0
   376                          
   377                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   378                              ;
   379  0B54  71 10                 M8C_SetBank1
   380  0B56  62 E0 03              mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   381  0B59  70 EF                 M8C_SetBank0
   382                          
   383                              ; Global Interrupt are NOT enabled, this should be done in main().
   384                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   385                              ; Global Interrupts should be enabled as soon as possible in main().
   386                              ;
   387  0B5B  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   388                                                             ; have been set during the boot process.
   389                          IF	(TOOLCHAIN & HITECH)
   390  0B5E  7D 0B64           	ljmp  startup                  ; Jump to C compiler startup code
   391                          ELSE
   392                          IF ENABLE_LJMP_TO_MAIN
   393                              ljmp  _main                    ; goto main (no return)
   394                          ELSE
   395                              lcall _main                    ; call main
   396                          .Exit:
   397                              jmp  .Exit                     ; Wait here after return till power-off or reset
   398                          ENDIF
   399                          ENDIF ; TOOLCHAIN
   400                          
   401                              ;---------------------------------
   402                              ; Library Access to Global Parms
   403                              ;---------------------------------
   404                              ;
   405  0B61                     bGetPowerSetting:
   406  0B61                    _bGetPowerSetting:
   407                              ; Returns value of POWER_SETTING in the A register.
   408                              ; No inputs. No Side Effects.
   409                              ;
   410                          IF (POWER_SETTING & POWER_SET_2V7)
   411  0B61  50 05                 mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   412                          ELSE
   413                              mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   414                          ENDIF
   415  0B63  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012
       SSCTBL2_TRIM_BGR_2V 00F8                  __Lstackps 00C7          C_LANGUAGE_SUPPORT 0000               PSoC_GPIO_ISR 0898  
             POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0005               POWER_SET_5V0 0010  
          SLEEP_TIMER_JUST 0000                    CPU_SCR1 00FE            bGetPowerSetting 0B61                    INT_MSK0 00E0  
                  OPER_KEY 003A          POWER_SET_2V7_6MHZ 0002                      BDG_TR 00EA                      HITECH 0002  
     Dispatch_INTERRUPT_11 0879                      IMO_TR 00E8                      INT_VC 00E2              CPU_CLOCK_JUST 0003  
         _bGetPowerSetting 0B61               LVD_TBEN_JUST 0000                      VLT_CR 00E3       SWITCH_MODE_PUMP_JUST 0000  
          _Counter16_1_ISR 06F4            OSC_CR0_CPU_3MHz 0000         POWER_SET_2V7_12MHZ 0004          POWER_SET_SLOW_IMO 0001  
                 TOOLCHAIN 0002               SYSCLK_SOURCE 0000                     OSC_CR0 00E0                     RES_WDT 00E3  
            CPU_SCR1_SLIMO 0010             WATCHDOG_ENABLE 0000                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004  
            LoadConfigInit 0582                     __Start 0B09                   bSSC_KEY1 00F8                  TABLE_READ 0006  
                   startup 0B64               FLAG_XIO_MASK 0010   SSCTBL2_TRIM_IMO_2V_12MHZ 00F9           TRIP_VOLTAGE_JUST 0000  
        bSSC_TABLE_TableId 00FA  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:16 2012
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61PL6
     3                          	; Copyright (C) 1984-2009 HI-TECH Software
     4                          	;Licensed for evaluation purposes only.
     5                          	;This licence will expire on Sat, 30 Jun 2012
     6                          
     7                          	; Auto-generated runtime startup code for final link stage.
     8                          
     9                          	;
    10                          	; Compiler options:
    11                          	;
    12                          	; --asmlist --errformat --chip=CY8C21323MLF --WARN=0 \
    13                          	; --ROM=default,-C00-1000 --OPT=asm,9 -Odyn_test2 -Moutput/dyn_test2.mp \
    14                          	; --OUTDIR=./output ./obj/boot.obj ./obj/main.p1 lib/libpsoc.lib \
    15                          	; lib/libpsoc.lpp \
    16                          	; C:/PROGRA~1/Cypress/PSOCDE~1/5.2/Common/CY3E64~1/tools/lib/CY8C21020/cms.lib
    17                          	;
    18                          
    19                          
    20                          	processor	CY8C21323MLF
    21                          	macro	M8C_ClearWDT
    22                          	mov reg[0xE3],0x38
    23  07F9                    	endm
    24                          
    25                          	psect	PD_startup,class=CODE
    26                          	psect	init,class=CODE
    27                          	psect	end_init,class=CODE
    28                          	psect	powerup,class=CODE
    29                          	psect	vectors,ovrld,class=CODE
    30                          	psect	text,class=CODE
    31                          	psect	maintext,class=CODE
    32                          	psect	intrtext,class=CODE
    33                          	psect	bss,class=RAM,space=1
    34                          	psect	InterruptRAM,class=RAM,space=1
    35                          	psect	cdata,class=ROM,space=0,reloc=256
    36                          	psect	psoc_config,class=ROM
    37                          	psect	UserModules,class=ROM
    38                          	psect	strings,class=ROM
    39                          	psect	fnauto,class=RAM,space=1,limit=0100h
    40                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    41  00F8                    	org	0xF8
    42  00F8                    	blk	8
    43                          
    44                          	psect	stackps,class=RAM
    45                          	global	__Lstackps, __stack_start__
    46  00C7                    __stack_start__:
    47                          	psect	bss0,class=RAM,space=1
    48                          	psect	nvram0,class=RAM,space=1
    49                          	psect	rbit0,bit,class=RAM,space=1
    50                          	psect	nvbit0,bit,class=RAM,space=1
    51                          	psect	ramdata0,class=RAM,space=1
    52                          	psect	romdata0,class=BANKROM,space=0
    53                          
    54                          ;Declare areas defined in usermodules and other assembler code
    55                          	psect	InterruptRAM,class=RAM,space=1
    56                          
    57                          	global	start,startup,_main
    58                          	global	reset_vec,intlevel0,intlevel1,intlevel2
    59  00C6                    intlevel0:
    60  00C6                    intlevel1:
    61  00C6                    intlevel2:		; for C funcs called from assembler
    62                          
    63                          	fnconf	fnauto,??,?
    64                          	fnroot	_main
    65  006C                    TMP_DR0	equ	108
    66  006D                    TMP_DR1	equ	109
    67  006E                    TMP_DR2	equ	110
    68  006F                    TMP_DR3	equ	111
    69  00D0                    CUR_PP	equ	208
    70  00D1                    STK_PP	equ	209
    71  00D3                    IDX_PP	equ	211
    72  00D4                    MVR_PP	equ	212
    73  00D5                    MVW_PP	equ	213
    74  00F7                    CPU_F	equ	247
    75                          	psect	vectors
    76  0000                    reset_vec:
    77  0000                    start:
    78                          	global	__Start
    79  0000  7D 0B09           	ljmp	__Start
    80                          
    81                          	psect	init
    82  0B64                    startup:
    84                          	M8C_ClearWDT
    85                          
    86                          ;	Clear uninitialized variables in bank 0
    87  0B67  50 00             	mov	a,low __Lbss0
    88  0B69  4E                	swap	a,sp
    89  0B6A  50 00             	mov	a,0
    90  0B6C  57 BC             	mov	x,188
    91  0B6E                    bssloop0:
    92  0B6E  08                	push	a
    93  0B6F  79                	dec	x
    94  0B70  BFFD              	jnz	bssloop0
    95  0B72  62 D0 00          	mov	reg[CUR_PP],0
    96  0B75  50 C7             	mov	a,low __Lstackps
    97  0B77  4E                	swap	a,sp
    98                          
    99  0B78  7D 089C           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:16 2012
     __Lstackps 00C7            _main 089C            start 0000           CUR_PP 00D0        intlevel0 00C6        intlevel1 00C6  
      intlevel2 00C6        reset_vec 0000         bssloop0 0B6E          __Lbss0 0000          __Start 0B09          startup 0B64  
__stack_start__ 00C7  
