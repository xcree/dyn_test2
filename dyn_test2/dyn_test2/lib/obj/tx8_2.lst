

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
                                                                                                           Fri May 25 15:05:15 2012


     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C21020 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539                              endm
      + 089C                    
      + 089C                    ; end of file m8c.inc

     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the CY8C21020 family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0000                    SYSTEM_LARGE_MEMORY_MODEL: equ 0   
    23  0001                    SYSTEM_SMALL_MEMORY_MODEL: equ 1   
    24  0000                    SYSTEM_STACK_PAGE: equ 0   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C21020.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ;  ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  Most of the following macros are conditionally compiled so they only
    52                          ;  produce code if the large memory model is selected.
    53                          
    54                             ;-----------------------------------------------
    55                             ;  Set Stack Page Macro
    56                             ;-----------------------------------------------
    57                             ;
    58                             ;  DESC: Modify STK_PP in the large or small memory Models.
    59                             ;
    60                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    61                             ;        which stack operations like PUSH and POP store and retrieve their
    62                             ;        data
    63                             ;
    64                             ;  COST: 8 instruction cycles (in LMM only)
    65                          
    66                             macro RAM_SETPAGE_STK( PG_NUMBER )
    67                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    68                                mov reg[STK_PP], @PG_NUMBER
    69                             ENDIF
    70  089C                       endm
    71                          
    72                             ;-----------------------------------------------
    73                             ;  Set Current Page Macro
    74                             ;-----------------------------------------------
    75                             ;
    76                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    77                             ;
    78                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    79                             ;        calculation of effective direct-mode address operands.
    80                             ;
    81                             ;  COST: 8 instruction cycles (in LMM only)
    82                          
    83                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    84                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    85                                mov reg[CUR_PP], @PG_NUMBER
    86                             ENDIF
    87  089C                       endm
    88                          
    89                             ;-----------------------------------------------
    90                             ;  Set Index Page Macro
    91                             ;-----------------------------------------------
    92                             ;
    93                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    94                             ;
    95                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    96                             ;         calculation of effective index-mode address operands.
    97                             ;
    98                             ;  COST: 8 instruction cycles (in LMM only)
    99                          
   100                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   101                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   102                                mov reg[IDX_PP], @PG_NUMBER
   103                             ENDIF
   104  089C                       endm
   105                          
   106                             ;-----------------------------------------------
   107                             ;  Set MVI Read Page Macro
   108                             ;-----------------------------------------------
   109                             ;
   110                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   111                             ;
   112                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   113                             ;        calculation of indirect address operands used in the
   114                             ;        "mvi A, [pFoo]" instructions.
   115                             ;
   116                             ;  COST: 8 instruction cycles (in LMM only)
   117                          
   118                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   119                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   120                                mov reg[MVR_PP], @PG_NUMBER
   121                             ENDIF
   122  089C                       endm
   123                          
   124                             ;-----------------------------------------------
   125                             ;  Set MVI Write Page Macro
   126                             ;-----------------------------------------------
   127                             ;
   128                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   129                             ;
   130                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   131                             ;        calculation of indirect address operands used in the
   132                             ;        "mvi [pFoo], A" instructions.
   133                             ;
   134                             ;  COST: 8 instruction cycles (in LMM only)
   135                          
   136                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   137                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   138                                mov reg[MVW_PP], @PG_NUMBER
   139                             ENDIF
   140  089C                       endm
   141                          
   142                             ;-----------------------------------------------
   143                             ;  Force Index Page Pointer to Stack Page
   144                             ;-----------------------------------------------
   145                             ;
   146                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   147                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   148                             ;
   149                             ; INPUT: None
   150                             ;
   151                             ;  COST: 8 instruction cycles (in LMM only)
   152                          
   153                             macro RAM_SETPAGE_IDX2STK
   154                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   155                                IF ( SYSTEM_MULTIPAGE_STACK )
   156                                   mov   A, reg[STK_PP]
   157                                   mov   reg[IDX_PP], A
   158                                ELSE
   159                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   160                                ENDIF
   161                             ENDIF
   162  089C                       endm
   163                          
   164                             ;-----------------------------------------------
   165                             ;  Change Memory Mode
   166                             ;-----------------------------------------------
   167                             ;
   168                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   169                             ;
   170                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   171                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   172                             ;
   173                             ;  COST: 8 instruction cycles (in LMM only)
   174                          
   175                             macro RAM_CHANGE_PAGE_MODE( MODE )
   176                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   177                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   178                                or    F,  FLAG_PGMODE_MASK & @MODE
   179                             ENDIF
   180  089C                       endm
   181                          
   182                             ;-----------------------------------------------
   183                             ;  Set Large Memory Model Native Paging Mode
   184                             ;-----------------------------------------------
   185                             ;
   186                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   187                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   188                             ;        example, in an ISR, when the PGMODE bits have been cleared
   189                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   190                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   191                             ;
   192                             ; INPUT: none
   193                             ;
   194                             ;  COST: 4 instruction cycles (in LMM only)
   195                          
   196                             macro RAM_SET_NATIVE_PAGING
   197                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   198                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   199                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   200                             ENDIF ;  PGMODE LOCKED
   201                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   202                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   203                             ENDIF ; PGMODE FREE
   204                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   205  089C                       endm
   206                          
   207                             ;-----------------------------------------------
   208                             ; Restore Large Memory Model Native Paging Mode
   209                             ;-----------------------------------------------
   210                             ;
   211                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   212                             ;        paging mode. Always works because it clears the PGMODE bits
   213                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   214                             ;        for a faster method.
   215                             ;
   216                             ; INPUT: none
   217                             ;
   218                             ;  COST: 8 instruction cycles (in LMM only)
   219                          
   220                             macro RAM_RESTORE_NATIVE_PAGING
   221                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   222                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   223                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   224                             ENDIF ;  PGMODE LOCKED
   225                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   226                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   227                             ENDIF ; PGMODE FREE
   228                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   229  089C                       endm
   230                          
   231                             ;-----------------------------------------------
   232                             ; Force indexed addr mode operands to Stack Pg
   233                             ;-----------------------------------------------
   234                             ;
   235                             ;  DESC: Force instructions that use indexed address mode to reference the
   236                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   237                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   238                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   239                             ;
   240                             ; INPUT: none
   241                             ;
   242                             ;  COST: 4 instruction cycles (in LMM only)
   243                          
   244                             macro RAM_X_POINTS_TO_STACKPAGE
   245                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   246                                or   F, FLAG_PGMODE_01b
   247                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   248  089C                       endm
   249                          
   250                             ;-----------------------------------------------
   251                             ;  Force indexed addr mode operands to Index Pg
   252                             ;-----------------------------------------------
   253                             ;
   254                             ;  DESC: Permit instructions that use indexed address mode to reference page
   255                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   256                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   257                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   258                             ;
   259                             ; INPUT: none
   260                             ;
   261                             ;  COST: 4 instruction cycles (in LMM only)
   262                          
   263                             macro RAM_X_POINTS_TO_INDEXPAGE
   264                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   265                                and  F, ~FLAG_PGMODE_01b
   266                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   267  089C                       endm
   268                          
   269                             ;-----------------------------------------------
   270                             ;  Function Prologue
   271                             ;-----------------------------------------------
   272                             ;
   273                             ;  Prologue for functions that run in the LMM and SMM.
   274                             ;
   275                          
   276                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   279                             ; Nothing to do
   280                             ENDIF ; RAM_USE_CLASS_1
   281                          
   282                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   283                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   284                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   285                                ENDIF
   286                             ENDIF ; RAM_USE_CLASS_2
   287                          
   288                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   289                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   290                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   291                                ENDIF
   292                             ENDIF ; RAM_USE_CLASS_3
   293                          
   294                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   295                             ; Nothing to do
   296                             ENDIF ; RAM_USE_CLASS_4
   297                          
   298  089C                       endm
   299                          
   300                             ;-----------------------------------------------
   301                             ;  Function Epilogue
   302                             ;-----------------------------------------------
   303                             ;
   304                             ;  Prologue for functions that run in the LMM and SMM.
   305                             ;
   306                          
   307                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   310                             ; Nothing to do
   311                             ENDIF ; RAM_USE_CLASS_1
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_2
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   318                                RAM_RESTORE_NATIVE_PAGING
   319                             ENDIF ; RAM_USE_CLASS_3
   320                          
   321                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   322                             ; Nothing to do
   323                             ENDIF ; RAM_USE_CLASS_4
   324                          
   325  089C                       endm
   326                          
   327                             ;-----------------------------------------------
   328                             ;  Preserve Register
   329                             ;-----------------------------------------------
   330                             ;
   331                             ;  DESC: Preserve a register value on the stack
   332                             ;
   333                             ; INPUT: Name or address of register in I/O Space
   334                             ;        The I/O bank is an implicit parameter. That is, this function will
   335                             ;        Access the I/O bank currently specified by the CPU Flag register.
   336                             ;
   337                             ;  USES: CPU 'A' register
   338                             ;
   339                             ;  COST: 9 instruction cycles
   340                          
   341                             macro REG_PRESERVE( IOReg )
   342                             mov   A, reg[ @IOReg ]
   343                             push  A
   344  089C                       endm
   345                          
   346                             ;-----------------------------------------------
   347                             ;  Restore Register
   348                             ;-----------------------------------------------
   349                             ;
   350                             ;  DESC: Restore a register value from the stack
   351                             ;
   352                             ; INPUT: Name or address of register in I/O Space
   353                             ;        The I/O bank is an implicit parameter. That is, this function will
   354                             ;        Access the I/O bank currently specified by the CPU Flag register.
   355                             ;
   356                             ;  USES: CPU 'A' register
   357                             ;
   358                             ;  COST: 10 instruction cycles
   359                          
   360                             macro REG_RESTORE( IOReg )
   361                             pop   A
   362                             mov   reg[ @IOReg ], A
   363  089C                       endm
   364                          
   365                             ;-----------------------------------------------
   366                             ;  Preserve Volatile Page Pointer Registers
   367                             ;-----------------------------------------------
   368                             ;
   369                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   370                             ;        functions that require on it.
   371                             ;
   372                             ; INPUT: none
   373                             ;
   374                             ;  USES: CPU 'A' register
   375                             ;
   376                             ;  COST: 45 instruction cycles (in LMM only)
   377                          
   378                             macro ISR_PRESERVE_PAGE_POINTERS
   379                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   380                                REG_PRESERVE CUR_PP
   381                                REG_PRESERVE IDX_PP
   382                                REG_PRESERVE MVR_PP
   383                                REG_PRESERVE MVW_PP
   384                             ENDIF
   385  089C                       endm
   386                          
   387                             ;-----------------------------------------------
   388                             ;  Restore Volatile Page Pointer Registers
   389                             ;-----------------------------------------------
   390                             ;
   391                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   392                             ;        calling functions that run in the LMM mode and before executing
   393                             ;        the RETI instruction.
   394                             ;
   395                             ; INPUT: none
   396                             ;
   397                             ;  USES: CPU 'A' register
   398                             ;
   399                             ;  COST: 50 instruction cycles (in LMM only)
   400                          
   401                             macro ISR_RESTORE_PAGE_POINTERS
   402                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   403                                REG_RESTORE MVW_PP
   404                                REG_RESTORE MVR_PP
   405                                REG_RESTORE IDX_PP
   406                                REG_RESTORE CUR_PP
   407                             ENDIF
   408                             endm
      + 089C                    
      + 089C                    ; end of file Memory.inc

      + 089C                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: TX8_2.inc
;;   Version: 3.
      +                         50, Updated on 2012/3/2 at 9:15:33
;;  Generated by PSoC Designer 5.2.2551
;;
;;  DESCRIPTION:  Asse
      +                         mbler declarations for the TX8 user module.
;;------------------------------------------------------
      +                         -----------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*******
      +                         **********************************************************************
;;***************************
      +                         **************************************************

   540                          
   541                          ; end of file m8c.inc
    29  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    30  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    31  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    32  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    33  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    34                          
    35                          
    36                          ;;=============================================================================
    37                          ;;      Register Space, Bank 0
    38                          ;;=============================================================================
    39                          
    40                          ;------------------------------------------------
    41                          ;  Port Registers
    42                          ;  Note: Also see this address range in Bank 1.
    43                          ;------------------------------------------------
    44                          ; Port 0
    45  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    46  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    47  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    48  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    49                          ; Port 1
    50  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    51  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    52  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    53  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    54                          
    55                          ;------------------------------------------------
    56                          ;  Digital PSoC(tm) block Registers
    57                          ;  Note: Also see this address range in Bank 1.
    58                          ;------------------------------------------------
    59                          ; Digital PSoC block 00, Basic Type B
    60  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
    61  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
    62  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
    63  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
    64                          
    65                          ; Digital PSoC block 01, Basic Type B
    66  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
    67  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
    68  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
    69  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
    70                          
    71                          ; Digital PSoC block 02, Communications Type B
    72  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
    73  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
    74  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
    75  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
    76                          
    77                          ; Digital PSoC block 03, Communications Type B
    78  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
    79  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
    80  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
    81  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
    82                          
    83                          ;-------------------------------------
    84                          ;  Analog Control Registers
    85                          ;-------------------------------------
    86  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
    87  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
    88  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
    89                          
    90  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
    91  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
    92  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
    93  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
    94                          
    95  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
    96  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
    97  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
    98  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
    99  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   100                          
   101  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   102  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
   103  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
   104                          
   105  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   106  0080                    ADC0_CR_CMPST:        equ 80h    ;
   107  0040                    ADC0_CR_LOREN:        equ 40h    ;
   108  0020                    ADC0_CR_SHEN:         equ 20h    ;
   109  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   110  0004                    ADC0_CR_ADCM:         equ 04h    ;
   111  0001                    ADC0_CR_EN:	          equ 01h    ;
   112                          
   113  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   114  0080                    ADC1_CR_CMPST:        equ 80h    ;
   115  0040                    ADC1_CR_LOREN:        equ 40h    ;
   116  0020                    ADC1_CR_SHEN:         equ 20h    ;
   117  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   118  0004                    ADC1_CR_ADCM:         equ 04h    ;
   119  0001                    ADC1_CR_EN:	          equ 01h    ;
   120                          
   121                          ; Continuous Time PSoC block Type E Row 0 Col 0
   122  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   123  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   124                          
   125                          ; Continuous Time PSoC block Type E Row 0 Col 1
   126  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   127  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   128                          
   129                          ; Switched Cap PSoC blockType E Row 1 Col 0
   130  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   131                          
   132                          ; Switched Cap PSoC blockType E Row 1 Col 1
   133  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   134                          
   135                          ;-----------------------------------------------
   136                          ;  Global General Purpose Data Registers
   137                          ;-----------------------------------------------
   138  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   139  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   140  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   141  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   142                          
   143                          ;------------------------------------------------
   144                          ;  Row Digital Interconnects
   145                          ;
   146                          ;  Note: the following registers are mapped into
   147                          ;  both register bank 0 AND register bank 1.
   148                          ;------------------------------------------------
   149                          
   150  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   151  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   152  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   153  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   154  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   155  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   156  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   157                          
   158                          
   159                          ;------------------------------------------------
   160                          ;  I2C Configuration Registers
   161                          ;------------------------------------------------
   162  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   163  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   164  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   165  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   166  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   167  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   168  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   169  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   170  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   171  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   172                          
   173  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   174  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   175  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   176  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   177  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   178  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   179  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   180  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   181  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   182                          
   183  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   184                          
   185  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   186  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   187  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   188  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   189  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   190                          
   191                          ;------------------------------------------------
   192                          ;  System and Global Resource Registers
   193                          ;------------------------------------------------
   194  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   195                                                         ; Use INT_MSK0 bit field masks
   196  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   197                                                         ; Use INT_MSK1 bit field masks
   198  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   199                                                         ; Use INT_MSK3 bit field masks
   200                          
   201  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   202  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   203  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   204                          
   205  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   206  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   207  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   208  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   209  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   210  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   211  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   212                          
   213  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   214  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   215  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   216  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   217  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   218                          
   219  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   220  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   221                          
   222                          ; DECIMATOR Control Registers
   223  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   224  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   225                          
   226                          ;------------------------------------------------------
   227                          ;  System Status and Control Registers
   228                          ;
   229                          ;  Note: The following registers are mapped into both
   230                          ;        register bank 0 AND register bank 1.
   231                          ;------------------------------------------------------
   232  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   233                                                             ; Use FLAG_ masks defined at top of file
   234                          
   235  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   236  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   237  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   238  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   239  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   240  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   241                          
   242  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   243  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   244  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   245  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   246  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   247  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   248                          
   249                          
   250                          ;;=============================================================================
   251                          ;;      Register Space, Bank 1
   252                          ;;=============================================================================
   253                          
   254                          ;------------------------------------------------
   255                          ;  Port Registers
   256                          ;  Note: Also see this address range in Bank 0.
   257                          ;------------------------------------------------
   258                          ; Port 0
   259  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   260  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   261  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   262  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   263                          
   264                          ; Port 1
   265  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   266  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   267  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   268  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   269                          
   270                          ;------------------------------------------------
   271                          ;  Digital PSoC(tm) block Registers
   272                          ;  Note: Also see this address range in Bank 0.
   273                          ;------------------------------------------------
   274                          
   275                          ; Digital PSoC block 00, Basic Type B
   276  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   277  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   278  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   279                          
   280                          ; Digital PSoC block 01, Basic Type B
   281  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   282  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   283  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   284                          
   285                          ; Digital PSoC block 02, Communications Type B
   286  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   287  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   288  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   289                          
   290                          ; Digital PSoC block 03, Communications Type B
   291  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   292  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   293  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   294                          
   295                          ;------------------------------------------------
   296                          ;  System and Global Resource Registers
   297                          ;  Note: Also see this address range in Bank 0.
   298                          ;------------------------------------------------
   299                          
   300  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   301  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   302  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   303                          
   304  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   305  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   306  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   307                          
   308  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   309  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   310                          
   311  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   312  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
   313                          
   314  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   315  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   316  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   317  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   318  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   319  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   320  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   321                          
   322  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   323  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   324                          
   325  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   326  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   327  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   328                          
   329  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   330  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   331  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   332  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   333  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   334                          
   335                          ;------------------------------------------------
   336                          ;  Global Digital Interconnects
   337                          ;------------------------------------------------
   338                          
   339  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   340  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   341  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   342  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   343                          
   344                          ;------------------------------------------------
   345                          ;  Clock and System Control Registers
   346                          ;------------------------------------------------
   347                          
   348  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   349  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   350  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   351  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   352  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   353  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   354  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   355  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   356  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   357                          
   358  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   359  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   360                          
   361  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   362                          
   363  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   364  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   365  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   366  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   367  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   368  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   369  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   370  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   371  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   372  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   373  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   374  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   375  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   376  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   377  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   378  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   379  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   380  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   381                          
   382  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   383  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   384  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   385                          
   386  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   387  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   388  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   389  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   390  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   391                          
   392  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   393  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   394  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   395  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   396  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   397  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   398  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   399  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   400                          
   401  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   402  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
   403  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   404  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   405  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   406                          
   407  00E5                    ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
   408  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
   409                          
   410  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   411  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   412  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   413+ 00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   414                          
   415  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   416  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   417                          
   418                          ;;=============================================================================
   419                          ;;      M8C System Macros
   420                          ;;  These macros should be used when their functions are needed.
   421                          ;;=============================================================================
   422                          
   423                          ;----------------------------------------------------
   424                          ;  Swapping Register Banks
   425                          ;----------------------------------------------------
   426                              macro M8C_SetBank0
   427                              and   F, ~FLAG_XIO_MASK
   428  089C                        endm
   429                          
   430                              macro M8C_SetBank1
   431                              or    F, FLAG_XIO_MASK
   432  089C                        endm
   433                          
   434                          ;----------------------------------------------------
   435                          ;  Global Interrupt Enable/Disable
   436                          ;----------------------------------------------------
   437                              macro M8C_EnableGInt
   438                              or    F, FLAG_GLOBAL_IE
   439  089C                        endm
   440                          
   441                              macro M8C_DisableGInt
   442                              and   F, ~FLAG_GLOBAL_IE
   443  089C                        endm
   444                          
   445                          ;----------------------------------------------------
   446                          ;  Enable/Disable Interrupt Mask
   447                          ;
   448                          ;  Use the following macros to enable/disable
   449                          ;  bits in the Interrupt mask registers,
   450                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   451                          ;
   452                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   453                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   454                          ;
   455                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   456                          ;        and MASK is the bit set to enable or disable
   457                          ;----------------------------------------------------
   458                          ; Disable Interrupt Bit Mask(s)
   459                              macro M8C_DisableIntMask
   460                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   461  089C                        endm
   462                          
   463                          ; Enable Interrupt Bit Mask(s)
   464                              macro M8C_EnableIntMask
   465                              or    reg[@0], @1               ; enable specified interrupt enable bit
   466  089C                        endm
   467                          
   468                          ;----------------------------------------------------
   469                          ;  Clear Posted Interrupt Flag Mask
   470                          ;
   471                          ;  Use the following macros to clear the
   472                          ;  bits in the Interrupt Clear registers,
   473                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   474                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   475                          ;
   476                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   477                          ;        and MASK is the bit set to enable or disable
   478                          ;----------------------------------------------------
   479                              macro M8C_ClearIntFlag
   480                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   481  089C                        endm
   482                          
   483                          ;----------------------------------------------------
   484                          ;  Power-On Reset & WatchDog Timer Functions
   485                          ;----------------------------------------------------
   486                              macro M8C_EnableWatchDog
   487                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   488  089C                        endm
   489                          
   490                              macro M8C_ClearWDT
   491                              mov   reg[RES_WDT], 00h
   492  089C                        endm
   493                          
   494                              macro M8C_ClearWDTAndSleep
   495                              mov   reg[RES_WDT], 38h
   496  089C                        endm
   497                          
   498                          ;----------------------------------------------------
   499                          ;  Sleep, CPU Stop & Software Reset
   500                          ;----------------------------------------------------
   501                              macro M8C_Sleep
   502                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   503                              ; The next instruction to be executed depends on the state of the
   504                              ; various interrupt enable bits. If some interrupts are enabled
   505                              ; and the global interrupts are disabled, the next instruction will
   506                              ; be the one that follows the invocation of this macro. If global
   507                              ; interrupts are also enabled then the next instruction will be
   508                              ; from the interrupt vector table. If no interrupts are enabled
   509                              ; then the CPU sleeps forever.
   510  089C                        endm
   511                          
   512                              macro M8C_Stop
   513                              ; In general, you probably don't want to do this, but here's how:
   514                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   515                              ; Next instruction to be executed is located in the interrupt
   516                              ; vector table entry for Power-On Reset.
   517  089C                        endm
   518                          
   519                              macro M8C_Reset
   520                              ; Restore CPU to the power-on reset state.
   521                              mov A, 0
   522                              SSC
   523                              ; Next non-supervisor instruction will be at interrupt vector 0.
   524  089C                        endm
   525                          
   526                          ;----------------------------------------------------
   527                          ; ImageCraft Code Compressor Actions
   528                          ;----------------------------------------------------
   529                              ; Suspend Code Compressor
   530                              ; Must not span a RET or RETI instruction
   531                              ; without resuming code compression
   532                              macro Suspend_CodeCompressor
   533                              or   F, 0
   534  089C                        endm
   535                          
   536                              ; Resume Code Compression
   537                              macro Resume_CodeCompressor
   538                              add  SP, 0
   539  089C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2.inc
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the TX8 user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          ;---------------------------------------------------
    16                          ; Constants for TX8_2 API's
    17                          ;---------------------------------------------------
    18                          
    19                          ;mask value for global int reg bit for TX instance
    20  0008                    TX8_2_bINT_MASK:        equ 08h
    21                          ;TX8 interrupt address
    22  00E1                    TX8_2_INT_REG:          equ 0e1h
    23                          
    24                          ; Old equate, will be removed in future release, Do not use.
    25  0008                    bTX8_2_INT_MASK:        equ 08h
    26                          
    27                          
    28                          ;------------------------------------
    29                          ;  Transmitter Parity masks
    30                          ;------------------------------------
    31  0000                    TX8_2_PARITY_NONE:       equ   00h
    32  0002                    TX8_2_PARITY_EVEN:       equ   02h
    33  0006                    TX8_2_PARITY_ODD:        equ   06h
    34                          
    35                          ;------------------------------------
    36                          ;  Transmitter Status Register masks
    37                          ;------------------------------------
    38  0020                    TX8_2_TX_COMPLETE:        equ   20h
    39  0010                    TX8_2_TX_BUFFER_EMPTY:    equ   10h
    40                          
    41                          
    42  0000                    TX8_2_INT_MODE_TX_REG_EMPTY:                 equ 0x00
    43  0001                    TX8_2_INT_MODE_TX_COMPLETE:                  equ 0x01
    44                          
    45                          ; Do not use! old style equates.  Will be moved
    46                          ; in future versions.
    47  0000                    TX8_PARITY_NONE:           equ   00h
    48  0002                    TX8_PARITY_EVEN:           equ   02h
    49  0006                    TX8_PARITY_ODD:            equ   06h
    50  0020                    TX8_TX_COMPLETE:           equ   20h
    51  0010                    TX8_TX_BUFFER_EMPTY:       equ   10h
    52                          
    53                          ;----------------------------------------------------
    54                          ;  Register Address Constants for TX8_2
    55                          ;----------------------------------------------------
    56  002F                    TX8_2_CONTROL_REG:  equ 2fh                      ; Control register
    57  002C                    TX8_2_TX_SHIFT_REG: equ 2ch                      ; TX Shift Register register
    58  002D                    TX8_2_TX_BUFFER_REG:    equ 2dh                  ; TX Buffer Register
    59  002C                    TX8_2_FUNC_REG: equ 2ch                          ; Function register
    60  002D                    TX8_2_INPUT_REG:    equ 2dh                      ; Input register
    61  002E                    TX8_2_OUTPUT_REG:   equ 2eh                      ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TX8_2.asm
     4                          ;;   Version: 3.50, Updated on 2012/3/2 at 9:15:33
     5                          ;;  Generated by PSoC Designer 5.2.2551
     6                          ;;
     7                          ;;  DESCRIPTION: TX8 User Module software implementation file.
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          ;-----------------------------------------------
    23                          ; include instance specific register definitions
    24                          ;-----------------------------------------------
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "TX8_2.inc"
    28                          
    29                          area UserModules (ROM, REL)
    30                          ;-----------------------------------------------
    31                          ;  Global Symbols
    32                          ;-----------------------------------------------
    33                          export   TX8_2_SetTxIntMode
    34                          export  _TX8_2_SetTxIntMode
    35                          export   TX8_2_EnableInt
    36                          export  _TX8_2_EnableInt
    37                          export   TX8_2_DisableInt
    38                          export  _TX8_2_DisableInt
    39                          export   TX8_2_Start
    40                          export  _TX8_2_Start
    41                          export   TX8_2_Stop
    42                          export  _TX8_2_Stop
    43                          export   TX8_2_SendData
    44                          export  _TX8_2_SendData
    45                          export   TX8_2_bReadTxStatus
    46                          export  _TX8_2_bReadTxStatus
    47                          
    48                          // Old labels, will be removed in future release
    49                          // Do Not Use.
    50                          export   bTX8_2_ReadTxStatus
    51                          export  _bTX8_2_ReadTxStatus
    52                          
    53                          ;-----------------------------------------------
    54                          ;  High Level TX functions
    55                          ;-----------------------------------------------
    56                          export  TX8_2_PutSHexByte
    57                          export _TX8_2_PutSHexByte
    58                          export  TX8_2_PutSHexInt
    59                          export _TX8_2_PutSHexInt
    60                          
    61                          export  TX8_2_CPutString
    62                          export _TX8_2_CPutString
    63                          export  TX8_2_PutString
    64                          export _TX8_2_PutString
    65                          export  TX8_2_PutChar
    66                          export _TX8_2_PutChar
    67                          export  TX8_2_Write
    68                          export _TX8_2_Write
    69                          export  TX8_2_CWrite
    70                          export _TX8_2_CWrite
    71                          export  TX8_2_PutCRLF
    72                          export _TX8_2_PutCRLF 
    73                          
    74                          ;-----------------------------------------------
    75                          ;  EQUATES
    76                          ;-----------------------------------------------
    77  0001                    bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
    78  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
    79                          
    80                          AREA UserModules (ROM, REL)
    81                          
    82                          .SECTION
    83                          ;-----------------------------------------------------------------------------
    84                          ;  FUNCTION NAME: TX8_2_EnableInt
    85                          ;
    86                          ;  DESCRIPTION:
    87                          ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
    88                          ;     bit associated with this User Module. Remember to call the global interrupt
    89                          ;     enable function by using the macro: M8C_EnableGInt.
    90                          ;
    91                          ;-----------------------------------------------------------------------------
    92                          ;
    93                          ;  ARGUMENTS: none
    94                          ;
    95                          ;  RETURNS: none
    96                          ;
    97                          ;  SIDE EFFECTS:
    98                          ;    The A and X registers may be modified by this or future implementations
    99                          ;    of this function.  The same is true for all RAM page pointer registers in
   100                          ;    the Large Memory Model.  When necessary, it is the calling function's
   101                          ;    responsibility to perserve their values across calls to fastcall16 
   102                          ;    functions.
   103                          ;
   104  0738                     TX8_2_EnableInt:
   105  0738                    _TX8_2_EnableInt:
   106                             RAM_PROLOGUE RAM_USE_CLASS_1
   107  0738  43 E1 08             M8C_EnableIntMask  TX8_2_INT_REG, TX8_2_bINT_MASK
   108                             RAM_EPILOGUE RAM_USE_CLASS_1
   109  073B  7F                   ret
   110                          .ENDSECTION
   111                          
   112                          .SECTION
   113                          ;-----------------------------------------------------------------------------
   114                          ;  FUNCTION NAME: TX8_2_DisableInt
   115                          ;
   116                          ;  DESCRIPTION:
   117                          ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
   118                          ;     associated with this User Module.
   119                          ;
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:  none
   123                          ;
   124                          ;  RETURNS:  none
   125                          ;
   126                          ;  SIDE EFFECTS:
   127                          ;    The A and X registers may be modified by this or future implementations
   128                          ;    of this function.  The same is true for all RAM page pointer registers in
   129                          ;    the Large Memory Model.  When necessary, it is the calling function's
   130                          ;    responsibility to perserve their values across calls to fastcall16 
   131                          ;    functions.
   132                          ;
   133  073C                     TX8_2_DisableInt:
   134  073C                    _TX8_2_DisableInt:
   135                             RAM_PROLOGUE RAM_USE_CLASS_1
   136  073C  41 E1 F7             M8C_DisableIntMask TX8_2_INT_REG, TX8_2_bINT_MASK
   137                             RAM_EPILOGUE RAM_USE_CLASS_1
   138  073F  7F                   ret
   139                          .ENDSECTION
   140                          
   141                          .SECTION
   142                          ;-----------------------------------------------------------------------------
   143                          ;  FUNCTION NAME: TX8_2_SetTxIntMode(BYTE bTxIntMode)
   144                          ;
   145                          ;  DESCRIPTION:
   146                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   147                          ;
   148                          ;  ARGUMENTS:
   149                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   150                          ;        Passed in the A register
   151                          ;
   152                          ;  RETURNS:
   153                          ;     none.
   154                          ;
   155                          ;  SIDE EFFECTS:
   156                          ;    The A and X registers may be modified by this or future implementations
   157                          ;    of this function.  The same is true for all RAM page pointer registers in
   158                          ;    the Large Memory Model.  When necessary, it is the calling function's
   159                          ;    responsibility to perserve their values across calls to fastcall16 
   160                          ;    functions.
   161                          ;
   162                          ;  THEORY of OPERATION OR PROCEDURE:
   163                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   164                          ;     on TX register empty or TX transmit complete
   165                          ;
   166  0740                     TX8_2_SetTxIntMode:
   167  0740                    _TX8_2_SetTxIntMode:
   168                             RAM_PROLOGUE RAM_USE_CLASS_1
   169  0740  71 10                M8C_SetBank1
   170  0742  21 01                and   A, TX8_2_INT_MODE_TX_COMPLETE
   171  0744  A007                 jz    .SetModeRegEmpty
   172  0746  43 2C 10             or    REG[TX8_2_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   173  0749  70 EF                M8C_SetBank0
   174                             RAM_EPILOGUE RAM_USE_CLASS_1
   175  074B  7F                   ret
   176                          
   177  074C                    .SetModeRegEmpty:
   178  074C  41 2C EF             and   REG[TX8_2_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   179  074F  70 EF                M8C_SetBank0
   180                             RAM_EPILOGUE RAM_USE_CLASS_1
   181  0751  7F                   ret
   182                          .ENDSECTION
   183                          
   184                          .SECTION
   185                          ;-----------------------------------------------------------------------------
   186                          ;  FUNCTION NAME: TX8_2_Start(BYTE bParity)
   187                          ;
   188                          ;  DESCRIPTION:
   189                          ;     Sets the start bit and parity in the Control register of this user module.
   190                          ;     The transmitter will begin transmitting if a byte has been written into the
   191                          ;     transmit buffer.
   192                          ;
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;    BYTE bParity - parity of transmitted data.  Use defined masks.
   197                          ;
   198                          ;  RETURNS:  none
   199                          ;
   200                          ;  SIDE EFFECTS:
   201                          ;    The A and X registers may be modified by this or future implementations
   202                          ;    of this function.  The same is true for all RAM page pointer registers in
   203                          ;    the Large Memory Model.  When necessary, it is the calling function's
   204                          ;    responsibility to perserve their values across calls to fastcall16 
   205                          ;    functions.
   206                          ;
   207  0752                     TX8_2_Start:
   208  0752                    _TX8_2_Start:
   209                             RAM_PROLOGUE RAM_USE_CLASS_1
   210  0752  29 01                or    A, bfCONTROL_REG_START_BIT
   211  0754  60 2F                mov   REG[TX8_2_CONTROL_REG], A
   212                             RAM_EPILOGUE RAM_USE_CLASS_1
   213  0756  7F                   ret
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: TX8_2_Stop
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Disables TX8 operation.
   222                          ;
   223                          ;-----------------------------------------------------------------------------
   224                          ;
   225                          ;  ARGUMENTS:  none
   226                          ;
   227                          ;  RETURNS:  none
   228                          ;
   229                          ;  SIDE EFFECTS:
   230                          ;    The A and X registers may be modified by this or future implementations
   231                          ;    of this function.  The same is true for all RAM page pointer registers in
   232                          ;    the Large Memory Model.  When necessary, it is the calling function's
   233                          ;    responsibility to perserve their values across calls to fastcall16 
   234                          ;    functions.
   235                          ;
   236  0757                     TX8_2_Stop:
   237  0757                    _TX8_2_Stop:
   238                             RAM_PROLOGUE RAM_USE_CLASS_1
   239  0757  41 2F FE             and   REG[TX8_2_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   240                             RAM_EPILOGUE RAM_USE_CLASS_1
   241  075A  7F                   ret
   242                          .ENDSECTION
   243                          
   244                          .SECTION
   245                          ;-----------------------------------------------------------------------------
   246                          ;  FUNCTION NAME: TX8_2_SendData
   247                          ;
   248                          ;  DESCRIPTION:
   249                          ;     Sends one byte through serial port.
   250                          ;
   251                          ;-----------------------------------------------------------------------------
   252                          ;
   253                          ;  ARGUMENTS:
   254                          ;     BYTE  TxData - data to transmit.
   255                          ;
   256                          ;  RETURNS:
   257                          ;
   258                          ;  SIDE EFFECTS:
   259                          ;    The A and X registers may be modified by this or future implementations
   260                          ;    of this function.  The same is true for all RAM page pointer registers in
   261                          ;    the Large Memory Model.  When necessary, it is the calling function's
   262                          ;    responsibility to perserve their values across calls to fastcall16 
   263                          ;    functions.
   264                          ;
   265  075B                     TX8_2_SendData:
   266  075B                    _TX8_2_SendData:
   267                             RAM_PROLOGUE RAM_USE_CLASS_1
   268  075B  60 2D                mov REG[TX8_2_TX_BUFFER_REG], A
   269                             RAM_EPILOGUE RAM_USE_CLASS_1
   270  075D  7F                   ret
   271                          .ENDSECTION
   272                          
   273                          .SECTION
   274                          ;-----------------------------------------------------------------------------
   275                          ;  FUNCTION NAME: TX8_2_bReadTxStatus
   276                          ;
   277                          ;  DESCRIPTION:
   278                          ;     Reads the Tx Status bits in the Control/Status register.
   279                          ;
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS:
   283                          ;
   284                          ;  RETURNS:
   285                          ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
   286                          ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
   287                          ;
   288                          ;  SIDE EFFECTS:
   289                          ;    The A and X registers may be modified by this or future implementations
   290                          ;    of this function.  The same is true for all RAM page pointer registers in
   291                          ;    the Large Memory Model.  When necessary, it is the calling function's
   292                          ;    responsibility to perserve their values across calls to fastcall16 
   293                          ;    functions.
   294                          ;
   295  075E                     TX8_2_bReadTxStatus:
   296  075E                    _TX8_2_bReadTxStatus:
   297  075E                     bTX8_2_ReadTxStatus:
   298  075E                    _bTX8_2_ReadTxStatus:
   299                             RAM_PROLOGUE RAM_USE_CLASS_1
   300  075E  5D 2F                mov A,  REG[TX8_2_CONTROL_REG]
   301                             RAM_EPILOGUE RAM_USE_CLASS_1
   302  0760  7F                   ret
   303                          
   304                          .ENDSECTION
   305                          
   306                          ;-----------------------------------------------------------------------------
   307                          ;  FUNCTION NAME: TX8_2_PutSHexByte
   308                          ;
   309                          ;  DESCRIPTION:
   310                          ;     Print a byte in Hex (two characters) to the UART Tx
   311                          ;
   312                          ;  ARGUMENTS:
   313                          ;     A  => (BYTE) Data/char to be printed
   314                          ;
   315                          ;  RETURNS:
   316                          ;     none.
   317                          ;
   318                          ;  SIDE EFFECTS:
   319                          ;    The A and X registers may be modified by this or future implementations
   320                          ;    of this function.  The same is true for all RAM page pointer registers in
   321                          ;    the Large Memory Model.  When necessary, it is the calling function's
   322                          ;    responsibility to perserve their values across calls to fastcall16 
   323                          ;    functions.
   324                          ;
   325                          .LITERAL
   326  0761                    TX8_2_HEX_STR:
   327  0761  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   328                          .ENDLITERAL
   329                          
   330                          .SECTION
   331  0771                     TX8_2_PutSHexByte:
   332  0771                    _TX8_2_PutSHexByte:
   333                              RAM_PROLOGUE RAM_USE_CLASS_1
   334  0771  08                    push  A                            ; Save lower nibble
   335  0772  67                    asr   A                            ; Shift high nibble to right
   336  0773  67                    asr   A
   337  0774  67                    asr   A
   338  0775  67                    asr   A
   339  0776  21 0F                 and   A,0Fh                        ; Mask off nibble
   340  0778  FFE7                  index TX8_2_HEX_STR                ; Get Hex value
   341  077A  900F                  call  TX8_2_PutChar                ; Write data to screen
   342  077C  18                    pop   A                            ; Restore value
   343  077D  21 0F                 and   A,0Fh                        ; Mask off lower nibble
   344  077F  FFE0                  index TX8_2_HEX_STR                ; Get Hex value
   345  0781  9008                  call  TX8_2_PutChar                ; Write data to screen
   346                              RAM_EPILOGUE RAM_USE_CLASS_1
   347  0783  7F                    ret
   348                          .ENDSECTION
   349                          
   350                          .SECTION
   351                          ;-----------------------------------------------------------------------------
   352                          ;  FUNCTION NAME: TX8_2_PutSHexInt
   353                          ;
   354                          ;  DESCRIPTION:
   355                          ;     Print an Int in Hex (four characters) to UART Tx
   356                          ;
   357                          ;  ARGUMENTS:
   358                          ;     Pointer to string
   359                          ;     A  => ASB of Int
   360                          ;     X  => MSB of Int
   361                          ;
   362                          ;  RETURNS:
   363                          ;     none.
   364                          ;
   365                          ;  SIDE EFFECTS:
   366                          ;    The A and X registers may be modified by this or future implementations
   367                          ;    of this function.  The same is true for all RAM page pointer registers in
   368                          ;    the Large Memory Model.  When necessary, it is the calling function's
   369                          ;    responsibility to perserve their values across calls to fastcall16 
   370                          ;    functions.
   371                          ;
   372  0784                     TX8_2_PutSHexInt:
   373  0784                    _TX8_2_PutSHexInt:
   374                              RAM_PROLOGUE RAM_USE_CLASS_1
   375  0784  4B                    swap  A,X
   376  0785  9FEA                  call  TX8_2_PutSHexByte            ; Print MSB
   377  0787  5B                    mov   A,X                          ; Move LSB into position
   378  0788  9FE7                  call  TX8_2_PutSHexByte            ; Print LSB
   379                              RAM_EPILOGUE RAM_USE_CLASS_1
   380  078A  7F                    ret
   381                          .ENDSECTION
   382                          
   383                          .SECTION
   384                          ;-----------------------------------------------------------------------------
   385                          ;  FUNCTION NAME: TX8_2_PutChar
   386                          ;
   387                          ;  DESCRIPTION:
   388                          ;     Send character out through UART TX port.
   389                          ;
   390                          ;
   391                          ;  ARGUMENTS:
   392                          ;     A has Character to send to UART Tx Port
   393                          ;
   394                          ;  RETURNS:
   395                          ;     none
   396                          ;
   397                          ;  SIDE EFFECTS:
   398                          ;    The A and X registers may be modified by this or future implementations
   399                          ;    of this function.  The same is true for all RAM page pointer registers in
   400                          ;    the Large Memory Model.  When necessary, it is the calling function's
   401                          ;    responsibility to perserve their values across calls to fastcall16 
   402                          ;    functions.
   403                          ;
   404                             macro InLinePutChar( Source )
   405                          .BufEmptyWaitLoop:
   406                             tst REG[TX8_2_CONTROL_REG], TX8_2_TX_BUFFER_EMPTY    ; Check Tx Status
   407                             jz  .BufEmptyWaitLoop
   408                             mov REG[TX8_2_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   409  078B                       endm
   410                          
   411                          
   412  078B                     TX8_2_PutChar:
   413  078B                    _TX8_2_PutChar:
   414                             RAM_PROLOGUE RAM_USE_CLASS_1
   415                             InLinePutChar A
      + 078B                    ; Nothing to do
??0000:
      + 078B  49 2F 10          	tst	reg[47], 16
      + 078E  AFFC              	jz	??0000
      + 0790  60 2D             	mov	reg[45], a
   416                             RAM_EPILOGUE RAM_USE_CLASS_1
   417  0792  7F                   ret
   418                          
   419                          .ENDSECTION
   420                          
   421                          
   422                          ;-----------------------------------------------
   423                          ;  High Level TX functions
   424                          ;-----------------------------------------------
   425                          
   426                          
   427                          .SECTION
   428                          ;-----------------------------------------------------------------------------
   429                          ;  FUNCTION NAME: TX8_2_PutString
   430                          ;
   431                          ;  DESCRIPTION:
   432                          ;     Send String out through UART TX port.
   433                          ;
   434                          ;
   435                          ;  ARGUMENTS:
   436                          ;     Pointer to String
   437                          ;     A has MSB of string address
   438                          ;     X has LSB of string address
   439                          ;
   440                          ;  RETURNS:
   441                          ;     none
   442                          ;
   443                          ;  SIDE EFFECTS:
   444                          ;    The A and X registers may be modified by this or future implementations
   445                          ;    of this function.  The same is true for all RAM page pointer registers in
   446                          ;    the Large Memory Model.  When necessary, it is the calling function's
   447                          ;    responsibility to perserve their values across calls to fastcall16 
   448                          ;    functions.
   449                          ;          
   450                          ;    Currently only the page pointer registers listed below are modified: 
   451                          ;          IDX_PP
   452                          ;
   453  0793                     TX8_2_PutString:
   454  0793                    _TX8_2_PutString:
   455                             RAM_PROLOGUE RAM_USE_CLASS_3
   456                             RAM_SETPAGE_IDX A
   457  0793                    .PutStringLoop:
   458  0793  52 00                mov   A,[X]                             ; Get value pointed to by X
   459  0795  A006                 jz    End_PutString                     ; Check for end of string
   460  0797  9FF2                 call  TX8_2_PutChar                      ; Send character to Tx port
   461  0799  75                   inc   X                                 ; Advance pointer to next character
   462  079A  8FF8                 jmp   .PutStringLoop                     ; Get next character
   463                          
   464  079C                    End_PutString:
   465                             RAM_EPILOGUE RAM_USE_CLASS_3
   466  079C  7F                   ret
   467                          .ENDSECTION
   468                          
   469                          .SECTION
   470                          ;-----------------------------------------------------------------------------
   471                          ;  FUNCTION NAME: TX8_2_Write
   472                          ;
   473                          ;  DESCRIPTION:
   474                          ;     Send String of length X to serial port
   475                          ;
   476                          ;
   477                          ;  ARGUMENTS:
   478                          ;     Pointer to String
   479                          ;     [SP-5] Count of characters to send
   480                          ;     [SP-4] has MSB of string address
   481                          ;     [SP-3] has LSB of string address
   482                          ;
   483                          ;  RETURNS:
   484                          ;     none
   485                          ;
   486                          ;  SIDE EFFECTS:
   487                          ;    The A and X registers may be modified by this or future implementations
   488                          ;    of this function.  The same is true for all RAM page pointer registers in
   489                          ;    the Large Memory Model.  When necessary, it is the calling function's
   490                          ;    responsibility to perserve their values across calls to fastcall16 
   491                          ;    functions.
   492                          ;          
   493                          ;    Currently only the page pointer registers listed below are modified: 
   494                          ;          IDX_PP
   495                          ;
   496  FFFFFFFB                    CNT_LEN:    equ -5           ; Length of data to send
   497  FFFFFFFC                    STR_MSB:    equ -4           ; MSB pointer of string
   498  FFFFFFFD                    STR_LSB:    equ -3           ; LSB pointer of string
   499                          
   500  079D                     TX8_2_Write:
   501  079D                    _TX8_2_Write:
   502                             RAM_PROLOGUE RAM_USE_CLASS_3
   503                             RAM_SETPAGE_IDX2STK
   504  079D  4F                   mov   X, SP
   505                          
   506  079E                    .NextByteLoop:
   507  079E  52 FB                mov   A,[X+CNT_LEN]                     ; Get length of string to send
   508  07A0  A013                 jz    .End_Write
   509  07A2  7B FB                dec   [X+CNT_LEN]                       ; Decrement counter
   510                          
   511                             IF SYSTEM_LARGE_MEMORY_MODEL
   512                             mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   513                             ENDIF
   514                          
   515  07A4  59 FD                mov   X,[X+STR_LSB]                     ; Get character to send
   516                             RAM_SETPAGE_IDX A                        ; switch index pages
   517  07A6  52 00                mov   A,[X]
   518                             InLinePutChar A                          ; Send character to UART
      + 07A8                    ??0001:
      + 07A8  49 2F 10          	tst	reg[47], 16
      + 07AB  AFFC              	jz	??0001
      + 07AD  60 2D             	mov	reg[45], a
   519  07AF  4F                   mov   X, SP
   520                             RAM_SETPAGE_IDX2STK
   521  07B0  77 FD                inc   [X+STR_LSB]
   522  07B2  8FEB                 jmp   .NextByteLoop
   523                          
   524  07B4                    .End_Write:
   525                             RAM_EPILOGUE RAM_USE_CLASS_3
   526  07B4  7F                   ret
   527                          .ENDSECTION
   528                          
   529                          .SECTION
   530                          ;-----------------------------------------------------------------------------
   531                          ;  FUNCTION NAME: TX8_2_CWrite
   532                          ;
   533                          ;             WARNING WARNING NOT COMPLETE
   534                          ;
   535                          ;  DESCRIPTION:
   536                          ;     Send String of length X to serial port
   537                          ;
   538                          ;  ARGUMENTS:
   539                          ;     Pointer to String
   540                          ;     [SP-6] MSB of Count of character to send
   541                          ;     [SP-5] LSB of Count of character to send
   542                          ;     [SP-4] has MSB of string address
   543                          ;     [SP-3] has LSB of string address
   544                          ;
   545                          ;  RETURNS:
   546                          ;     none
   547                          ;
   548                          ;  SIDE EFFECTS:
   549                          ;    The A and X registers may be modified by this or future implementations
   550                          ;    of this function.  The same is true for all RAM page pointer registers in
   551                          ;    the Large Memory Model.  When necessary, it is the calling function's
   552                          ;    responsibility to perserve their values across calls to fastcall16 
   553                          ;    functions.
   554                          ;
   555  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   556  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   557  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   558  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   559                          
   560  07B5                     TX8_2_CWrite:
   561  07B5                    _TX8_2_CWrite:
   562                             RAM_PROLOGUE RAM_USE_CLASS_2
   563  07B5  4F                   mov   X,SP
   564                          
   565  07B6                    .CW_Loop:
   566                                                                       ; Check for zero counter
   567  07B6  3D FA 00             cmp   [X+CLEN_MSB],0x00
   568  07B9  B006                 jnz   .CW_WRITEIT
   569  07BB  3D FB 00             cmp   [X+CLEN_LSB],0x00
   570  07BE  A01D                 jz    .End_CWrite                         ; Leave if done
   571                          
   572  07C0                    .CW_WRITEIT:                                 ; Save pointers
   573  07C0  10                   push  X
   574  07C1  52 FC                mov   A,[X+CSTR_MSB]
   575  07C3  59 FD                mov   X,[X+CSTR_LSB]
   576  07C5  28                   romx                                     ; Get character from ROM
   577                             InLinePutChar A
      + 07C6                    ??0002:
      + 07C6  49 2F 10          	tst	reg[47], 16
      + 07C9  AFFC              	jz	??0002
      + 07CB  60 2D             	mov	reg[45], a
   578  07CD  20                   pop   X
   579                          
   580  07CE  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   581  07D1  0F FC 00             adc   [X+CSTR_MSB],0
   582                          
   583                                                                      ; Dec the counter
   584  07D4  17 FB 01             sub   [X+CLEN_LSB],0x01
   585  07D7  1F FA 00             sbb   [X+CLEN_MSB],0x00
   586                          
   587  07DA  8FDB                 jmp   .CW_Loop
   588                          
   589  07DC                    .End_CWrite:
   590                             RAM_EPILOGUE RAM_USE_CLASS_1
   591  07DC  7F                   ret
   592                          .ENDSECTION
   593                          
   594                          .SECTION
   595                          ;-----------------------------------------------------------------------------
   596                          ;  FUNCTION NAME: TX8_2_CPutString
   597                          ;
   598                          ;  DESCRIPTION:
   599                          ;     Send String out through UART TX port.
   600                          ;
   601                          ;
   602                          ;  ARGUMENTS:
   603                          ;     Pointer to String
   604                          ;     A has MSB of string address
   605                          ;     X has LSB of string address
   606                          ;
   607                          ;  RETURNS:
   608                          ;     none
   609                          ;
   610                          ;  SIDE EFFECTS:
   611                          ;    The A and X registers may be modified by this or future implementations
   612                          ;    of this function.  The same is true for all RAM page pointer registers in
   613                          ;    the Large Memory Model.  When necessary, it is the calling function's
   614                          ;    responsibility to perserve their values across calls to fastcall16 
   615                          ;    functions.
   616                          ;
   617  07DD                     TX8_2_CPutString:
   618  07DD                    _TX8_2_CPutString:
   619                             RAM_PROLOGUE RAM_USE_CLASS_1   
   620  07DD  08                   push  A                                       ; Store ROM pointer
   621  07DE  10                   push  X
   622  07DF  28                   romx                                          ; Get character from ROM
   623  07E0  A00B                 jz    .End_CPutString
   624  07E2  9FA7                 call  TX8_2_PutChar                      ; Print character
   625  07E4  20                   pop   X
   626  07E5  18                   pop   A
   627  07E6  75                   inc   X                                       ; Inc LSB of pointer
   628  07E7  DFF5                 jnc   TX8_2_CPutString                        ; Check for carry
   629  07E9  74                   inc   A                                       ; Inc MSB of pointer
   630  07EA  8FF2                 jmp   TX8_2_CPutString
   631                          
   632                          
   633  07EC                    .End_CPutString:
   634  07EC  38 FE                add   SP, -2
   635                             RAM_EPILOGUE RAM_USE_CLASS_1
   636  07EE  7F                   ret
   637                          .ENDSECTION
   638                          
   639                          .SECTION
   640                          ;-----------------------------------------------------------------------------
   641                          ;  FUNCTION NAME: TX8_2_PutCRLF
   642                          ;
   643                          ;  DESCRIPTION:
   644                          ;     Send a CR and LF
   645                          ;
   646                          ;  ARGUMENTS:
   647                          ;     none.
   648                          ;
   649                          ;  RETURNS:
   650                          ;     none.
   651                          ;
   652                          ;  SIDE EFFECTS:
   653                          ;    The A and X registers may be modified by this or future implementations
   654                          ;    of this function.  The same is true for all RAM page pointer registers in
   655                          ;    the Large Memory Model.  When necessary, it is the calling function's
   656                          ;    responsibility to perserve their values across calls to fastcall16 
   657                          ;    functions.
   658                          ;
   659  07EF                     TX8_2_PutCRLF:
   660  07EF                    _TX8_2_PutCRLF:
   661                             RAM_PROLOGUE RAM_USE_CLASS_1
   662  07EF  50 0D                mov  A,0x0D                        ; Send CR
   663  07F1  9F98                 call TX8_2_PutChar
   664  07F3  50 0A                mov  A,0x0A                        ; Send LF
   665  07F5  9F94                 call TX8_2_PutChar
   666                             RAM_EPILOGUE RAM_USE_CLASS_1
   667  07F7  7F                   ret


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL6
Symbol Table                                                                                               Fri May 25 15:05:15 2012

           TX8_2_bReadTxStatus 075E                  TX8_2_FUNC_REG 002C             bTX8_2_ReadTxStatus 075E  
              _TX8_2_EnableInt 0738                   _TX8_2_CWrite 07B5                        CLEN_LSB FFFFFFFB  
                      CLEN_MSB FFFFFFFA                TX8_2_DisableInt 073C      TX8_2_INT_MODE_TX_COMPLETE 0001  
            TX8_2_SetTxIntMode 0740                        CSTR_LSB FFFFFFFD                        CSTR_MSB FFFFFFFC  
       bfCONTROL_REG_START_BIT 0001                      TX8_2_Stop 0757             TX8_2_TX_BUFFER_REG 002D  
                        ??0000 078B                          ??0001 07A8                          ??0002 07C6  
                 End_PutString 079C               _TX8_2_DisableInt 073C               TX8_2_PutSHexByte 0771  
                        HITECH 0002                     _TX8_2_Stop 0757                  _TX8_2_PutCRLF 07EF  
                _TX8_2_PutChar 078B                  TX8_2_SendData 075B                _TX8_2_PutString 0793  
                   TX8_2_Start 0752                     TX8_2_Write 079D              _TX8_2_PutSHexByte 0771  
     SYSTEM_LARGE_MEMORY_MODEL 0000                   TX8_2_HEX_STR 0761                   TX8_2_INT_REG 00E1  
               TX8_2_EnableInt 0738               TX8_2_CONTROL_REG 002F                       TOOLCHAIN 0002  
           _TX8_2_SetTxIntMode 0740                    _TX8_2_Start 0752                    _TX8_2_Write 079D  
                       CNT_LEN FFFFFFFB                 TX8_2_bINT_MASK 0008                TX8_2_PutSHexInt 0784  
               RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002                 RAM_USE_CLASS_3 0004  
               RAM_USE_CLASS_4 0008                 _TX8_2_SendData 075B                         STR_LSB FFFFFFFD  
bfFUNCTION_REG_TX_INT_MODE_BIT 0010                   TX8_2_PutCRLF 07EF                   TX8_2_PutChar 078B  
             _TX8_2_PutSHexInt 0784                    TX8_2_CWrite 07B5                TX8_2_CPutString 07DD  
          _TX8_2_bReadTxStatus 075E                 TX8_2_PutString 0793            _bTX8_2_ReadTxStatus 075E  
         TX8_2_TX_BUFFER_EMPTY 0010               _TX8_2_CPutString 07DD                   FLAG_XIO_MASK 0010  
    SYSTEM_IDXPG_TRACKS_IDX_PP 0001      SYSTEM_IDXPG_TRACKS_STK_PP 0000  
